"""
OFSC API Endpoints Registry

This module provides a comprehensive registry of all Oracle Field Service Cloud (OFSC) API endpoints
parsed from the swagger.json specification. It includes endpoint metadata, parameters, schemas, and
other relevant information for testing and validation.

Generated automatically from swagger.json - DO NOT EDIT MANUALLY
"""

from typing import Dict, List, Any, Optional, NamedTuple
from dataclasses import dataclass


@dataclass
class EndpointParameter:
    """Represents a parameter for an endpoint."""
    name: str
    location: str  # query, path, body, header
    type: str
    required: bool
    description: str = ""
    min_length: Optional[int] = None
    max_length: Optional[int] = None
    minimum: Optional[int] = None
    maximum: Optional[int] = None
    enum: Optional[List[str]] = None


@dataclass
class EndpointInfo:
    """Represents complete endpoint information."""
    id: int
    path: str
    method: str
    module: str
    summary: str
    description: str
    operation_id: str
    tags: List[str]
    required_parameters: List[EndpointParameter]
    optional_parameters: List[EndpointParameter]
    request_body_schema: Optional[str]
    response_schema: str
    implemented_in: str = ""
    signature: str = ""
    rate_limits: Optional[Dict[str, Any]] = None


# All endpoints from swagger.json
ENDPOINTS: List[EndpointInfo] = [
    EndpointInfo(
        id=1,
        path='/rest/ofscMetadata/v1/activityTypeGroups',
        method='GET',
        module='metadata',
        summary='Get activity type groups',
        description="This operation retrieves a collection of activity type groups.The response contains the translations of the activity type group name in the user's language in the translation structure and in the entity fields.",
        operation_id='Get activity type groups',
        tags=['Metadata/Activity Type Groups'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of activity type groups to be returned in the response. The minimum value that can be specified is 1. The maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='ActivityTypeGroups',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_activity_type_groups()',
        signature='async def get_activity_type_groups(self, offset: int = 0, limit: int = 100) -> ActivityTypeGroupListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=2,
        path='/rest/ofscMetadata/v1/activityTypeGroups/{label}',
        method='GET',
        module='metadata',
        summary='Get an activity type group',
        description="This operation retrieves the details of the specified activity type group.The response contains the translations of the activity type group name in the user's language in the translation structure and in the entity fields.",
        operation_id='Get activity type group',
        tags=['Metadata/Activity Type Groups'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the activity type group.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='ActivityTypeGroup',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_activity_type_group()',
        signature='async def get_activity_type_group(self, label: str) -> ActivityTypeGroup',
        rate_limits=None,
    ),
    EndpointInfo(
        id=3,
        path='/rest/ofscMetadata/v1/activityTypeGroups/{label}',
        method='PUT',
        module='metadata',
        summary='Create or replace an activity type group',
        description="This operation creates an activity type group resource or updates an existing one.If the 'translation' parameter is not available for the update, then the translations are not changed; else all the translations are replaced by the structure from the request. The translations that are sent as entity fields are ignored.",
        operation_id='Create/Replace activity type group',
        tags=['Metadata/Activity Type Groups'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the activity type group.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='ActivityTypeGroupForPut',
        response_schema='ActivityTypeGroup',
        implemented_in='metadata_api.py:OFSMetadataAPI.create_or_replace_activity_type_group()',
        signature='async def create_or_replace_activity_type_group(self, label: str, translations: Optional[TranslationList] = None) -> ActivityTypeGroup',
        rate_limits=None,
    ),
    EndpointInfo(
        id=4,
        path='/rest/ofscMetadata/v1/activityTypes',
        method='GET',
        module='metadata',
        summary='Get activity types',
        description='This operation retrieves a collection of activity types along with all the information about each activity type.',
        operation_id='Get Activity Types',
        tags=['Metadata/Activity Types'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the activity type is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of activity type records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is zero, greater than 100, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='ActivityTypes',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_activity_types()',
        signature='async def get_activity_types(self, offset: int = 0, limit: int = 100) -> ActivityTypeListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=5,
        path='/rest/ofscMetadata/v1/activityTypes/{label}',
        method='GET',
        module='metadata',
        summary='Get an activity type',
        description='This operation retrieves the details of the specified activity type.',
        operation_id='Get Activity Type',
        tags=['Metadata/Activity Types'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity type.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='ActivityType',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_activity_type()',
        signature='async def get_activity_type(self, label: str) -> ActivityType',
        rate_limits=None,
    ),
    EndpointInfo(
        id=6,
        path='/rest/ofscMetadata/v1/activityTypes/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update an activity type',
        description="This operation creates a new activity type or updates an existing activity type. <ul><li>If activity type with 'label' already exists, the function replaces it with the new values.</li><li>The 'features' object contains optional boolean parameters. If a feature is not present in the request then the default value 'false' is used for it.</li><li>Response code 200 is returned when an activity type object is updated.</li><li>Response code 201 is returned when an activity type object is created.</li></ul>",
        operation_id='Create/Update activity type',
        tags=['Metadata/Activity Types'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the activity type that is used in the request URL to create a new activity type or update an existing activity type.',
                min_length=1,
                max_length=32,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateActivityTypeSchema',
        response_schema='ActivityType',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=7,
        path='/rest/ofscMetadata/v1/applications',
        method='GET',
        module='metadata',
        summary='Get applications',
        description='This operation retrieves the list of applications.',
        operation_id='Get applications',
        tags=['Metadata/Applications'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of applications to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='Applications',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_applications()',
        signature='async def get_applications(self) -> ApplicationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=8,
        path='/rest/ofscMetadata/v1/applications/{label}',
        method='GET',
        module='metadata',
        summary='Get an application',
        description='This operation retrieves API configuration about a single application.',
        operation_id='Get application',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the application.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='Application',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_application()',
        signature='async def get_application(self, label: str) -> Application',
        rate_limits=None,
    ),
    EndpointInfo(
        id=9,
        path='/rest/ofscMetadata/v1/applications/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update an application',
        description='This operation creates a new application with the configuration settings or updates the configuration settings of an existing application.',
        operation_id='Create/Update application',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description="The label of the application that is used in the request URL to create a new application or update an existing application. The label must contain:<ul><li> Lowercase alphanumeric characters and underscore [a-z0-9_].</li><li> Must start with an alphabetic character [a-z]. </li></ul>Uppercase characters and unicode characters cannot be used for creating an application. For example 'test_app' is valid, but the following values are not valid: '123_test', 'TEST_APP', 'test-app'.</P>",
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateApplicationSchema',
        response_schema='Application',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=10,
        path='/rest/ofscMetadata/v1/applications/{label}/apiAccess',
        method='GET',
        module='metadata',
        summary='Get API accesses for applications',
        description='This operation retrieves the API access information for a collection of applications.',
        operation_id='Get applications api accesses',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the API access object.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='ApplicationApiAccesses',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_application_api_accesses()',
        signature='async def get_application_api_accesses(self, label: str) -> ApplicationApiAccessListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=11,
        path='/rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}',
        method='GET',
        module='metadata',
        summary='Get API access for an application',
        description='This operation retrieves the API access information of an application based on the specified API label and the application ID specified while creating the application.',
        operation_id='Get applications api access',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label used to retrieve the API access information of the application.',
                min_length=1,
                max_length=255,
            ),
            EndpointParameter(
                name='apiLabel',
                location='path',
                type='string',
                required=True,
                description='The label used to identify the API.',
                min_length=1,
                max_length=255,
                enum=['partsCatalogAPI', 'capacityAPI', 'coreAPI', 'fieldCollaborationAPI', 'inboundAPI', 'metadataAPI', 'outboundAPI', 'statisticsAPI'],
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='ApiConfiguration',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_application_api_access()',
        signature='async def get_application_api_access(self, label: str, api_label: str) -> ApplicationApiAccess',
        rate_limits=None,
    ),
    EndpointInfo(
        id=12,
        path='/rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}',
        method='PATCH',
        module='metadata',
        summary='Update API access for applications',
        description='This operation updates the API access information of an application based on the specified API label and the application ID specified while creating the application. For example, this method can be used to enable Core API access for a specific application.',
        operation_id='Update applications api access',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the application.',
                min_length=1,
                max_length=255,
            ),
            EndpointParameter(
                name='apiLabel',
                location='path',
                type='string',
                required=True,
                description='The label used to identify the API.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='ApiConfigurationPatch',
        response_schema='ApiConfigurationPatch',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=13,
        path='/rest/ofscMetadata/v1/applications/{label}/custom-actions/generateClientSecret',
        method='POST',
        module='metadata',
        summary='Generate client secret for applications',
        description='This operation generates client secret of an application based on the specified API label and the application ID while creating the application.',
        operation_id='Generate applications client secret',
        tags=['Metadata/Applications'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the application.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='ApplicationClientSecret',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=14,
        path='/rest/ofscMetadata/v1/capacityAreas',
        method='GET',
        module='metadata',
        summary='Get capacity areas',
        description='This operation retrieves a collection of capacity areas.',
        operation_id='Get capacity areas',
        tags=['Metadata/Capacity Areas'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='status',
                location='query',
                type='string',
                required=False,
                description="The status of the capacity area. If the specified value is 'Active', then only the active capacity areas and their capacity area groups are returned. If the specified value is 'Inactive', then only the inactive capacity areas and their capacity area groups are returned.",
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description="The list of fields that are returned in the response. <ul><li>Supported fields: label, name, type, status, parent.name, parent.label.</li><li>Default values: label.</li><b>Note</b>: The fields 'parent.name' and 'parent.label' are ignored if the value of the 'expand' parameter is not 'parent'.</ul>",
            ),
            EndpointParameter(
                name='expand',
                location='query',
                type='string',
                required=False,
                description="The related entities that are embedded for each capacity area item. This parameter accepts only 'parent' as a valid value. If the 'fields' parameter is not specified in the request, then by default only the 'label' field of the parent area is returned. You can also retrieve other fields for the parent area by specifying the 'fields' parameter as follows:<code>?expand=parent&fields=parent.name,parent.label</code>",
            ),
            EndpointParameter(
                name='type',
                location='query',
                type='string',
                required=False,
                description="The type of the capacity area. If the specified value is 'Area', then only the capacity areas are returned. If the specified value is 'Group', then the capacity area groups along with the capacity areas are returned.",
            ),
        ],
        request_body_schema=None,
        response_schema='CapacityAreas',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_areas()',
        signature='async def get_capacity_areas(self, expandParent: bool = False, fields: List[str] = ["label"], activeOnly: bool = False, areasOnly: bool = False) -> CapacityAreaListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=15,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}',
        method='GET',
        module='metadata',
        summary='Get a capacity area',
        description='This operation retrieves details about the specified capacity area.',
        operation_id='Get capacity area',
        tags=['Metadata/Capacity Areas'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='CapacityAreaConfiguration',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area()',
        signature='async def get_capacity_area(self, label: str) -> CapacityArea',
        rate_limits=None,
    ),
    EndpointInfo(
        id=16,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/capacityCategories',
        method='GET',
        module='metadata',
        summary='Get capacity categories of a capacity area',
        description='This operation retrieves a collection of capacity categories for the specified capacity area.',
        operation_id='Get capacity categories of area',
        tags=['Metadata/Capacity Areas/Capacity Categories'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaCapacityCategories',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area_categories()',
        signature='async def get_capacity_area_categories(self, area_label: str, offset: int = 0, limit: int = 100) -> CapacityAreaCategoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=17,
        path='/rest/ofscMetadata/v2/capacityAreas/{label}/workZones',
        method='GET',
        module='metadata',
        summary='Get work zones of a capacity area',
        description='This operation retrieves a collection of work zones for the specified capacity area.',
        operation_id='Get capacity work zones of area',
        tags=['Metadata/Capacity Areas/Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaWorkZones',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area_workzones()',
        signature='async def get_capacity_area_workzones(self, area_label: str, offset: int = 0, limit: int = 100) -> CapacityAreaWorkzoneListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=18,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/workZones',
        method='GET',
        module='metadata',
        summary='Get work zones of a capacity area (Deprecated)',
        description='This operation is deprecated because it returns a workzone name in the attribute named "label". Use the endpoint with the resource path "/rest/ofscMetadata/v2/capacityAreas/{label}/workZones", to get workzone labels and workzone names in the response attributes workZoneLabel and workZoneName respectively',
        operation_id='Get capacity work zones of area (Deprecated)',
        tags=['Metadata/Capacity Areas/Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaWorkZonesOld',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=19,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/timeSlots',
        method='GET',
        module='metadata',
        summary='Get time slots of a capacity area',
        description='This operation retrieves a collection of time slots for the specified capacity area.',
        operation_id='Get time slots of area',
        tags=['Metadata/Capacity Areas/Time Slots'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaTimeSlots',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area_timeslots()',
        signature='async def get_capacity_area_timeslots(self, area_label: str, offset: int = 0, limit: int = 100) -> CapacityAreaTimeSlotListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=20,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/timeIntervals',
        method='GET',
        module='metadata',
        summary='Get time intervals of a capacity area',
        description='This operation retrieves a collection of time intervals for the specified capacity area.',
        operation_id='Get time intervals of area',
        tags=['Metadata/Capacity Areas/Time Intervals'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaTimeIntervals',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area_timeintervals()',
        signature='async def get_capacity_area_timeintervals(self, area_label: str, offset: int = 0, limit: int = 100) -> CapacityAreaTimeIntervalListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=21,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/organizations',
        method='GET',
        module='metadata',
        summary='Get organizations of a capacity area',
        description='This operation retrieves a collection of organizations for the specified capacity area.',
        operation_id='Get Organizations of area',
        tags=['Metadata/Capacity Areas/Organizations'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='AreaOrganizations',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_area_organizations()',
        signature='async def get_capacity_area_organizations(self, area_label: str, offset: int = 0, limit: int = 100) -> CapacityAreaOrganizationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=22,
        path='/rest/ofscMetadata/v1/capacityAreas/{label}/children',
        method='GET',
        module='metadata',
        summary='Get children of a capacity area group',
        description='This operation retrieves the capacity areas of the specified capacity area group.',
        operation_id='Get children of area',
        tags=['Metadata/Capacity Areas/Time Intervals'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity area group.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='status',
                location='query',
                type='string',
                required=False,
                description="The status of the capacity area.<ul><li>If the specified value is 'Active', then only the active capacity areas and their capacity area groups are returned.</li> <li>If the specified value is 'Inactive', then only the inactive capacity areas and their capacity area groups are returned.</li></ul>",
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description="The list of fields that are returned in the response. <ul><li>Supported fields: label, name, type, status, parent.name, parent.label.</li><li>Default values: label.</li><b>Note</b>: The fields 'parent.name' and 'parent.label' are ignored if the value of the 'expand' parameter is not 'parent'.</ul>",
            ),
            EndpointParameter(
                name='expand',
                location='query',
                type='string',
                required=False,
                description="The related entities that are embedded for each capacity area item. This parameter accepts only 'parent' as a valid value. If the 'fields' parameter is not specified in the request, then by default only the 'label' field of the parent area is returned. You can also retrieve other fields for the parent area by specifying the 'fields' parameter as follows:<code>?expand=parent&fields=parent.name,parent.label</code>",
            ),
            EndpointParameter(
                name='type',
                location='query',
                type='string',
                required=False,
                description="The type of the capacity area.<ul><li>If the specified value is 'Area', then only the capacity areas are returned.</li><li>If the specified value is 'Group', then the capacity area groups along with the capacity areas are returned.</li></ul>",
            ),
        ],
        request_body_schema=None,
        response_schema='CapacityAreas',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=23,
        path='/rest/ofscMetadata/v1/capacityCategories',
        method='GET',
        module='metadata',
        summary='Get capacity categories',
        description='This operation retrieves a collection of capacity categories.',
        operation_id='Get capacity categories',
        tags=['Metadata/Capacity Categories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of items to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='CapacityCategories',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_categories()',
        signature='async def get_capacity_categories(self, offset: int = 0, limit: int = 100) -> CapacityCategoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=24,
        path='/rest/ofscMetadata/v1/capacityCategories/{label}',
        method='GET',
        module='metadata',
        summary='Get a capacity category',
        description="This operation retrieves the details about the specified capacity category. The operation also returns all translations related to the name of the capacity category. The response contains the translations for the user's language in the translation structure and in the 'name' entity field.",
        operation_id='Get capacity category',
        tags=['Metadata/Capacity Categories'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity category.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='CapacityCategory',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_capacity_category()',
        signature='async def get_capacity_category(self, label: str) -> CapacityCategoryResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=25,
        path='/rest/ofscMetadata/v1/capacityCategories/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update a capacity category',
        description='This operation creates a new capacity category or updates an existing capacity category.',
        operation_id='Create/Update capacity category',
        tags=['Metadata/Capacity Categories'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity category.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CapacityCategory',
        response_schema='CapacityCategory',
        implemented_in='metadata_api.py:OFSMetadataAPI.create_or_replace_capacity_category()',
        signature='async def create_or_replace_capacity_category(self, label: str, capacity_category: CapacityCategoryRequest) -> CapacityCategoryResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=26,
        path='/rest/ofscMetadata/v1/capacityCategories/{label}',
        method='DELETE',
        module='metadata',
        summary='Delete a capacity category',
        description='This operation deletes the specified capacity category.',
        operation_id='Delete capacity category',
        tags=['Metadata/Capacity Categories'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the capacity category.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='metadata_api.py:OFSMetadataAPI.delete_capacity_category()',
        signature='async def delete_capacity_category(self, label: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=27,
        path='/rest/ofscMetadata/v1/forms',
        method='GET',
        module='metadata',
        summary='Get a list of forms',
        description='This operation retrieves a list of forms in the Oracle Field Service application.',
        operation_id='get_/forms',
        tags=['Metadata/Forms'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the form is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
                minimum=0,
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of form records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
                minimum=1,
                maximum=100,
            ),
        ],
        request_body_schema=None,
        response_schema='Forms',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_forms()',
        signature='async def get_forms(self, offset: int = 0, limit: int = 100) -> FormListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=28,
        path='/rest/ofscMetadata/v1/forms/{label}',
        method='GET',
        module='metadata',
        summary='Get form details',
        description='This operation retrieves the details of the specified form.',
        operation_id='get_/forms/{label}',
        tags=['Metadata/Forms'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the form.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the form is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
        ],
        request_body_schema=None,
        response_schema='FormDetails',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_form()',
        signature='async def get_form(self, label: str) -> Form',
        rate_limits=None,
    ),
    EndpointInfo(
        id=29,
        path='/rest/ofscMetadata/v1/forms/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update a form',
        description='This operation creates a new form or updates an existing form. The Translations parameter is required for a new form. All the translations are replaced by the structure in the request. Also, the Name attribute in the translation structure is required for English and cannot be empty.<b>Configuration:</b> You must grant permissions to the Metadata API and must set Read-Write access to the Forms entity in the Configuration, Applications (API permissions) screen.',
        operation_id='put_/form/{label}',
        tags=['Metadata/Forms'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the form.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='FormBody',
        response_schema='FormDetailsWithStats',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=30,
        path='/rest/ofscMetadata/v1/forms/{label}',
        method='DELETE',
        module='metadata',
        summary='Delete a form',
        description='This operation deletes the form with the specified label.<b>Note:</b> Forms that are in use cannot be deleted.',
        operation_id='delete_/form/{label}',
        tags=['Metadata/Forms'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the form.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=31,
        path='/rest/ofscMetadata/v1/inventoryTypes',
        method='GET',
        module='metadata',
        summary='Get inventory types',
        description='The operation retrieves a collection of inventory types.<b>Configuration: </b> You must grant permissions to the Core API and must at least set Read-Only access to the Inventory type entity in the Configuration, Applications (API permissions) screen.',
        operation_id='Get Inventory Types',
        tags=['Metadata/Inventory Types'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translations for the name and unit of measurement of the inventory type is returned in the 'name' and 'unitOfMeasurement' fields.<ul><li>If the value is specified, then the translated value is returned in the 'name' and 'unitOfMeasurement' fields, and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' and 'unitOfMeasurement' fields is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of inventory type records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='InventoryTypes',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_inventory_types()',
        signature='async def get_inventory_types(self) -> InventoryTypeListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=32,
        path='/rest/ofscMetadata/v1/inventoryTypes/{label}',
        method='GET',
        module='metadata',
        summary='Get an inventory type',
        description='This operation retrieves the details of the specified inventory type.',
        operation_id='Get Inventory Type',
        tags=['Metadata/Inventory Types'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the inventory type.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translations for the name and unit of measurement of the inventory type is returned in the 'name' and 'unitOfMeasurement' fields.<ul><li>If the value is specified, then the translated value is returned in the 'name' and 'unitOfMeasurement' fields, and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' and 'unitOfMeasurement' fields is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
        ],
        request_body_schema=None,
        response_schema='InventoryType',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_inventory_type()',
        signature='async def get_inventory_type(self, label: str) -> InventoryType',
        rate_limits=None,
    ),
    EndpointInfo(
        id=33,
        path='/rest/ofscMetadata/v1/inventoryTypes/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update an inventory type',
        description="This operation creates a new inventory type or updates an existing inventory type. <ul><li>If the inventory type with 'label' already exists, the function replaces it with the new values.</li><li>Response code 200 is returned when an inventory type object is updated.</li><li>Response code 201 is returned when an inventory type object is created.</li></ul>",
        operation_id='Create/Update inventory type',
        tags=['Metadata/Inventory Types'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the inventory type that is used in the request URL to create a new inventory type or update an existing inventory type.',
                min_length=1,
                max_length=32,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateInventoryTypeSchema',
        response_schema='ResponseCreateInventoryTypeSchema',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=34,
        path='/rest/ofscMetadata/v1/languages',
        method='GET',
        module='metadata',
        summary='Get languages',
        description="This operation retrieves a collection of languages.The response contains the translations of the user's language in the translation structure and in the entity fields.",
        operation_id='Get Languages',
        tags=['Metadata/Languages'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of languages to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='Languages',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_languages()',
        signature='async def get_languages(self, offset: int = 0, limit: int = 100) -> LanguageListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=35,
        path='/rest/ofscMetadata/v1/linkTemplates',
        method='GET',
        module='metadata',
        summary='Get link templates',
        description='This operation retrieves a collection of link templates along with all the information about each link template.',
        operation_id='Get Link Templates',
        tags=['Metadata/Link Templates'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of link template records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is zero, greater than 100, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='LinkTemplates',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_link_templates()',
        signature='async def get_link_templates(self, offset: int = 0, limit: int = 100) -> LinkTemplateListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=36,
        path='/rest/ofscMetadata/v1/linkTemplates/{label}',
        method='GET',
        module='metadata',
        summary='Get a link template',
        description='This operation retrieves the details of the specified link template.',
        operation_id='Get Link Template',
        tags=['Metadata/Link Templates'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the link template.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='LinkTemplate',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_link_template()',
        signature='async def get_link_template(self, label: str) -> LinkTemplate',
        rate_limits=None,
    ),
    EndpointInfo(
        id=37,
        path='/rest/ofscMetadata/v1/linkTemplates/{label}',
        method='POST',
        module='metadata',
        summary='Create a link template',
        description='This operation creates a new link template.',
        operation_id='Create link template',
        tags=['Metadata/Link Templates'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the link template that is used in the request URL to create a new link template or update an existing link template.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateLinkTemplateSchema',
        response_schema='LinkTemplate',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=38,
        path='/rest/ofscMetadata/v1/linkTemplates/{label}',
        method='PATCH',
        module='metadata',
        summary='Update a link template',
        description='This operation updates an existing link template.',
        operation_id='Update link template',
        tags=['Metadata/Link Templates'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the link template that is used in the request URL to create a new link template or update an existing link template.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateLinkTemplateSchema',
        response_schema='LinkTemplate',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=39,
        path='/rest/ofscMetadata/v1/mapLayers',
        method='GET',
        module='metadata',
        summary='Get custom map layers',
        description='This operation retrieves a collection of the custom map layers.',
        operation_id='Get custom map layers',
        tags=['Metadata/Map Layers'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='CustomMapLayers',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=40,
        path='/rest/ofscMetadata/v1/mapLayers',
        method='POST',
        module='metadata',
        summary='Create a custom map layer',
        description='This operation creates a custom map layer.',
        operation_id='Create custom map layer',
        tags=['Metadata/Map Layers'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='CustomMapLayer',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=41,
        path='/rest/ofscMetadata/v1/mapLayers/{label}',
        method='GET',
        module='metadata',
        summary='Get a custom map layer',
        description='This operation retrieves the specified custom map layer.',
        operation_id='Get custom map layer',
        tags=['Metadata/Map Layers'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the custom map layer.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='CustomMapLayer',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=42,
        path='/rest/ofscMetadata/v1/mapLayers/{label}',
        method='PUT',
        module='metadata',
        summary='Replace a custom map layer',
        description='This operation updates the attributes of the specified custom map layer.',
        operation_id='Replace custom map layer',
        tags=['Metadata/Map Layers'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the custom map layer.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CustomMapLayer',
        response_schema='CustomMapLayer',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=43,
        path='/rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers/{downloadId}',
        method='GET',
        module='metadata',
        summary='Check custom map layer population status',
        description="This operation retrieves the import status of the custom map layer.<b>Error Messages:</b>The following errors may occur for this operation:<ul><li>Unexpected script error: The process was terminated unexpectedly.</li><li>Invalid query format '{query_record}: The query ID or the environment name is missing.</li><li>Empty URL: The request contains an empty 'url' field.</li><li>Failed to download file {url}: The shapefile could not be downloaded  with the specified credentials.</li><li>Failed to unpack file {url}: The shapefile was successfully downloaded, but the file could not be unzipped.</li><li>File size exceeds limit {filesize_limit}: The shapefile was successfully downloaded and unpacked, but the file size exceeds the threshold of 2GB.</li><li>Failed to parse shapefile {file_name}: Failed to parse the downloaded shape file.</li><li>Failed to process shapefile: The shapefile was parsed, but it cannot be stripped, and the theme name cannot be generated (length exceeds limit of 32 characters) or registered as the theme for MapViewer.</li></ul>",
        operation_id='Check custom map layer population status',
        tags=['Metadata/Map Layers'],
        required_parameters=[
            EndpointParameter(
                name='downloadId',
                location='path',
                type='string',
                required=True,
                description='The hash string that uniquely identifies the process for downloading shape files.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='CustomActionMapLayersPopulateLayersSchemaResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=44,
        path='/rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers',
        method='POST',
        module='metadata',
        summary='Populate a custom map layer',
        description="This operation creates a shapefile and converts it into a map layer in Oracle Field Service. This operation is asynchronous.Only 10 internal custom map layers are allowed for an Oracle Field Service environment. Therefore only 10 different labels are allowed in a request to create a map layer.A shapefile (zip archive) is limited to 2 GB. Not all the information in the zip archive is imported and therefore the maximum amount of data stored as Internal Custom Map Layers is limited to 1 GB per Oracle Field Service environment. Oracle Field Service downloads the shapefile from the specified url in the background. You should verify the status of shapefile download and creation using the 'Check custom map layer population status' api.",
        operation_id='Populate custom map layer',
        tags=['Metadata/Map Layers'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='CustomActionMapLayersPopulateLayersSchema',
        response_schema='CustomActionMapLayersPopulateLayersSchemaResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=45,
        path='/rest/ofscMetadata/v1/nonWorkingReasons',
        method='GET',
        module='metadata',
        summary='Get non-working reasons',
        description='The operation retrieves a collection of non-working reasons.',
        operation_id='Get Non-working Reasons',
        tags=['Metadata/Non-working Reasons'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the non-working reason is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of activity type records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='NonWorkingReasons',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_non_working_reasons()',
        signature='async def get_non_working_reasons(self, offset: int = 0, limit: int = 100) -> NonWorkingReasonListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=46,
        path='/rest/ofscMetadata/v1/organizations',
        method='GET',
        module='metadata',
        summary='Get organizations',
        description='This operation retrieves a collection of organizations.',
        operation_id='Get Organizations',
        tags=['Metadata/Organizations'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='Organizations',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_organizations()',
        signature='async def get_organizations(self) -> OrganizationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=47,
        path='/rest/ofscMetadata/v1/organizations/{label}',
        method='GET',
        module='metadata',
        summary='Get an organization',
        description='This operation retrieves an organization resource.',
        operation_id='Get Organization',
        tags=['Metadata/Organizations'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the organization.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='Organization',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_organization()',
        signature='async def get_organization(self, label: str) -> Organization',
        rate_limits=None,
    ),
    EndpointInfo(
        id=48,
        path='/rest/ofscMetadata/v1/plugins/custom-actions/import',
        method='POST',
        module='metadata',
        summary='Import Plugins',
        description='This operation imports all plugins defined in a valid pluginFile input xml [all the plugin properties should be installed before invoking this API]. If a plugin with the given label is available, then it updates the existing plugin otherwise it will create a new plugin. If there are secure parameters that also needs to be filled in the xml. The valid versions of installable plugins are available in https://www-sites.oracle.com/downloads/samplecode/ofsc-samplecode-downloads.html <b>Note: </b>The maximum size of the file that can be uploaded is limited to 67 MB, this limit depends on the Oracle Field Service environment configuration.<b>Configuration:</b> You must grant permissions to the Metadata API and must set Read-Write access to the Plugins entity in the Configuration, Applications (API permissions) screen.',
        operation_id='post /rest/ofscMetadata/v1/plugins/custom-actions/import',
        tags=['Metadata/Plugins'],
        required_parameters=[
            EndpointParameter(
                name='pluginFile',
                location='formData',
                type='file',
                required=True,
                description='A valid input plugin xml.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=49,
        path='/rest/ofscMetadata/v1/plugins/{pluginLabel}/custom-actions/install',
        method='POST',
        module='metadata',
        summary='Install Standard Plugin',
        description='This operation installs the standard plugins as defined in the path parameter. If a plugin with the given label is available, then it will return "Plugin already existing" error message, otherwise the plugin will get installed successfully.',
        operation_id='post /rest/ofscMetadata/v1/plugins/{pluginLabel}/custom-actions/install',
        tags=['Metadata/Plugins'],
        required_parameters=[
            EndpointParameter(
                name='pluginLabel',
                location='path',
                type='string',
                required=True,
                description='The label of the standard plugin.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=50,
        path='/rest/ofscMetadata/v1/properties',
        method='GET',
        module='metadata',
        summary='Get properties',
        description="This operation retrieves a collection of properties.The operation returns all the translations related to the name of the properties. The response contains the translations of the property name in the user's language in the translation structure and in the entity fields.",
        operation_id='Get properties',
        tags=['Metadata/Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of items that are skipped in the response. If a value is not specified, then it defaults to zero. The value zero indicates that the retrieval starts from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of properties to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
            EndpointParameter(
                name='type',
                location='query',
                type='string',
                required=False,
                description='The type of the property.',
            ),
            EndpointParameter(
                name='entity',
                location='query',
                type='string',
                required=False,
                description='The entity of the property.',
            ),
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the activity type is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
        ],
        request_body_schema=None,
        response_schema='PropertiesGet',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_properties()',
        signature='async def get_properties(self, offset: int = 0, limit: int = 100) -> PropertyListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=51,
        path='/rest/ofscMetadata/v1/properties/{label}',
        method='GET',
        module='metadata',
        summary='Get a property',
        description="This operation retrieves the specified property. The operation returns all the translations related to the name of the specified property.The response contains the translations of the property name in the user's language in the translation structure and in the entity fields.For the enumeration property, a link to the 'enumerationList' collection is returned.",
        operation_id='Get property',
        tags=['Metadata/Properties'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the property.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the activity type is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
        ],
        request_body_schema=None,
        response_schema='PropertyGet',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_property()',
        signature='async def get_property(self, label: str) -> PropertyResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=52,
        path='/rest/ofscMetadata/v1/properties/{label}',
        method='PUT',
        module='metadata',
        summary='Create or replace a property',
        description="This operation creates a property or updates an existing property.<b>Note:</b> The 'type' property with the value 'field' and the 'country_code' property cannot be created or updated. Only the 'translations' field can be created or updated.",
        operation_id='Create/Replace property',
        tags=['Metadata/Properties'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the property object.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='Property',
        response_schema='Property',
        implemented_in='metadata_api.py:OFSMetadataAPI.create_or_replace_property()',
        signature='async def create_or_replace_property(self, label: str, property_request: PropertyRequest) -> PropertyResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=53,
        path='/rest/ofscMetadata/v1/properties/{label}',
        method='PATCH',
        module='metadata',
        summary='Update a property',
        description="This operation updates an existing property.The operation updates only the values that are specified in the request.<b>Note:</b> The 'type' property with the value 'field' and the 'country_code' property cannot be created or updated. Only the 'translations' field can be created or updated.",
        operation_id='Update property',
        tags=['Metadata/Properties'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the property that needs to be updated.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='Property',
        response_schema='PropertyGet',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=54,
        path='/rest/ofscMetadata/v1/properties/{label}/enumerationList',
        method='GET',
        module='metadata',
        summary='Get enumeration values of a property',
        description='This operation retrieves a list of enumeration values for the specified property.The operation is applicable only for properties of the type enumeration.',
        operation_id="Get property's enumerations",
        tags=['Metadata/Properties'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the property.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number enumeration values to be skipped. The default value is zero. If the value is not specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of enumeration values to be retrieved in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the activity type is returned in the 'name' field. <ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
        ],
        request_body_schema=None,
        response_schema='PropertyEnumerations',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_enumeration_values()',
        signature='async def get_enumeration_values(self, label: str, offset: int = 0, limit: int = 100) -> EnumerationValueList',
        rate_limits=None,
    ),
    EndpointInfo(
        id=55,
        path='/rest/ofscMetadata/v1/properties/{label}/enumerationList',
        method='PUT',
        module='metadata',
        summary='Update or replace enumeration values of a property',
        description='This operation updates or replaces the enumeration values of the specified property.The operation is applicable only for properties of type \'enumeration\'.Consider the following while updating the enumeration values of a property:<ul><li>The specified property must exist in Oracle Field Service.</li><li>The enumeration values cannot be deleted.</li><li>The property \'country_code\' cannot be updated using this operation, though the property is of type enumeration.</li><li>The field \'label\' cannot be set to \'-1\' or \'0\'.</li><li>The English translation for each enumeration value is required and cannot be cleared.</li><li>API doesn\'t allow to set "inactive" status for all items, at least one item should remain active.</li></ul>',
        operation_id="Update/Replace property's enumerations",
        tags=['Metadata/Properties'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the property.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='PropertyEnumeration',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=56,
        path='/rest/ofscMetadata/v1/resourceTypes',
        method='GET',
        module='metadata',
        summary='Get resource types',
        description='This operation retrieves a collection of resource types.<b>Configuration:</b> You must grant permissions to the Core API and must at least set Read-Only access to the Resource type entity in the Configuration, Applications (API permissions) screen.',
        operation_id='Get Resource Types',
        tags=['Metadata/Resource Types'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description="The translation language code. Based on the value of this parameter, the translation for the name of the resource type is returned in the 'name' field.<ul><li>If the value is specified, then the translated value is returned in the 'name' field and the 'translations' field is not returned in the response.</li><li>If translation for the specified language does not exist, then the value in the 'name' field is returned in English.</li><li>If the value is not specified, then the 'translations' field is returned in the response and contains the translations to every language in the system.</li></ul>For the list of supported language codes, see <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a>.",
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of resource type records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='ResourceTypes',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_resource_types()',
        signature='async def get_resource_types(self) -> ResourceTypeListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=57,
        path='/rest/ofscMetadata/v1/routingProfiles',
        method='GET',
        module='metadata',
        summary='Get routing profiles labels',
        description='This operation retrieves the list of routing profiles labels.',
        operation_id='Get routing profiles labels',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of items that are skipped in the response. If a value is not specified, then it defaults to zero. The value zero indicates that the retrieval starts from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The maximum number of items returned in the response. The minimum value is 1 and the maximum value is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='routingProfileLabels',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_routing_profiles()',
        signature='async def get_routing_profiles(self, offset: int = 0, limit: int = 100) -> RoutingProfileListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=58,
        path='/rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans',
        method='GET',
        module='metadata',
        summary='Get routing plans labels',
        description='This operation retrieves the list of routing plan labels for a routing profile.',
        operation_id='Get routing plans labels',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of items that are skipped in the response. If a value is not specified, then it defaults to zero. The value zero indicates that the retrieval starts from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The maximum number of items returned in the response. The minimum value is 1 and the maximum value is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='routingPlanLabels',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_routing_profile_plans()',
        signature='async def get_routing_profile_plans(self, profile_label: str, offset: int = 0, limit: int = 100) -> RoutingPlanListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=59,
        path='/rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/custom-actions/export',
        method='GET',
        module='metadata',
        summary='Get a routing plan',
        description='This operation retrieves the specified routing plan for the specified routing profile.',
        operation_id='get /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/custom-actions/export',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_routing_profile_plan_export()',
        signature='async def get_routing_profile_plan_export(self, profile_label: str, plan_label: str, media_type: Optional[str] = "application/octet-stream") -> RoutingPlanExportResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=60,
        path='/rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/custom-actions/import',
        method='PUT',
        module='metadata',
        summary='Add a routing plan',
        description='This operation creates the routing plan for the specified routing profile.',
        operation_id='put /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/custom-actions/import',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=61,
        path='/rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/custom-actions/forceImport',
        method='PUT',
        module='metadata',
        summary='Force add a routing plan',
        description='This operation creates the routing plan for the specified routing profile. In the case when Routing Plan with provided label already exists, it will be overwritten.',
        operation_id='put /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/custom-actions/forceImport',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=62,
        path='/rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/{resourceExternalId}/{date}/custom-actions/start',
        method='POST',
        module='metadata',
        summary='Start routing plan',
        description='This operation starts the routing plan.',
        operation_id='post /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/{resourceExternalId}/{date}/custom-actions/start',
        tags=['Metadata/Routing Profiles'],
        required_parameters=[
            EndpointParameter(
                name='resourceExternalId',
                location='path',
                type='string',
                required=True,
                description='The external ID of the bucket.',
                min_length=1,
                max_length=32,
            ),
            EndpointParameter(
                name='date',
                location='path',
                type='string',
                required=True,
                description='Date to start routing profile for. Specify the date in YYYY-MM-DD format.',
                min_length=1,
                max_length=32,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=63,
        path='/rest/ofscMetadata/v1/shifts',
        method='GET',
        module='metadata',
        summary='Get shifts',
        description='This operation retrieves a collection of shifts along with all the information about each shift.',
        operation_id='Get shifts',
        tags=['Metadata/Shifts'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of shift records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is zero, greater than 100, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='Shifts',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_shifts()',
        signature='async def get_shifts(self, offset: int = 0, limit: int = 100) -> ShiftListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=64,
        path='/rest/ofscMetadata/v1/shifts/{label}',
        method='GET',
        module='metadata',
        summary='Get a shift',
        description='This operation retrieves the details of the specified shift.',
        operation_id='Get a Shift',
        tags=['Metadata/Shifts'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the shift.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='Shift',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_shift()',
        signature='async def get_shift(self, label: str) -> Shift',
        rate_limits=None,
    ),
    EndpointInfo(
        id=65,
        path='/rest/ofscMetadata/v1/shifts/{label}',
        method='DELETE',
        module='metadata',
        summary='Delete a shift',
        description='This operation deletes the specified shift. A shift cannot be deleted if it is in use, such as when assigned to a resource, linked to a repeating activity, or part of a work schedule. In such cases, the system returns a 409 Conflict response. All associations must be removed before deletion is allowed.',
        operation_id='Delete a shift',
        tags=['Metadata/Shifts'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the shift.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=66,
        path='/rest/ofscMetadata/v1/shifts/{label}',
        method='PUT',
        module='metadata',
        summary='Create or update a shift',
        description="This operation creates a new shift or updates an existing shift. <ul><li>If shift with 'label' already exists, the function replaces it with the new values.</li><li>Response code 200 is returned when an shift object is updated.</li><li>Response code 201 is returned when an shift object is created.</li></ul>",
        operation_id='Create/Update a shift',
        tags=['Metadata/Shifts'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the shift that is used in the request URL to create a new shift or update an existing shift.',
                min_length=1,
                max_length=32,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='CreateShiftSchema',
        response_schema='Shift',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=67,
        path='/rest/ofscMetadata/v1/timeSlots',
        method='GET',
        module='metadata',
        summary='Get time slots',
        description='This operation retrieves a collection of time slots.<b>Configuration:</b> You must grant permissions to the Core API and must at least set Read-Only access to the timeslots entity in the Configuration, Applications (API permissions) screen.',
        operation_id='Get Time Slots',
        tags=['Metadata/Time Slots'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of time slot records to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='TimeSlots',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_timeslots()',
        signature='async def get_timeslots(self, offset: int = 0, limit: int = 100) -> TimeSlotListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=68,
        path='/rest/ofscMetadata/v1/workSkillConditions',
        method='GET',
        module='metadata',
        summary='Get work skill conditions',
        description='This operation retrieves a list of work skill conditions.',
        operation_id='Get work skill conditions',
        tags=['Metadata/Work Skills/Work Skill Conditions'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='WorkSkillConditions',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workskill_conditions()',
        signature='async def get_workskill_conditions(self) -> WorkskillConditionListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=69,
        path='/rest/ofscMetadata/v1/workSkillConditions',
        method='PUT',
        module='metadata',
        summary='Replace work skill conditions',
        description='This operation updates all the work skill conditions.<b>Note:</b> The conditions that are not provided in the request are removed from the system.',
        operation_id='Replace work skill conditions (All)',
        tags=['Metadata/Work Skills/Work Skill Conditions'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='PutWorkSkillConditions',
        response_schema='WorkSkillConditions',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=70,
        path='/rest/ofscMetadata/v1/workSkillGroups',
        method='GET',
        module='metadata',
        summary='Get work skill groups',
        description="This operation retrieves a collection of work skill groups.The response contains the translations of the work skill group name in the user's language in the translation structure and in the entity fields.",
        operation_id='Get work skill groups',
        tags=['Metadata/Work Skills/Work Skill Groups'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of work skill groups to be skipped from the start of the collection in the response.  If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of work skill groups to be returned in the response.  The minimum value that can be specified is 1. The maximum value that can be specified is 100. If no value or a value greater than 100 is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='WorkSkillGroups',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workskill_groups()',
        signature='async def get_workskill_groups(self) -> WorkSkillGroupListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=71,
        path='/rest/ofscMetadata/v1/workSkillGroups/{label}',
        method='GET',
        module='metadata',
        summary='Get a work skill group',
        description="This operation retrieves the specified work skill group.The response contains the translations of the work skill group name in the user's language in the translation structure and in the entity fields.",
        operation_id='Get work skill group',
        tags=['Metadata/Work Skills/Work Skill Groups'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill group.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='WorkSkillGroup',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workskill_group()',
        signature='async def get_workskill_group(self, label: str) -> WorkSkillGroup',
        rate_limits=None,
    ),
    EndpointInfo(
        id=72,
        path='/rest/ofscMetadata/v1/workSkillGroups/{label}',
        method='PUT',
        module='metadata',
        summary='Create or replace a work skill group',
        description="This operation creates a work skill group resource or updates an existing one.If the 'translation' parameter is not available for the update, then the translations are not changed; else all the translations are replaced by the structure from the request. The translations that are sent as entity fields are ignored.",
        operation_id='Create/Replace work skill group',
        tags=['Metadata/Work Skills/Work Skill Groups'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill group.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='WorkSkillGroup',
        response_schema='WorkSkillGroup',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=73,
        path='/rest/ofscMetadata/v1/workSkillGroups/{label}',
        method='DELETE',
        module='metadata',
        summary='Delete a work skill group',
        description='This operation deletes the specified work skill group.',
        operation_id='Delete work skill group',
        tags=['Metadata/Work Skills/Work Skill Groups'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill group.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=74,
        path='/rest/ofscMetadata/v1/workSkills',
        method='GET',
        module='metadata',
        summary='Get work skills',
        description='This operation retrieves a collection of work skills.',
        operation_id='Get work skills',
        tags=['Metadata/Work Skills'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of work skills to be skipped in the response. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of work skills to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='WorkSkills',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workskills()',
        signature='async def get_workskills(self, offset: int = 0, limit: int = 100) -> WorkskillListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=75,
        path='/rest/ofscMetadata/v1/workSkills/{label}',
        method='GET',
        module='metadata',
        summary='Get a work skill',
        description='This operation retrieves the specified work skill.',
        operation_id='Get work skill',
        tags=['Metadata/Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='WorkSkill',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workskill()',
        signature='async def get_workskill(self, label: str) -> Workskill',
        rate_limits=None,
    ),
    EndpointInfo(
        id=76,
        path='/rest/ofscMetadata/v1/workSkills/{label}',
        method='PUT',
        module='metadata',
        summary='Create or replace a work skill',
        description='This operation creates a work skill or replaces an existing work skill.',
        operation_id='Create/Replace work skill',
        tags=['Metadata/Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='WorkSkill',
        response_schema='WorkSkill',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=77,
        path='/rest/ofscMetadata/v1/workSkills/{label}',
        method='DELETE',
        module='metadata',
        summary='Delete a work skill',
        description='This operation deletes the specified work skill.',
        operation_id='Delete work skill',
        tags=['Metadata/Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work skill.',
                min_length=1,
                max_length=40,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=78,
        path='/rest/ofscMetadata/v1/workZones',
        method='GET',
        module='metadata',
        summary='Get work zones',
        description='This operation retrieves the list of work zones that are visible to the API user.',
        operation_id='Get work zones',
        tags=['Metadata/Work Zones'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The number of items that are skipped in the response. If a value is not specified, then it defaults to zero. The value zero indicates that the retrieval starts from the beginning of the collection.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The maximum number of items returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, zero, or if no value is specified, then it defaults to 100.',
            ),
        ],
        request_body_schema=None,
        response_schema='workZones',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workzones()',
        signature='async def get_workzones(self, offset: int = 0, limit: int = 100) -> WorkzoneListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=79,
        path='/rest/ofscMetadata/v1/workZones',
        method='POST',
        module='metadata',
        summary='Create a work zone',
        description="This operation creates a new work zone.The following criteria applies while creating a work zone:<ul><li>Fields must not have any blank spaces at the end, for example 'a '. All white spaces are ignored.</li><li>Values in the keys arrays must be unique.</li><li>Same key may be present only once across all the active work zones (inactive work zones are ignored).</li><li>Values in the shapes arrays must be unique.</li><li>Same shape may be present only once across the all active work zones (inactive work zones are ignored).</li><li>Validation is not case sensitive, that is 'a' is the same as 'A'.</li></ul>",
        operation_id='Create work zone',
        tags=['Metadata/Work Zones'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='autoResolveConflicts',
                location='query',
                type='boolean',
                required=False,
                description='This parameter automatically resolves conflicts in work zone keys. If the value of this parameter is specified, then Oracle Field Service automatically removes the specified work zone keys from other active work zones. This parameter applies only if the work zone being created or updated is active.',
            ),
        ],
        request_body_schema='workZoneItem',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=80,
        path='/rest/ofscMetadata/v1/workZones',
        method='PUT',
        module='metadata',
        summary='Bulk replace work zones',
        description='This operation replaces the entire collection of work zones in a single request. All conflicts are auto-resolved, and all the existing work zones that are not present in the request are deactivated.The operation could be time-consuming, so do not send more than 1000 work zones, 10000 keys and shapes in a single request. If the work zone collection is too large for a single request, then replace the collection in several requests as follows:<ol><li>Bulk replace 1000 zones in a single request.</li><li>Bulk update the next 1000 zones, and so on.</li></ol>The following are the limitations for a request:<ul><li>The request can contain a maximum of 2000 work zones. </li><li>The request can contain a maximum of 20000 keys and shapes.</li><li>The request size must not exceed 2 MiB.</li></ul>',
        operation_id='Bulk replace work zones',
        tags=['Metadata/Work Zones'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='workZones',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=81,
        path='/rest/ofscMetadata/v1/workZones',
        method='PATCH',
        module='metadata',
        summary='Bulk update work zones',
        description='This operation updates multiple work zones in a single request. All conflicts are auto-resolved.The operation could be time-consuming, so do not send more than 1000 work zones, 10000 keys and shapes in a single request. If the work zone collection is too large for a single request, then update the work zones in several requests.The following are the limitations for a request:<ul><li>The request can contain a maximum of 2000 work zones. </li><li>The request can contain a maximum of 20000 keys and shapes.</li><li>The request size must not exceed 2 MiB.</li></ul>',
        operation_id='Bulk update work zones',
        tags=['Metadata/Work Zones'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='workZones',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=82,
        path='/rest/ofscMetadata/v1/workZones/{label}',
        method='GET',
        module='metadata',
        summary='Get a work zone',
        description='This operation retrieves the attributes of the specified work zone.',
        operation_id='Get work zone',
        tags=['Metadata/Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='The label of the work zone.',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='workZoneItem',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_workzone()',
        signature='async def get_workzone(self, label: str) -> Workzone',
        rate_limits=None,
    ),
    EndpointInfo(
        id=83,
        path='/rest/ofscMetadata/v1/workZones/{label}',
        method='PUT',
        module='metadata',
        summary='Replace a work zone',
        description="This operation updates the specified work zone with the attributes provided in the request. If the specified work zone already contains attributes, this operation replaces them with the values specified in the request.The following criteria applies while replacing a work zone:<ul><li>Fields must not have any blank spaces at the end, for example 'a '. All white spaces are ignored.</li><li>Values in the keys arrays must be unique.</li><li>Same key may be present only once across all the active work zones (inactive work zones are ignored).</li><li>Values in the shapes arrays must be unique.</li><li>Same shape may be present only once across the all active work zones (inactive work zones are ignored).</li><li>Validation is not case sensitive, that is 'a' is the same as 'A'.</li></ul>",
        operation_id='Replace work zone',
        tags=['Metadata/Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='label',
                location='path',
                type='string',
                required=True,
                description='',
                min_length=1,
                max_length=255,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='autoResolveConflicts',
                location='query',
                type='boolean',
                required=False,
                description='This parameter automatically resolves conflicts in work zone keys. If the value of this parameter is specified, then Oracle Field Service automatically removes the specified work zone keys from other active work zones. This parameter applies only if the work zone being created or updated is active.',
            ),
        ],
        request_body_schema='workZoneItem',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=84,
        path='/rest/ofscMetadata/v1/workZones/custom-actions/populateShapes/{downloadId}',
        method='GET',
        module='metadata',
        summary='Get status of shape upload',
        description='This operation retrieves the status of the shapefile upload process.',
        operation_id='Get shapes populating status',
        tags=['Metadata/Work Zones/Work Zone Shapes'],
        required_parameters=[
            EndpointParameter(
                name='downloadId',
                location='path',
                type='string',
                required=True,
                description='',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='customActionWorkZonesPopulateShapesSchemaResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=85,
        path='/rest/ofscMetadata/v1/workZones/custom-actions/populateShapes',
        method='POST',
        module='metadata',
        summary='Start shape upload',
        description="This operation uploads the shape files of the work zone. All the shapefile must be uploaded in a single request. Every time a shapefile is uploaded, the existing shapefile is removed. Therefore, uploading shapefiles in an incremental order is not supported. For more information on uploading shapefiles, see <a href='OFSC_Configuring_a_Custom_Map_Layer_by_Using_the_Metadata_API.html'>Configuring a Custom Map Layer by Using the Metadata API</a>.<b>Note:</b> From version 16.8.3 onwards, when the workzone shapefiles are uploaded, Oracle Field Service performs several validations to rectify the data imported from non-Oracle applications. If the shapefile is already uploaded, then it is recommended that you upload the shapefiles again to ensure that there are no issues in the existing data.",
        operation_id='Start shape population process',
        tags=['Metadata/Work Zones/Work Zone Shapes'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionWorkZonesPopulateShapesSchema',
        response_schema='customActionWorkZonesPopulateShapesSchemaResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=86,
        path='/rest/ofscMetadata/v1/workZoneKey',
        method='GET',
        module='metadata',
        summary='Get the work zone key',
        description="This operation retrieves the work zone key configuration. The work zone key information is represented by two objects: 'current' and 'pending'. This operation returns both objects when they are different but skips the 'pending' object if it is the same as the 'current' object. The order in which the fields are returned in the response is same as the order in which they are used in the key.",
        operation_id='Get work zone key',
        tags=['Metadata/Work Zone Key'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='workZoneKey',
        implemented_in='metadata_api.py:OFSMetadataAPI.get_work_zone_key()',
        signature='async def get_work_zone_key(self) -> WorkZoneKeyResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=87,
        path='/rest/ofscStatistics/v1/activityDurationStats',
        method='GET',
        module='statistics',
        summary='Get activity duration statistics',
        description="This operation retrieves a collection of activity duration statistics. The maximum number of records that can be retrieved in a single response is 10000. If there are more than 10000 records, the remaining records can be accessed using the 'next' link available at the bottom of the response.This operation can be used only when the following conditions are satisfied:<ul><li>The customer must have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The required application must have permission to access the Statistics API. To grant the permission, navigate to <b>Configuration</b> > <b>Applications</b> screen. For the required application, in the <b>API access</b> section, click <b>Add new</b> and select <b>Statistics API</b>.</li></ul>",
        operation_id='get activityDuration',
        tags=['Statistics/Activity Duration'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='resourceId',
                location='query',
                type='string',
                required=False,
                description="The external identifier of the resource. To fetch the activity duration statistics at the company level, provide '' (single quotes) as the value for this parameter.",
                max_length=32,
            ),
            EndpointParameter(
                name='includeChildren',
                location='query',
                type='boolean',
                required=False,
                description="Contains one of the following values: true or false. If true, then the details of child resources are included in the response. If false, then the details of child resources are not included in the response. The default value is 'true'.",
            ),
            EndpointParameter(
                name='akey',
                location='query',
                type='string',
                required=False,
                description="The value of the activity duration key. It appears as 'Appointment Key' in the report.",
                max_length=50,
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of records to be returned in the response.',
                minimum=1,
                maximum=10000,
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
                minimum=0,
            ),
        ],
        request_body_schema=None,
        response_schema='activityDurationsList',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=88,
        path='/rest/ofscStatistics/v1/activityDurationStats',
        method='PATCH',
        module='statistics',
        summary='Update activity duration statistics',
        description="This operation updates the activity duration override for the activity duration key that is currently active.It is possible to override the activity duration either at the company level, bucket level or at the technician level. To override the activity duration at the company level, the 'resourceId' field must be empty.If there are multiple activity duration keys configured in the application, the overrides are applicable only to the activity duration key that is currently active. If the activity duration key is modified, then the overrides for that key are deleted from the application. However, the overrides persist if another activity duration key is active, with the old key in the application being inactive state. If the inactive key is set to active again, the overrides that were set corresponding to that key become applicable for the duration estimates.For the activity duration key that is currently active, the override value is stored in the application along with the statistically learned value. For activity duration estimates, if an override is specified, then the override value is used instead of the statistically learned value. However, the statistically learned value is updated based on the new durations reported. At any point of time, it is possible to stop using the overrides by importing the data again with value 0 in the 'override' field. In such cases, the application starts using the statistically learned value for the duration estimates. If a part of the key contains properties to be considered as case-insensitive, the value specified for that part of the key should be in smaller case in the API request. Note: <li>When the Statistics API is used to make activity duration changes, the changes are reflected for all future activities in the application only after the next run of the statistics agent. The statistics agent is run once a day, usually in the early morning hours.</li><li>The limit for each API request is 10000 records. To update more records, multiple requests can be used.</li>The operation can be used only when the following conditions are satisfied:<ul><li>The customer must have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The required application must have permission to access the Statistics API. To grant the permission, navigate to <b>Configuration</b>, <b>Applications</b> screen. For the required application, click <b>Add new</b> in the <b>API access</b> section, and select <b>Statistics API</b>.</li></ul>",
        operation_id='patch activityDuration',
        tags=['Statistics/Activity Duration'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='activityDurationRequestList',
        response_schema='activityDurationPatchResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=89,
        path='/rest/ofscStatistics/v1/activityTravelStats',
        method='GET',
        module='statistics',
        summary='Get activity travel statistics',
        description="This operation retrieves a collection of activity travel statistics at the company level. The maximum number of records that can be retrieved in a single response is 10000. If there are more than 10000 records, the remaining records can be accessed using the 'next' link available at the bottom of the response.This operation can be used only when the following conditions are satisfied:<ul><li>The customer must have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The required application must have permission to access the Statistics API. To grant the permission, navigate to <b>Configuration</b> > <b>Applications</b> screen. For the required application, in the <b>API access</b> section, click <b>Add new</b> and select <b>Statistics API</b>.</li></ul>",
        operation_id='get activityTravel',
        tags=['Statistics/Activity Travel'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='region',
                location='query',
                type='string',
                required=False,
                description="The label for the region. For example, 'xyz_enterprise'.",
            ),
            EndpointParameter(
                name='tkey',
                location='query',
                type='string',
                required=False,
                description="The travel key value corresponding to the destination of the travel. For example, '11 AY'.",
                max_length=50,
            ),
            EndpointParameter(
                name='fkey',
                location='query',
                type='string',
                required=False,
                description="The travel key value corresponding to the starting location of the travel. For example, 'SRT D3'.",
                max_length=50,
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of records to be returned in the response.',
                minimum=1,
                maximum=10000,
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
                minimum=0,
            ),
            EndpointParameter(
                name='keyId',
                location='query',
                type='integer',
                required=False,
                description="Key ID of one of the configured travel keys.<ul><li>If the parameter 'keyId' is not specified, data for all travel key pairs will be retrieved.</li><li>If 'keyId' is specified and if it exists in the system, data will be retrieved for the travel key pairs of the corresponding Key ID.</li><li>If 'keyId' is specified but if does not exist in the system, an error message will be returned</li></ul>If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this parameter will be ignored.",
                minimum=1,
            ),
        ],
        request_body_schema=None,
        response_schema='activityTravelsList',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=90,
        path='/rest/ofscStatistics/v1/activityTravelStats',
        method='PATCH',
        module='statistics',
        summary='Update activity travel statistics',
        description="This operation updates the travel duration override for the travel keys that are currently active. However, it is possible to override the travel durations only at the company level and not at any of the lower levels. The override value is stored in the application in addition to the statistically learned value. For travel duration estimates, if an override is specified, then the override value is used instead of the statistically learned value. However, the statistically learned value is kept updated based on new reported durations. At any point of time, it is possible to stop using the overrides by importing the data again with value 0 in the 'override' field. In such cases, the application starts using the statistically learned value for duration estimates. If a part of the key contains properties to be considered as case-insensitive, the value specified for that part of the key should be in smaller case in the API request. Note: <li>When the Statistics API is used to make travel duration changes, the changes are reflected for all future travels in the application only after the next run of the statistics agent. The statistics agent is run once a day, usually in the early morning hours.</li><li>The limit for each API request is 10000 records. To update more records, multiple requests can be used.</li>This operation can be used only when the following conditions are satisfied:<ul><li>The customer must have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The required application must have permission to access the Statistics API. To grant the permission, navigate to <b>Configuration</b>, <b>Applications</b> screen. For the required application, click <b>Add new</b> in the <b>API access</b> section, and select <b>Statistics API</b>.</li><li>If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this API cannot be used.</li></ul>",
        operation_id='patch activityTravel',
        tags=['Statistics/Activity Travel'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='activityTravelRequestList',
        response_schema='activityTravelPatchResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=91,
        path='/rest/ofscStatistics/v1/airlineDistanceBasedTravel',
        method='GET',
        module='statistics',
        summary='Get airline distance based travel',
        description="This operation retrieves a collection of statistically estimated and override values of airline distance based travel time (in minutes) at the travel key level for the specified distances (in km). You can specify up to five distances. If no distances are specified, the operation retrieves data for 1 km, 5 kms, 10 kms, 20 kms and 50 kms. If no travel key is specified, the operation retrieves data for all possible travel keys will be retrieved. The maximum number of records that can be retrieved in a single response is 10000. If there are more than 10000 records, you can use the 'next' link available at the bottom of the response to access the remaining records.Before you use this operation, ensure that:<ul><li>You have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The application has the permission to access the Statistics API. To grant the permission, navigate to <b>Configuration</b> > <b>Applications</b> screen. For the required application, in the <b>API access</b> section, click <b>Add new</b> and select <b>Statistics API</b>.</li></ul>",
        operation_id='get airlineDistanceBasedTravel',
        tags=['Statistics/Airline Distance Based Travel'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='key',
                location='query',
                type='string',
                required=False,
                description="The value of the travel key. It appears as 'Start Location' and 'End Location' in the Travel Statistics report.If 'key' is provided in request and :<ul><li>If 'key' is present in the application, the application estimated and override values for travel time of the travel key is retrieved.</li><li>If 'key' is not present in the application, HTTP Code 404 response is displayed.</li></ul>If 'key' is not provided in request, the application estimated and override values for travel time of all the travel keys are retrieved. If none of the travel keys have application estimated or override values, then HTTP Code 404 response is displayed.",
                max_length=50,
            ),
            EndpointParameter(
                name='distance',
                location='query',
                type='string',
                required=False,
                description='The list of comma separated distances (in km) for which the statistically estimated and override travel time at the travel key level has to be retrieved. Maximum number of distances allowed is 5. If no distance is specified, the application retrieves values for the distances 1, 5, 10, 20, 50.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of records to be returned in the response.',
                minimum=1,
                maximum=10000,
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
                minimum=0,
            ),
            EndpointParameter(
                name='keyId',
                location='query',
                type='integer',
                required=False,
                description="Key ID of one of the configured travel keys.<ul><li>If the parameter 'keyId' is not specified, data for all travel keys will be retrieved.</li><li>If 'keyId' is specified and if it exists in the system, data will be retrieved for the travel keys of the corresponding Key ID.</li><li>If 'keyId' is specified but if it does not exist in the system, an error message will be returned</li></ul>If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this parameter will be ignored.",
                minimum=1,
            ),
        ],
        request_body_schema=None,
        response_schema='airlineDistanceBasedTravelList',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=92,
        path='/rest/ofscStatistics/v1/airlineDistanceBasedTravel',
        method='PATCH',
        module='statistics',
        summary='Update airline distance based travel',
        description="This operation overrides the airline distance based travel time (in minutes) at the travel key level.For the specified travel key, the application considers the provided pair of distances (in km) and override values (in minutes) to calculate the corresponding override values for all possible distances. Airline distance based travel time for the travel key is based on these values, instead of the estimated values. The override values are stored in the application along with the corresponding statistically estimated values. If overrides are specified, then the override values are used instead of the statistically estimated values. However, the statistically estimated value is updated based on the new travels reported. At any point of time, you can stop using the overrides by importing the data again with value '-1' in one of the 'override' fields. In such cases, the application uses the statistically estimated value for the airline distance based travel time estimates for the travel key.The limit for each API request is 10000 records. To update more records, you can use multiple requests. If a part of the key contains properties to be considered as case-insensitive, the value specified for that part of the key should be in smaller case in the API request. <b>Note: </b>When the Statistics API is used to make airline distance based travel changes, the changes are reflected for all future travels in the application only after the next run of the statistics agent. The statistics agent is run once a day, usually in the early morning hours.Before you use this operation, ensure that:<ul><li>You have a subscription to Oracle Field Service Professional or Enterprise Cloud Service.</li><li>The application has the permission to access the Statistics API. To grant the permission, navigate to <b>Configuration > Applications</b> screen. For the required application, in the <b>API access</b> section, click <b>Add new</b> and select <b>Statistics API</b>.</li><li>If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this API cannot be used.</li></ul>",
        operation_id='patch airlineDistanceBasedTravel',
        tags=['Statistics/Airline Distance Based Travel'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='airlineDistanceBasedTravelRequestList',
        response_schema='airlineDistanceBasedTravelPatchResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=93,
        path='/rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}',
        method='PUT',
        module='partscatalog',
        summary='Create a catalog',
        description='This operation creates a new catalog with the specified catalog label and the specified language.',
        operation_id='put_/catalogs/{catalog}/{language}',
        tags=['Parts Catalog'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema='catalogSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=94,
        path='/rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}/{itemLabel}',
        method='PUT',
        module='partscatalog',
        summary='Create or update a catalog item',
        description='This operation creates or updates a catalog item with the specified catalog label, specified language, and the specified item label.The Parts Catalog service is modified to manage the updates internally so that it does not cause constant catalog redistribution to the technician devices. All the incremental updates to the catalog are collected and applied after a certain period of time, which could take up to 4 hours.',
        operation_id='put_/catalogs/{catalog}/{language}/{itemLabel}',
        tags=['Parts Catalog'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema='catalogItem',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=95,
        path='/rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}/{itemLabel}',
        method='DELETE',
        module='partscatalog',
        summary='Remove a catalog item',
        description='This operation deletes a catalog item with the specified catalog label, specified language, and the specified item label.The Parts Catalog service is modified to manage the updates internally so that it does not cause constant catalog redistribution to the technician devices. All the incremental updates to the catalog are collected and applied after a certain period of time, which could take up to 4 hours.',
        operation_id='delete_/catalogs/{catalog}/{language}/{itemLabel}',
        tags=['Parts Catalog'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=96,
        path='/rest/ofscCollaboration/v1/addressBook',
        method='GET',
        module='collaboration',
        summary='Get address book',
        description='This operation retrieves the address book.',
        operation_id='addressBook',
        tags=['Collaboration/Address Book'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='AddressBookList',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=97,
        path='/rest/ofscCollaboration/v1/chats',
        method='POST',
        module='collaboration',
        summary='Start a new chat',
        description='This operation creates a new chat with another user, helpdesk or a conference chat with a group of users.',
        operation_id='startChat',
        tags=['Collaboration/Chats'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='StartChatRequest',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=98,
        path='/rest/ofscCollaboration/v1/chats/{chatId}/leave',
        method='POST',
        module='collaboration',
        summary='Leave a chat',
        description='This operation is used to leave an existing chat.',
        operation_id='leaveChat',
        tags=['Collaboration/Chats'],
        required_parameters=[
            EndpointParameter(
                name='chatId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the chat in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=99,
        path='/rest/ofscCollaboration/v1/chats/{chatId}/messages',
        method='GET',
        module='collaboration',
        summary='Get messages',
        description='Get all the messages under a chat id',
        operation_id='getMessages',
        tags=['Collaboration/Chats'],
        required_parameters=[
            EndpointParameter(
                name='chatId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the chat in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='GetMessageResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=100,
        path='/rest/ofscCollaboration/v1/chats/{chatId}/messages',
        method='POST',
        module='collaboration',
        summary='Send a message',
        description='This operation sends a message to an existing chat.',
        operation_id='addChatMessages',
        tags=['Collaboration/Chats'],
        required_parameters=[
            EndpointParameter(
                name='chatId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the chat in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='SendMessageRequest',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=101,
        path='/rest/ofscCollaboration/v1/chats/{chatId}/participants',
        method='GET',
        module='collaboration',
        summary='Get participants',
        description='This operation retrieves the participants of an existing chat. A maximum of 100 participants are retrieved in a single call.',
        operation_id='getChatParticipants',
        tags=['Collaboration/Chats'],
        required_parameters=[
            EndpointParameter(
                name='chatId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the chat in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='ParticipantList',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=102,
        path='/rest/ofscCollaboration/v1/chats/{chatId}/participants/invite',
        method='POST',
        module='collaboration',
        summary='Invite a participant',
        description='This operation invites a participant to an existing chat. The users can initiate a conference chat by inviting more users to an existing chat.',
        operation_id='inviteToChat',
        tags=['Collaboration/Chats'],
        required_parameters=[
            EndpointParameter(
                name='chatId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the chat in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='InviteChatRequest',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=103,
        path='/rest/ofscCore/v1/activities',
        method='POST',
        module='core',
        summary='Create an activity',
        description="This operation creates a new activity. By default, the new activity has the status as 'pending'.",
        operation_id='post /rest/ofscCore/v1/activities',
        tags=['Core/Activities'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='createActivitySchema',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.create_activity()',
        signature='async def create_activity(self, activity_data: dict) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=104,
        path='/rest/ofscCore/v1/activities',
        method='GET',
        module='core',
        summary='Get activities',
        description='This operation retrieves a list of activities that match the criteria specified in the request.This operation is subject to the following conditions:<ul><li><b>Number of Requests</b>:<ul><li>The maximum number of \'Get activities\' requests than can be sent simultaneously is three. If more than three requests are sent, then the additional requests are queued.</li><li> The maximum number of requests that can be queued is 10. Any additional requests are rejected with an error message.</li><li>The maximum wait time of a request in the queue is 30 seconds. If the waiting time exceeds 30 seconds, an error message is returned.</li></ul><li><b>Number of Activities Returned</b>: The maximum number of activities that can be retrieved in a single response is 100,000. If the value specified for the \'limit\' parameter is greater than the maximum number, then the value 100,000 limit is used for limit parameter.</li><li><b>Date Range</b>: The maximum date range that can specified for a single request is 31 days. If the date range (\'dateTo\' - \'dateFrom\') exceeds 31 days, then an error message is returned in the response.</li><li><b>Response Size</b>: The response for a single request is limited to 20 MB. If the response size is close to 20 MB, the operation returns fewer activities than requested, and the response contains the \'hasMore\' flag set to \'true\'. This flag indicates that there are more activities to be returned. In this case, a new request with \'offset\' parameter set to the last returned item count is sent.</li><li><b>Operation Run Time</b>: The maximum run time for a single operation is 30 seconds. When the 30-second time limit is reached, the operation returns fewer activities than requested and the response contains the \'hasMore\' flag set to \'true\'. This flag indicates that there are more activities to be returned. In this case, a new request with \'offset\' parameter set to the last returned item count is sent. If the time limit has exceeded before any activities are included in the response (for example, due to slow database response), an error is returned.</li><li><b>Custom Properties Quantity</b>: The maximum number of custom properties used in the request and/or returned in the response is 50. If more than 50 properties are included in the request, an error message is returned. The 50-property restriction includes both the custom properties used in the \'fields\' parameter and in the \'q\' parameter.</li> Note: the function in some cases may not found existing activities if they has been recently created or bring some activity fields with not actual values if they were recently updated. The following conditions need to be met in order for the function to return the actual data without the latency effect:<ul><li>The request doesn\'t require filtering by fields except the field status. It means if there is a "q=..." parameter, the query may not return recently created activities. There is one exception to this rule: you can use "q=..." parameter with a single expression status==\'<status>\' (e.g. status==\'pending\') exactly in this form. Such expression will allow to get matching activities including recent ones.</li></ul>Examples.<ul><li>The following request will return data without latency effect :</li></ul>GET https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities/?resources=tech6121000001&dateFrom=2019-08-14&dateTo=2019-08-14&q=status==\'pending\'&fields=activityId,resourceId,date,status\'This request contains query parameter in a form status==\'some_status\'<ul><li>The following request may miss some recently created activities (latency effect) :</li></ul>GET https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities/?resources=tech6121000001&dateFrom=2019-08-14&dateTo=2019-08-14&q=status != \'cancelled\' and activityType in [\'IN\',\'TC\',\'BR\']&fields=activityId,resourceId,date,status\'This request contains query parameter in other form then status==\'some_status\' : it uses != comparison and another field (activityType)',
        operation_id='get /rest/ofscCore/v1/activities',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='resources',
                location='query',
                type='array',
                required=True,
                description='The comma-separated list of resource IDs that are returned in the response. This parameter works in conjunction with the includeChildren parameter.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='includeChildren',
                location='query',
                type='string',
                required=False,
                description='Indicates whether the subordinate resources must be returned. <ul><li>If the value is none, then only the activities assigned to the specified resource are returned.</li><li>If the value is immediate, then the activities assigned to the specified resource and its first level descendants are returned.</li><li>If the value is all or if it is not specified, then the activities assigned to the specified resource and its descendants in the hierarchy tree are returned.',
                enum=['none', 'immediate', 'all'],
            ),
            EndpointParameter(
                name='q',
                location='query',
                type='string',
                required=False,
                description="The filter expression applied to the activities in addition to the resource and date filters. Only the activities that match this filter are added to this subscription.The following are the filter expression rules:<ul><li>It should be specified as a single string.</li><li>It should evaluate to a boolean expression.</li><li>It should contain one or more comparison statements.</li><ul><li>Syntax of comparison statement: &lt;field&gt; &lt;operator&gt;&lt;value&gt;. For example, activityDetails.activityType == 'Install'.</li><li>The order mentioned in the syntax cannot be changed. For example, ('Install' == activityDetails.activityType) is not a valid comparison statement.</li><li>The comparision between fields (A == B) or value-to-value (1 == 1) is also not valid.</li><li>The field has to be an alphanumeric identifier with no spaces or special characters except underscore. The subfields are separated by dot (.). For example:</li><ul><li>activityDetails.activityType</li><li>activityDetails.X_MYPROP_10</li><li>field.subField</li></ul></ul><li>The following are the supported comparison operators:<ul><li>&lt;</li><li>&gt;</li><li>&lt;=</li><li>&gt;=</li><li>==</li><li>!=</li><li>in</li></ul></li><li>The value of the 'filterExpression' field can be a string literal, an integer literal, or an array literal of strings and integers<ul><li>String literals are delimited by single quotes, with escape character ~, for example:</li><ul><li>str =='My String'</li><li>str =='My string with ~' a quote inside'</li></ul><li>Integer literals are without quotes, they may not contain dot or leading zeroes. For example:</li><ul><li>num ==0</li><li>num ==12345</li><li>num ==-67</li></ul><li>Array literals must contain only strings or only integers, and are in square brackets. Empty arrays are not allowed. Arrays are only allowed after the &quot;in&quot; operator. For example:</li><ul><li>enum in [1,2,3]</li><li>enum in ['Abc','Def','Ghi']</li></ul></ul></li><li>String comparisons are valid. For example: date &gt; '2015-06-02'.</li><li>String comparisons are not case-sensitive. For example: name == 'john.smith' is the same as name == 'JOHN.SMITH'.</li><li>String to integer coercion is valid. For example: num== -123 is the same as num== '-123'.</li><li>Multiple comparison statements have to be separated by logical operators (and, or). For example:<ul><li>A == 1 and B == 2 or C == 3</li><li>A == 'xx' or A == 'yy'</li></ul></li><li>The operator precedence is as follows:<ol><li>comparison operators: ==,!=, &lt;, &gt;, &lt;=, &gt;=, in</li><li>'not'</li><li>'and', 'or'. The logical operators ('and' / 'or') have the same precedence, so parentheses can be used to achieve precedence. For example: A == 1 and (B == 2 or C == 3)</li></ol></li><li>Operators are not case-sensitive. For example, (num IN[1,2,3]) OR (num &lt; 0).</li><li>Any statement can be preceded by &quot;not&quot; operator to negate it. For example:</li><ul><li>not (activityType in ['IN','TC','BR'])</li><li>A == 1 and not ( B == 2 or B == 3 )</li></ul><li>Whitespaces outside strings are ignored.</li><li>If the field or property is not set, then it evaluates to an empty string. For example, expression <em>null_field == ''</em>.</li></ul>Example: GET https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities?q=status+%3D%3D+%27pending%27+and+slaWindowEnd+&lt;+%272016-10-23%27",
            ),
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=False,
                description="The activities that begin from the specified date are retrieved in the response. Specify the date in YYYY-MM-DD format. It is optional if the parameter 'includeNonScheduled' = true. If the dateForm is specified, the dateTo parameter should also be specified. Example: https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities?dateFrom=2016-09-21&dateTo=2016-09-22",
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description='The activities that end until the specified date are retrieved in the response. Specify the date in YYYY-MM-DD format. If dateTo is specified, the dateFrom parameter must also be specified.Example: https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities?dateFrom=2016-09-21&dateTo=2016-09-22',
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description="The comma-separated field names that are returned in the response. The field names are the names that you specify when you create an activity or retrieve an activity. The field names can also contain custom property names. 'positionInRoute' cannot be retrieved via API. If the value of this parameter is not specified in the request, then it defaults to: activityId,resourceId,date,status.Example: https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/activities?fields=activityId,status,apptNumber,recordType<b>Note</b>: If the fields specified in the 'fields' parameter are empty for a given activity, then they are not returned in 'Get Activities' response. For example, if you specify 'fields=apptNumber' and some of the returned activities do not contain apptNumber, then an empty object '{}' is returned in the response.",
            ),
            EndpointParameter(
                name='includeNonScheduled',
                location='query',
                type='boolean',
                required=False,
                description="Indicates whether non-scheduled activities must be returned.<ul><li>If the value is not specified, then non-scheduled activities are not returned.</li><li>If the value of this parameter is 'true', then the 'dateFrom' and 'dateTo' are not required. If the 'dateFrom' and 'dateTo' parameters are not specified, then only the non-scheduled activities are returned.</li><li>If the value of this parameter is 'true' and the 'dateFrom' and 'dateTo' parameters are specified, then both the scheduled and non-scheduled activities are returned.</li><li>If the value of this parameter is 'false' or is not specified, then the 'dateFrom' and 'dateTo' parameters are required, and only the scheduled activities are returned.</li></ul>",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='getActivitiesResponse',
        implemented_in='core_api.py:OFSCoreAPI.get_activities()',
        signature='async def get_activities(self, resources: List[str], dateFrom: Optional[date] = None, dateTo: Optional[date] = None, includeChildren: str = "all", q: Optional[str] = None, fields: Optional[List[str]] = None, includeNonScheduled: bool = False, offset: int = 0, limit: int = 100) -> ActivityListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=105,
        path='/rest/ofscCore/v1/activities/{activityId}',
        method='PATCH',
        module='core',
        summary='Update an activity',
        description='This operation updates the properties of the specified activity.The properties that cannot be updated include date, status, resourceId, activityId, positionInRoute, and custom file properties.\n<b>Note</b>: If you want to update value of a property to null, you should use null with no quotes as the value associated with the property  in the json payload of the Update Activity rest api.\n\nSomething like:\n\nPATCH https://{{url}}/rest/ofscCore/v1/activities/{{activityId}}\n\n{\n\n"{{property_label}}" : null\n\n}',
        operation_id='patch /rest/ofscCore/v1/activities/{activityId}',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='updateActivitySchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.update_activity()',
        signature='async def update_activity(self, activity_id: int, activity_data: dict) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=106,
        path='/rest/ofscCore/v1/activities/{activityId}',
        method='DELETE',
        module='core',
        summary='Delete an activity',
        description="This operation deletes the specified activity when the following conditions are met:<ul><li>The activity status is 'pending'.</li><li>The activity is not scheduled for a past date.</li><li>The route is not started.</li></ul>",
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity()',
        signature='async def delete_activity(self, activity_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=107,
        path='/rest/ofscCore/v1/activities/{activityId}',
        method='GET',
        module='core',
        summary='Get an activity',
        description='This operation retrieves the activity properties for the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.get_activity()',
        signature='async def get_activity(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=108,
        path='/rest/ofscCore/v1/activities/{activityId}/multidaySegments',
        method='GET',
        module='core',
        summary='Get individual segments of a segmentable activity',
        description='This operation retrieves the segments related to the specified segmentable activity.A segmentable activity can span across multiple days and can be assigned to one or more resources. The segmentable activity is divided into segments wherein each segment is an activity with a status (started, completed, and so on). All activity segments have the following settings:<ul><li>The recordType field set to multiday_activity_segment.</li><li>The masterActivityId field set to the ID of the parent segmentable activity.</li></ul><table cellpadding="4", cellspacing="0",class="Formal", summary= "The table lists various scenarios and the corresponding API logic for the operation.", frame="hsides", border="1", rules="rows"><tr><th>Scenario</th><th>API Response</th></tr><tr><td> The client terminates a segmentable activity with the following details: <ul><li> The status of the activity is <b>Started</b>.</li><li> The activity has a segment with the <b>Started</b> status.</li><li> The client sends a <b>Cancel</b> request for another segment and specifies the final status for the segmentable activity in the request with the <b>multidayActivityStatus</b> attribute.</li></ul></td><td>The API returns the HTTP 409 status code error with the description, \'Unable to terminate a segmentable activity that has a started segment\'.</td></tr><tr><td> The client specifies the value of the <b>multidayActivityStatus</b> attribute in the request, but does not specify the value of the <b>multidayTimeToComplete</b> attribute.</td><td> The API assumes the value of the <b>multidayTimeToComplete</b> attribute to be zero and proceeds with the request.</td></tr><tr><td> The client sends the <b>multidayActivityStatus</b> attribute and the non-zero <b>multidayTimeToComplete</b> attribute in the request.</td><td> The API returns the HTTP 400 status code with the description,\'Bad Request\'.</td></tr></table>',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/multidaySegments',
        tags=['Core/Activities'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='activities',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_multiday_segments()',
        signature='async def get_activity_multiday_segments(self, activity_id: int) -> ActivityMultidaySegmentListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=109,
        path='/rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        method='PUT',
        module='core',
        summary='Set a file property',
        description='This operation creates the specified file property for the specified activity.Note: The maximum size of the file that can be uploaded is 5 MB.',
        operation_id='put /rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        tags=['Core/Activities/Activity File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.set_activity_property()',
        signature='async def set_activity_property(self, activity_id: int, property_label: str, property_value: Any) -> ActivityProperty',
        rate_limits=None,
    ),
    EndpointInfo(
        id=110,
        path='/rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        method='GET',
        module='core',
        summary='Get a file property',
        description='This operation retrieves the specified file property for the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        tags=['Core/Activities/Activity File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_property()',
        signature='async def get_activity_property(self, activity_id: int, property_label: str) -> ActivityProperty',
        rate_limits=None,
    ),
    EndpointInfo(
        id=111,
        path='/rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        method='DELETE',
        module='core',
        summary='Delete a file property',
        description='This operation deletes the specified file property for the specified activtiy.',
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}/{propertyLabel}',
        tags=['Core/Activities/Activity File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity_property()',
        signature='async def delete_activity_property(self, activity_id: int, property_label: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=112,
        path='/rest/ofscCore/v1/activities/{activityId}/submittedForms',
        method='GET',
        module='core',
        summary='Get associated submitted forms',
        description='The function allows to retrieve all submitted data related to an activity or bundle of activities.',
        operation_id='',
        tags=['Core/Activities/Submitted Forms'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='scope',
                location='query',
                type='string',
                required=False,
                description="Scope. Whether to return submitted forms related only to the activity or to all bundled activities. If the value is 'activity', all data of all submitted forms related to the activity is returned. If the value is 'bundles' then only submitted forms related to configured bundles are returned. Allowed values [ <b>activity</b>, <b>bundles</b> ]. Default: <b>bundles</b>",
            ),
            EndpointParameter(
                name='bundle',
                location='query',
                type='string',
                required=False,
                description="Label of a bundling rule. The parameter allows to specify the label of the bundle to filter the returned data. Only submitted forms related to a specific bundle will be present in the response. If the parameter is not specified, all the submitted forms related to all bundles will be returned. This parameter is not allowed if the 'scope' parameter has value 'activity'. Default: all the submitted forms related to all bundles related to the activity will be returned",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='submittedForms',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_submitted_forms()',
        signature='async def get_activity_submitted_forms(self, activity_id: int) -> ActivitySubmittedFormListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=113,
        path='/rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        method='PUT',
        module='core',
        summary='Set resource preferences of an activity',
        description='This operation sets the resource preferences for the specified activity.Resource preferences are used to identify if a resource is preferred/required or forbidden from being assigned to an activity.If the specified activity already contains resource preferences, this operation replaces them with the values specified in the request.',
        operation_id='put /rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        tags=['Core/Activities/Activity Resource Preferences'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourcePreferences',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.set_activity_resource_preferences()',
        signature='async def set_activity_resource_preferences(self, activity_id: int, preferences_data: List[dict]) -> ActivityResourcePreferenceListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=114,
        path='/rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        method='GET',
        module='core',
        summary='Get resource preferences of an activity',
        description='This operation retrieves the resource preferences for the specified activity. Resource preferences identify whether a resource should be assigned to the activity or not.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        tags=['Core/Activities/Activity Resource Preferences'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='resourcePreferences',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_resource_preferences()',
        signature='async def get_activity_resource_preferences(self, activity_id: int) -> ActivityResourcePreferenceListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=115,
        path='/rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        method='DELETE',
        module='core',
        summary='Delete resource preferences of an activity',
        description='This operation deletes the existing resource preferences of the specified activity.',
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}/resourcePreferences',
        tags=['Core/Activities/Activity Resource Preferences'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity_resource_preferences()',
        signature='async def delete_activity_resource_preferences(self, activity_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=116,
        path='/rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        method='PUT',
        module='core',
        summary='Set required inventories for an activity',
        description='This operation updates the required inventories for the specified activity.If the specified activity already has the required inventories, then this operation updates the required inventories with the information specified in the request.',
        operation_id='put /rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        tags=['Core/Activities/Activity Required Inventories'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='requiredInventories',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.set_activity_required_inventories()',
        signature='async def set_activity_required_inventories(self, activity_id: int, inventories_data: List[dict]) -> ActivityRequiredInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=117,
        path='/rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        method='GET',
        module='core',
        summary='Get required inventories of an activity',
        description='This operation retrieves the required inventories of the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        tags=['Core/Activities/Activity Required Inventories'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='requiredInventories',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_required_inventories()',
        signature='async def get_activity_required_inventories(self, activity_id: int) -> ActivityRequiredInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=118,
        path='/rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        method='DELETE',
        module='core',
        summary='Delete required inventories of an activity',
        description='This operation deletes the required inventories assigned to the specified activity.',
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}/requiredInventories',
        tags=['Core/Activities/Activity Required Inventories'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity_required_inventories()',
        signature='async def delete_activity_required_inventories(self, activity_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=119,
        path='/rest/ofscCore/v1/activities/{activityId}/customerInventories',
        method='POST',
        module='core',
        summary='Create a customer inventory',
        description='This operation creates a customer inventory and assigns it to the specified activity.',
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/customerInventories',
        tags=['Core/Activities/Activity Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema='createCustomerInventory',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.add_activity_customer_inventory()',
        signature='async def add_activity_customer_inventory(self, activity_id: int, inventory_data: dict) -> ActivityCustomerInventory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=120,
        path='/rest/ofscCore/v1/activities/{activityId}/customerInventories',
        method='GET',
        module='core',
        summary='Get customer inventories',
        description='This operation retrieves a list of customer inventories assigned to the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/customerInventories',
        tags=['Core/Activities/Activity Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_customer_inventories()',
        signature='async def get_activity_customer_inventories(self, activity_id: int) -> ActivityCustomerInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=121,
        path='/rest/ofscCore/v1/activities/{activityId}/installedInventories',
        method='GET',
        module='core',
        summary='Get installed inventories',
        description='This operation retrieves a list of installed inventories for the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/installedInventories',
        tags=['Core/Activities/Activity Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_installed_inventories()',
        signature='async def get_activity_installed_inventories(self, activity_id: int) -> ActivityInstalledInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=122,
        path='/rest/ofscCore/v1/activities/{activityId}/deinstalledInventories',
        method='GET',
        module='core',
        summary='Get deinstalled inventories',
        description='This operation retrieves a list of deinstalled inventories for the specified activity.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/deinstalledInventories',
        tags=['Core/Activities/Activity Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_deinstalled_inventories()',
        signature='async def get_activity_deinstalled_inventories(self, activity_id: int) -> ActivityDeinstalledInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=123,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        method='GET',
        module='core',
        summary='Get activity links',
        description='This operation retrieves the list of links for the specified activity.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>For multi-day activities, only the Related link type is applicable.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='linkedActivities',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_linked_activities()',
        signature='async def get_activity_linked_activities(self, activity_id: int) -> ActivityLinkListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=124,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        method='DELETE',
        module='core',
        summary='Delete all activity links',
        description='This operation deletes all the links for the specified activity.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>For multi-day activities, only the Related link type is applicable.',
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity_linked_activities()',
        signature='async def delete_activity_linked_activities(self, activity_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=125,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        method='POST',
        module='core',
        summary='Create an activity link',
        description='This operation creates a link for the specified activity.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>',
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/linkedActivities',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='linkedActivity',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.add_activity_linked_activities()',
        signature='async def add_activity_linked_activities(self, activity_id: int, linked_activities_data: List[dict]) -> ActivityLinkListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=126,
        path='/rest/ofscCore/v1/activities/{activityId}/capacityCategories',
        method='GET',
        module='core',
        summary='Get capacity categories of activity',
        description='This operation returns capacity categories of the specified activity.',
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/capacityCategories',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getCapacityCategoriesSchema',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_capacity_categories()',
        signature='async def get_activity_capacity_categories(self, activity_id: int) -> ActivityCapacityCategoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=127,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        method='DELETE',
        module='core',
        summary='Delete an activity link',
        description='This operation deletes the link between the two specified activities.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>For multi-day activities, only the Related link type is applicable.',
        operation_id='delete /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
            EndpointParameter(
                name='linkedActivityId',
                location='path',
                type='string',
                required=True,
                description='The identifier of the linked activity.',
            ),
            EndpointParameter(
                name='linkType',
                location='path',
                type='string',
                required=True,
                description='The label of the link type. Specify the type of relation between the activities.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_activity_link()',
        signature='async def delete_activity_link(self, activity_id: int, linked_activity_id: int, link_type: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=128,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        method='GET',
        module='core',
        summary='Get activity link details',
        description='This operation retrieves the details of the link between the specified activities.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>For multi-day activities, only the Related link type is applicable.',
        operation_id='get /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
            EndpointParameter(
                name='linkedActivityId',
                location='path',
                type='string',
                required=True,
                description='The identifier of the linked activity.',
            ),
            EndpointParameter(
                name='linkType',
                location='path',
                type='string',
                required=True,
                description='The label of the link type. Specify the type of relation between the activities.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='linkedActivity',
        implemented_in='core_api.py:OFSCoreAPI.get_activity_link()',
        signature='async def get_activity_link(self, activity_id: int, linked_activity_id: int, link_type: str) -> ActivityLink',
        rate_limits=None,
    ),
    EndpointInfo(
        id=129,
        path='/rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        method='PUT',
        module='core',
        summary='Replace an activity link',
        description='This operation creates or replaces a link between the specified activities.Activity links define the correlation between two activities. If a link is created between two activities, it can define the following relations:<ul><li>The sequence in which the activities are performed. The basic link types allowed are finish-to-start, start-to-start, simultaneous, and related.</li><li>The minimum and maximum intervals between sequential activities.</li><li>Whether the linked activities are performed by the same resource or different resources.</li></ul>',
        operation_id='put /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}',
        tags=['Core/Activities/Activity Links'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
            EndpointParameter(
                name='linkedActivityId',
                location='path',
                type='string',
                required=True,
                description='The identifier of the linked activity.',
            ),
            EndpointParameter(
                name='linkType',
                location='path',
                type='string',
                required=True,
                description='The label of the link type. Specify the type of relation between the activities.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='linkedActivity',
        response_schema='linkedActivity',
        implemented_in='core_api.py:OFSCoreAPI.set_activity_link()',
        signature='async def set_activity_link(self, activity_id: int, linked_activity_id: int, link_type: str, link_data: Optional[dict] = None) -> ActivityLink',
        rate_limits=None,
    ),
    EndpointInfo(
        id=130,
        path='/rest/ofscCore/v1/activities/custom-actions/search',
        method='GET',
        module='core',
        summary='Search for activities',
        description='This operation retrieves the activities that match the specified search criteria.<b>Note: </b>The search operation ends if 1000 matching records are found. If the operation fails to obtain the required records, then refine the search criteria and perform the operation again.<b>Note: </b>It is not advised to retrieve long property values using the search function. For long property values (~2k and more) that are present in the response the function may need additional processing time, as the result, if there are such long values, the whole response time may be slowed down.',
        operation_id='get /rest/ofscCore/v1/activities/custom-actions/search',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='searchInField',
                location='query',
                type='string',
                required=True,
                description='The name of the field that is used to search for activities. One of the following predefined fields can be used:<ul><li>customerName</li> <li>apptNumber</li><li>customerNumber</li> <li>customerEmail</li> <li>customerPhone</li> <li>customerCell</li> <li>streetAddress</li> <li>postalCode</li></ul> Or it can be a label of custom property. <b>Note</b> For a successful search, ensure that the field is selected in the Configuration, Business Rules, Activity Search Fields screen of the Oracle Field Service application.',
                min_length=1,
                max_length=40,
            ),
            EndpointParameter(
                name='searchForValue',
                location='query',
                type='string',
                required=True,
                description='The activities that match the specified value (max length is 255) are returned in the response. For example, if the customer name is specified as \'John Smith\', then all activities with the name "Smith" are returned.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=False,
                description="The activities that begin from the specified date are retrieved in the response. Specify the date in YYYY-MM-DD format. This is a required parameter unless the 'includeNonScheduled' parameter is set to true.",
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description="The activities that end until the specified date are retrieved in the response. Specify the date in YYYY-MM-DD format. This is a required parameter unless the 'includeNonScheduled' parameter is set to true.",
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description="The comma-separated field names which are to be returned in the response. The field names include the names used to create an activity or get an activity and the custom property names. The default values are activityId, resourceId, date, and status. Note that activities found with 'recordType' having a value of 'multiday_activity_segment' may not contain values for custom properties if an activity segment is in pending status. These values are only present in the parent activity of the segmentable activity. Note that found activities with recordType=multiday_activity_segment may not contain values of custom properties segment in pending status (they are only present in the parent activity of the segmentable activity).",
            ),
            EndpointParameter(
                name='includeMultiday',
                location='query',
                type='string',
                required=False,
                description='The parameter determines whether the response should contain segmentable activities. If not specified, then, by default, the segmentable activities are returned.<ul><li>If the value of the parameter is "all", then individual segments and parent activities are returned. This is the default behavior.</li><li>If the value of the  parameter is "segments", then only the individual segments are returned.</li><li>If the value of the parameter is "parents", then only the segmentable parent activities are returned.</li><li>if the value of the parameter is "none", then neither the individual segments nor the parent activities are returned.</li></ul>',
                enum=['all', 'segments', 'parents', 'none'],
            ),
            EndpointParameter(
                name='includeNonScheduled',
                location='query',
                type='string',
                required=False,
                description='The parameter determines whether the response should contain non-scheduled activities. If not specified, then, by default, the non-scheduled activities are returned.<ul><li>If the value of the parameter is "true", then the dateFrom and dateTo parameters are not required. If the dateFrom and dateTo parameters are not specified, then only the non-scheduled activities are returned.</li><li>If the value of the parameter is "true" and the dateFrom and dateTo parameters are specified, then both the scheduled and non-scheduled activities are returned.</li><li>If the value of the parameter is "false", then the dateFrom and dateTo parameters are required, but only the scheduled activities are returned.</li></ul>',
                enum=['true', 'false', '0', '1'],
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='activities',
        implemented_in='core_api.py:OFSCoreAPI.search_activities()',
        signature='async def search_activities(self, **params) -> ActivityListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=131,
        path='/rest/ofscCore/v1/activities/custom-actions/bulkUpdate',
        method='POST',
        module='core',
        summary='Bulk update activities',
        description="This operation simultaneously creates or updates multiple activities in a single call.This operation is used to synchronize data from an external system to Oracle Field Service. The operation performs the following actions:<ul><li>Attempts to find an activity in Oracle Field Service based on the key fields provided in the request. Note that past activities (on yesterday and earlier) are not visible for the function.</li><li>Creates a new activity, if no match is found or updates the existing activity, if a match is found.</li><li>Updates the related objects of an activity, if the objects are present in the request.</li> The following objects are updated:<ul><li>Customer inventories</li><li>Required inventories</li><li>Resource preferences</li><li>Activity links</li></ul></ul>The updates are made in the order of the activity items in the request.This operation is executed as multiple transactions where in each transaction may succeed or fail. The response contains a list of results which includes the success or failure of each transaction and the reason for failure (if applicable).<b>Restrictions:</b>Moving between dates is supported only for individual segments of a segmentable activity. This function doesn't support moving a whole segmentable activity to a new date.The following restrictions apply while updating multiple activities simultaneously:<ul><li>Maximum size of the decoded HTTP request is 5 MB.</li><li>File properties cannot be set.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/custom-actions/bulkUpdate',
        tags=['Core/Activities'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityBulkUpdateSchema',
        response_schema='customActionActivityBulkUpdateSchemaResponse',
        implemented_in='core_api.py:OFSCoreAPI.bulk_update_activities()',
        signature='async def bulk_update_activities(self, bulk_data: BulkUpdateRequest) -> BulkUpdateResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=132,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/startPrework',
        method='POST',
        module='core',
        summary='Start prework',
        description='This operation starts the prework for the specified activity.',
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/startPrework',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.start_activity_prework()',
        signature='async def start_activity_prework(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=133,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen',
        method='POST',
        module='core',
        summary='Reopen an activity',
        description="This operation reopens the specified activity if it is in 'completed', 'cancelled', or 'notdone' status. The reopened activity is in 'pending' status.",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='reopenActivityRequest',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.reopen_activity()',
        signature='async def reopen_activity(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=134,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/delay',
        method='POST',
        module='core',
        summary='Delay an activity',
        description="This operation changes the end time of a current activity which is in 'started' status and extends its duration. Use this operation to indicate that the activity is taking longer than initially predicted. The operation is successful only if the status of the specified activity is 'started'.",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/delay',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.delay_activity()',
        signature='async def delay_activity(self, activity_id: int, delay_data: Optional[dict] = None) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=135,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel',
        method='POST',
        module='core',
        summary='Cancel an activity',
        description="This operation updates the status of the specified activity from 'pending' or 'en route' to 'cancelled'. The operation is successful only if the following conditions are met:<ul><li>The status of the specified activity is 'pending' or 'en route'.</li><li>The activity is not scheduled for a past date.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityStatusChangeSchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.cancel_activity()',
        signature='async def cancel_activity(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=136,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/start',
        method='POST',
        module='core',
        summary='Start an activity',
        description="This operation updates the status of the specified activity to 'started'. The operation is successful only if the following conditions are met:<ul><li>The status of the specified activity is 'pending' or 'enroute'.</li><li>The activity is not scheduled for a past date.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/start',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityStatusEnrouteChangeSchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.start_activity()',
        signature='async def start_activity(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=137,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/enroute',
        method='POST',
        module='core',
        summary='Update the activity status to enroute',
        description='This operation updates the status of the specified activity to \'enroute\'. The operation is successful only if the following conditions are met:<ul><li>The <b>En route Support</b> option is enabled in Business rules.</li><li>The  <b>Calculate travel</b> feature is selected for the activity type.</li><li>The activity is the first activity in the route.</li><li>The activity is pending, ordered and the route is activated.</li></ul>Note: when activity status is changed to \'en-route\', the activity ETA will be set as "now" plus estimation for the travel time. This may cause that it may become earlier then the SLA start or service window start, or it could become out of the access hours for the activity.',
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/enroute',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.set_activity_enroute()',
        signature='async def set_activity_enroute(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=138,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/stopTravel',
        method='POST',
        module='core',
        summary='Change activity status from enroute to pending',
        description="This operation updates the status of the specified activity from 'enroute' back to the 'pending' status.",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/stopTravel',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.stop_activity_travel()',
        signature='async def stop_activity_travel(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=139,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend',
        method='POST',
        module='core',
        summary='Suspend an activity',
        description="This operation suspends the specified activity. The operation is available only if: <ul><li>The status of the activity is either 'started' or 'pending'.</li><li>The route is activated.</li><li>The route is not in the past.</li><ul><li>For activities in 'started' status, the operation does the following:<ul><li>Changes the activity status to 'pending'.</li><li>Changes the activity position to 'notordered'.</li><li>Creates a suspended activity by duplicating the original one.</li><li>Sets the end time of the suspended activity to the time when the activity was suspended.</li></ul></li><li>For activities in 'pending' status, the operation updates the activity position to 'notordered', but does not create a new activity.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityStatusChangeSchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.suspend_activity()',
        signature='async def suspend_activity(self, activity_id: int, suspend_data: Optional[dict] = None) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=140,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/move',
        method='POST',
        module='core',
        summary='Move an activity',
        description="This operation moves the activity according to specified parameters.<ul><li>If the value of the setDate parameter is specified, then the activity is moved to the specified date.</li><li>If the value of the setResource parameter is specified, then the activity is reassigned to another resource.</li><li>If the value of the setPositionInRoute parameter is specified, then the order of the activity is changed.</li></ul>These parameters can be combined into a single request when the actions have to be performed simultaneously. At least one of these parameters must be specified.The operation fails in the following environments:<ul><li>The destination resource is a field resource and the specified date is not a working day for the resource.</li><li>The destination resource is a field resource and does not have a user account assigned.</li><li>The destination resource is inactive.</li><li>The destination date is greater than the value configured in the 'Future days limit' setting. The default value of the 'Future days limit' setting is 1098.</li><li>The destination date is in the past.</li><li>The destination resource does not exist or it cannot be assigned to activities.</li><li>The operation is disabled for the specified activity type.</li><li>The values specified in the request parameters are invalid.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/move',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityMoveSchema',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.move_activity()',
        signature='async def move_activity(self, activity_id: int, move_data: dict) -> ActivityMoveResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=141,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/complete',
        method='POST',
        module='core',
        summary='Complete an activity',
        description="This operation updates the status of the specified activity to 'completed'.The operation is successful only if the following conditions are met:<ul><li>The status of the specified activity is 'started'.</li><li>The activity is not scheduled for a past date.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/complete',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityStatusChangeSchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.complete_activity()',
        signature='async def complete_activity(self, activity_id: int) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=142,
        path='/rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone',
        method='POST',
        module='core',
        summary='Update the activity status to notdone',
        description="This operation updates the status of the specified activity to 'notdone'. The operation is successful only if the following conditions are met:<ul><li>The status of the specified activity is 'started'.</li><li>The activity is not scheduled for a past date.</li></ul>",
        operation_id='post /rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone',
        tags=['Core/Activities/Activity Actions'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='customActionActivityStatusChangeSchema',
        response_schema='getActivitySchema',
        implemented_in='core_api.py:OFSCoreAPI.mark_activity_not_done()',
        signature='async def mark_activity_not_done(self, activity_id: int, not_done_data: Optional[dict] = None) -> Activity',
        rate_limits=None,
    ),
    EndpointInfo(
        id=143,
        path='/rest/ofscCore/v1/whereIsMyTech',
        method='GET',
        module='core',
        summary='Where is my technician',
        description="This operation provides integrators with a unified method to retrieve activity status and technician information in a single request. This API can be used only when the following conditions are met:<ul><li>The customer must have a subscription to Oracle Field Service Customer Communication Cloud Service, Oracle Field Service Professional Cloud Service, or Oracle Field Service Enterprise Cloud Service.</li><li>The permission to access Core API for Activity is granted in the <b>Configuration > Applications > API access</b> section of the required application.</li></ul>If either of the conditions are not met, the '403 Forbidden' error message is returned.Note: The operation takes the activity ID as the required parameter. If a mass/repeating activity is used, then it should be instantiated as it does not have an ID otherwise. The operation is not designed for segmentable activities, but it can work with individual segments as a single activity. Segmentable master activities should not be used with the operation as their statuses have a different flow and the result of the operation can be different from that of the other activities.",
        operation_id='get /rest/ofscCore/v1/whereIsMyTech',
        tags=['Core/Activities'],
        required_parameters=[
            EndpointParameter(
                name='activityId',
                location='query',
                type='integer',
                required=True,
                description='The unique identifier of the activity in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='includeAvatarImageData',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. If true, then the response contains the image binary data encoded in Base64 format. If false, then the response does not contain the image binary data encoded in Base64 format. The default value is false.',
            ),
            EndpointParameter(
                name='resourceFields',
                location='query',
                type='array',
                required=False,
                description="The comma-separated names of the resource fields (properties) that are returned in the response. This parameter is ignored for the 'resourceName' and 'avatar' fields. The name and avatar of a technician will be present in the response when the activity already assigned.",
            ),
            EndpointParameter(
                name='activityFields',
                location='query',
                type='array',
                required=False,
                description="The comma-separated names of activity fields (properties) that are returned in the response. This parameter is ignored for the activity fields 'startTime', 'timeZoneDiff' and the 'timeZoneIANA'. These fields will be present in the response when the startTime is known or estimated.",
            ),
            EndpointParameter(
                name='hideResourceLocationTime',
                location='query',
                type='integer',
                required=False,
                description="Time in minutes from a previous completed activity or from the queue activation, during which the technician location coordinates shouldn't be returned. Minimum value = 0, Maximum = 60, Default = 0.",
            ),
        ],
        request_body_schema=None,
        response_schema='whereIsMyTechResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=144,
        path='/rest/ofscCore/v1/folders/dailyExtract/folders',
        method='GET',
        module='core',
        summary='Get daily extract dates',
        description='This operation retrieves a list of dates where a daily extract file is available.<b>Note:</b> The daily extract files are deleted after 90 days.',
        operation_id='get /rest/ofscCore/v1/folders/dailyExtract/folders',
        tags=['Core/Extracts/Daily Extracts'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='dailyExtractSubfolders',
        implemented_in='core_api.py:OFSCoreAPI.get_daily_extract_dates()',
        signature='async def get_daily_extract_dates(self) -> DailyExtractFolders',
        rate_limits=None,
    ),
    EndpointInfo(
        id=145,
        path='/rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files',
        method='GET',
        module='core',
        summary='Get a list of daily extract files for a date',
        description='This operation retrieves a list of daily extract files for the specified date.<b>Note:</b> The daily extract files are deleted after 90 days.',
        operation_id='get /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files',
        tags=['Core/Extracts/Daily Extracts'],
        required_parameters=[
            EndpointParameter(
                name='dailyExtractDate',
                location='path',
                type='string',
                required=True,
                description="The date for which the daily extract files are downloaded. Specify the date in 'YYYY-MM-DD' format.",
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='dailyExtractDateFiles',
        implemented_in='core_api.py:OFSCoreAPI.get_daily_extract_files()',
        signature='async def get_daily_extract_files(self, extract_date: str) -> DailyExtractFiles',
        rate_limits=None,
    ),
    EndpointInfo(
        id=146,
        path='/rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files/{dailyExtractFilename}',
        method='GET',
        module='core',
        summary='Get a daily extract file',
        description='This operation retrieves a daily extract file for the specified date.  The daily extract file is a binary file with archived table content.<b>Note:</b>The daily extract files are deleted after 90 days.',
        operation_id='get /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files/{dailyExtractFilename}',
        tags=['Core/Extracts/Daily Extracts'],
        required_parameters=[
            EndpointParameter(
                name='dailyExtractDate',
                location='path',
                type='string',
                required=True,
                description='The date for which the daily extract file is downloaded. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dailyExtractFilename',
                location='path',
                type='string',
                required=True,
                description='The name of the daily extract file.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='core_api.py:OFSCoreAPI.get_daily_extract_file()',
        signature='async def get_daily_extract_file(self, extract_date: str, filename: str, media_type: str = "application/octet-stream") -> bytes',
        rate_limits=None,
    ),
    EndpointInfo(
        id=147,
        path='/rest/ofscCore/v1/events/subscriptions/{subscriptionId}',
        method='DELETE',
        module='core',
        summary='Delete a subscription',
        description='This operation deletes the specified subscription. Note: The application which created the subscriptions should be used to delete the subscriptions.',
        operation_id='delete /rest/ofscCore/v1/events/subscriptions/{subscriptionId}',
        tags=['Core/Events'],
        required_parameters=[
            EndpointParameter(
                name='subscriptionId',
                location='path',
                type='string',
                required=True,
                description='The label of the subscription.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=148,
        path='/rest/ofscCore/v1/events/subscriptions/{subscriptionId}',
        method='GET',
        module='core',
        summary='Get subscription details',
        description='This operation retrieves the details of the specified subscription.',
        operation_id='get /rest/ofscCore/v1/events/subscriptions/{subscriptionId}',
        tags=['Core/Events'],
        required_parameters=[
            EndpointParameter(
                name='subscriptionId',
                location='path',
                type='string',
                required=True,
                description='The label of the subscription.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='subscriptionInfoResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=149,
        path='/rest/ofscCore/v1/events/subscriptions',
        method='GET',
        module='core',
        summary='Get subscriptions',
        description='This operation retrieves a list of subscriptions.',
        operation_id='get /rest/ofscCore/v1/events/subscriptions',
        tags=['Core/Events'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='allSubscriptions',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. <ul><li>If true, all subscriptions in the Oracle Field Service application are returned, even if the subscriptions are created by other applications.</li><li>If false, then only the subscriptions created by other applications are returned.</li></ul>The default value is false.',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.get_subscriptions()',
        signature='async def get_subscriptions(self, allSubscriptions: bool = False) -> SubscriptionList',
        rate_limits=None,
    ),
    EndpointInfo(
        id=150,
        path='/rest/ofscCore/v1/events/subscriptions',
        method='POST',
        module='core',
        summary='Create a subscription',
        description='This operation creates a subscription for Oracle Field Service events.Events are generated when there is a change to one of the available events in the Oracle Field Service application (for example, activityCreated, activityCompleted, inventoryInstalled, and so on).One or more event(s) should be specified in the request. A \'subscriptionId\' that is returned when a subscription is created should be used in the \'Get events\' operation to retrieve subscription data.Subscriptions can be deleted using the Delete Subscription API. However, the subscriptions that are not used in the Get Events operation will expire after 36 hours.Users can create a maximum of 100 subscriptions per environment simultaneously.If more than 100 subscriptions are created then the response returns the 503 status code with the description "Too many subscriptions registered. Found 100."  Also, if a user creates a duplicate subscription, then it points to the existing subscription.For the list of events that can be subscribed, see <a href="OFSC_Supported_Events_Types.html">Supported Events</a>.<h3>Create subscription request validation</h3>\nThe request will fail if the following conditions are met:\n<ul>\n  <li>The user does not have the write permission for Core API events.</li>\n  <li>Neither the \'events\' parameter is specified in the root of the request nor the \'subscriptionConfig\' elements are specified in the request.</li>\n  <li>The \'events\' parameter in the root of the request and the \'subscriptionConfig\' elements are specified simultaneously.</li>\n  <li>Either the \'events\' or the \'subscriptionConfig\' parameter is empty.</li>\n  <li>The subscriptionConfig elements or IDs where each subscription config element needs to be checked.</li>\n  <li>subscriptionConfig elements/IDs/events<ul>\n      <li>The Events parameter is an empty array or is not present.</li>\n      <li>Events contain events that do not exist, for example, the \'activityNompleted\' event.</li>\n      <li>Events contain events for different entities along with additional fields such as fields, monitorChanges, filterExpression. For example: {"events": ["activityCreated",  "inventoryCreated"], "fields" : "apptNumber" } is not valid, but {"events": ["activityCreated","inventoryCreated"]} is valid because there are no fields, monitorChanges, filterExpression elements.</li>\n    </ul>\n  </li>\n  <li>subscriptionConfig elements/IDs/filterExpression string<ul>\n      <li>filterExpression string is not a valid expression. (see \'filterExpression\' field in the Subscription config request parameter).</li>\n      <li>filterExpression string contains fields or properties which do not exist "(doesNotExist == "something").</li>\n      <li>filterExpression string contains fields or properties for a wrong entity, for example, resource name in Activity event filter.</li>\n    </ul>\n  </li>\n  <li>The subscriptionTitle is specified as an empty string or is longer than 255 characters.</li>\n  <li>100 subscriptions are already active (either not deleted or expired).</li>\n</ul>',
        operation_id='post /rest/ofscCore/v1/events/subscriptions',
        tags=['Core/Events'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='createSubscriptionRequest',
        response_schema='CreateSubscriptionResponse',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=151,
        path='/rest/ofscCore/v1/events',
        method='GET',
        module='core',
        summary='Get events',
        description='This operation retrieves a list of events related to a subscription starting from the marker represented by the \'page\' request parameter. Also it provides new marker, which should be used to retreive next portion of events.If there are no new events available, then the operation returns an empty list.Each next request should use the marker value (\'page\' parameter) obtained from the previous request (\'nextPage\' parameter). Initial value of the marker is obtained from \'Create subscription\' API call.Another way to obtain the \'page\' value is to perform request using the \'since\' parameter that allows to find the value of the \'page\' marker by the time. Use this ability only to restore broken flow, as this operation requires significant resources.The integration must ensure that the events are read faster then generated, Otherwise the integration will not be able to read all the events in time and eventually old events will be lost. It is recommended to read next portion of events after a few seconds for subscriptions with big amount of events or a few minutes for subscriptions with rare events.Only the events matching the subscription\'s filter are returned.If the client application loses the value of the \'page\' parameter due to abnormal process termination, the last requested \'page\' parameter can be recovered through the disaster recovery flow. For more information, see the \'Recovering lost page parameter\' section under <a href="OFSC_Receiving_Events.html">Receiving Events</a>.<b>Note:</b> Getting events is only allowed for the application which was used to create the subscription.',
        operation_id='get /rest/ofscCore/v1/events',
        tags=['Core/Events'],
        required_parameters=[
            EndpointParameter(
                name='subscriptionId',
                location='query',
                type='string',
                required=True,
                description="The identifier of a previously created subscription. This is a mandatory parameter. Only the events matching the subscription's filter are returned in the response.",
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='page',
                location='query',
                type='string',
                required=False,
                description='The page identifier to iterate the events. The value of the parameter is set to the value of the \'nextPage\' element returned by a previous call to this operation. If this parameter is not specified, then an empty response is returned along with a new \'nextPage\' element, which can be used in subsequent requests.The value of the \'page\' parameter can be set to \'lastRequested\' to return items from the same position as the last successful request. Setting the value of the page to \'lastRequested\' is equivalent to setting the value of the page to \'XXX\' where XXX is the last requested page.If the value of the page specified in the first request is \'lastRequested\', then the response will contain events from the page value returned by the \'Create subscription\' operation.The value of this parameter should be either special word "lastRequested" or the exact string as returned by "nextPage" response attribute of a previous call. There is no specification for the value format - it may be any string not longer than 48 characters. Do not interfere the value, as the incorrect values may result with valid response but the events sequence may be distorted.',
            ),
            EndpointParameter(
                name='since',
                location='query',
                type='string',
                required=False,
                description="This parameter is used to obtain new 'page' marker that points at the events which happened after the specified time. The time value must be specified in 'YYYY-MM-DD HH:MM:SS' format and UTC time zone.When this parameter is specified in the request, the events are not returned, but only 'nextPage' response parameter. Do not use both 'page' and 'since' parameters in one request.This functionality should be used only to restore broken flows and to start reading from some point in time when normal reading failed. Never use this ability to access the events by their time, as this ability requires significant resources and may slow down other system functions if used extensivly.Note that obtaining events from a subscription which happened before the subscription was created is not supported. The system starts collecting the events only after the subscription is created. Trying to read events that are older may result in obtaining some information but it is not guaranteed.",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=152,
        path='/rest/ofscCore/v1/inventories',
        method='POST',
        module='core',
        summary='Create inventories',
        description='This operation creates inventories.',
        operation_id='post /rest/ofscCore/v1/inventories',
        tags=['Core/Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='createInventory',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.create_inventory()',
        signature='async def create_inventory(self, inventory_data: dict) -> Inventory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=153,
        path='/rest/ofscCore/v1/inventories/{inventoryId}',
        method='PATCH',
        module='core',
        summary='Update an inventory',
        description='This operation updates the properties of the specified inventory.',
        operation_id='patch /rest/ofscCore/v1/inventories/{inventoryId}',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventory',
        response_schema='inventory',
        implemented_in='core_api.py:OFSCoreAPI.update_inventory()',
        signature='async def update_inventory(self, inventory_id: int, inventory_data: dict) -> Inventory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=154,
        path='/rest/ofscCore/v1/inventories/{inventoryId}',
        method='GET',
        module='core',
        summary='Get an inventory',
        description='This operation retrieves the inventory details of the specified inventory.',
        operation_id='get /rest/ofscCore/v1/inventories/{inventoryId}',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='inventory',
        implemented_in='core_api.py:OFSCoreAPI.get_inventory()',
        signature='async def get_inventory(self, inventory_id: int) -> Inventory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=155,
        path='/rest/ofscCore/v1/inventories/{inventoryId}',
        method='DELETE',
        module='core',
        summary='Delete an Inventory',
        description='This operation deletes the specified inventory.',
        operation_id='delete /rest/ofscCore/v1/inventories/{inventoryId}',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=156,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        method='PUT',
        module='core',
        summary='Set a file property',
        description='This operation creates or updates the file property of the specified inventory. Note: The maximum file size that can be uploaded is 5 MB.',
        operation_id='put /rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        tags=['Core/Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=157,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        method='GET',
        module='core',
        summary='Get a file property',
        description='This operation retrieves the specified file property for the specified inventory.',
        operation_id='get /rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        tags=['Core/Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=158,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        method='DELETE',
        module='core',
        summary='Delete a file property',
        description='This operation deletes the specified file property of the specified inventory.',
        operation_id='delete /rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}',
        tags=['Core/Inventories'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=159,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoInstall',
        method='POST',
        module='core',
        summary='Undo install an inventory',
        description="This operation updates the status of the specified installed inventory to 'customer'. If the specified inventory is non-serialized, then the quantity must be provided. Also, this operation assigns the non-serialized inventory to the team holder during a teamwork activity.<b>Note:</b> Using this operation, a team member can transfer the inventory to the initial team member who created it. However, during a team work activity, a team member cannot use the inventory that belongs to another team member.If the specified inventory is associated with a segmentable activity, then the Activity ID must be specified.",
        operation_id='post /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoInstall',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventoryCustomActionSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=160,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoDeinstall',
        method='POST',
        module='core',
        summary='Undo deinstall an inventory',
        description="This operation updates the status of the specified deinstalled inventory to 'customer'.If the specified inventory is non-serialized, then the quantity must be provided. If the specified inventory is associated with a segmentable activity, then the Activity ID must be specified.",
        operation_id='post /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoDeinstall',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventoryCustomActionSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=161,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/install',
        method='POST',
        module='core',
        summary='Install an inventory',
        description="This operation creates the specified inventory and sets the status to 'Installed'. If the installed inventory is associated with a segmentable activity, then the Activity ID must be specified.",
        operation_id='post /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/install',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of an inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventoryCustomActionSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=162,
        path='/rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/deinstall',
        method='POST',
        module='core',
        summary='Deinstall an inventory',
        description='This operation deinstalls the specified inventory.If the specified inventory is non-serialized, then the quantity must be specified. If the specified inventory is associated with a segmentable activity, then the Activity ID must be specified.',
        operation_id='post /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/deinstall',
        tags=['Core/Inventories'],
        required_parameters=[
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of an inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventoryCustomActionSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=163,
        path='/rest/ofscCore/v1/resources',
        method='GET',
        module='core',
        summary='Get resources',
        description="This operation retrieves the resources that are visible to the API user.Resource visibility is determined based on the user's association with the resource tree. For example, if the user can only see a single bucket of the resource tree, then the response contains the resource of the bucket that is visible to the user. If the user has access to the entire resource tree, then the response contains all the resources.",
        operation_id='get /rest/ofscCore/v1/resources',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='canBeTeamHolder',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can be a team holder'",
            ),
            EndpointParameter(
                name='canParticipateInTeam',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can participate in team'",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resources',
        implemented_in='core_api.py:OFSCoreAPI.get_resources()',
        signature='async def get_resources(self, offset: int = 0, limit: int = 100, fields: Optional[List[str]] = None) -> ResourceListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=164,
        path='/rest/ofscCore/v1/resources/{resourceId}/children',
        method='GET',
        module='core',
        summary='Get child resources',
        description='This operation retrieves the list of child resources for the specified resource. Child resources are located one level below the specified resource on a resource tree in Oracle Field Service Manage.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/children',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='canBeTeamHolder',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can be a team holder'",
            ),
            EndpointParameter(
                name='canParticipateInTeam',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can participate in team'",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resources',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=165,
        path='/rest/ofscCore/v1/resources/{resourceId}/descendants',
        method='GET',
        module='core',
        summary='Get resource descendants',
        description='This operation retrieves all the descendants of the specified resource. Descendant resources are the resources that are located below the specified resource on a resource tree in Oracle Field Service Manage.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/descendants',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='canBeTeamHolder',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can be a team holder'",
            ),
            EndpointParameter(
                name='canParticipateInTeam',
                location='query',
                type='boolean',
                required=False,
                description="If specified, the response will be filtered accordingly to the resource type feature 'Can participate in team'",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resources',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_descendants()',
        signature='async def get_resource_descendants(self, resource_id: str, resource_fields: Optional[List[str]] = None, offset: int = 0, limit: int = 100, inventories: bool = False, work_skills: bool = False, work_zones: bool = False, work_schedules: bool = False) -> ResourceListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=166,
        path='/rest/ofscCore/v1/resources/{resourceId}/assistants',
        method='GET',
        module='core',
        summary='Get a list of assistants',
        description="This operation retrieves all the assistants of the specified resource for specified dates. The operation can only be called for a resource which is visible for the requesting application and which can be team holder according to resource type configuration. The operation finds all assisting activities within specified dates and returns the related list of assisting resources. Only visible resources may be present in the response. Maximum amount of resources returned for one request is 100.\n\nNew API method is introduced to obtain lists of assistants for a specified team holder. \n List of assistants is date specific and needs to be requested for a date. It is also possible to specify a range of dates in one call. The function searches all teamwork activities related to a specified team holder and returns the necessary information. Only teamwork activities with statuses 'pending', 'started', 'enrote' are considered to collect the list of assistants.",
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/assistants',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource for which the list of assistants should be collected .',
            ),
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=True,
                description='Mandatory parameter.The assisting activities will be collected starting from the specified date in YYYY-MM-DD format. Past dates are not accepted.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description='The assisting activities will be collected up until the specified date in YYYY-MM-DD format. If this parameter is absent then only one date specified in "dateFrom" is processed. if the  parameter "dateTo" is specified it must not be smaller then the value of dateFrom, total amount of dates in the range must not exceed 14.',
            ),
            EndpointParameter(
                name='resourceFields',
                location='query',
                type='string',
                required=False,
                description='The comma-separated names of the resource fields that are returned in the response for each assistant. The response structures for resources always contain "resourceId". If it is empty, then the "resourceInternalId" field is provided instead. In addition to those, fields specified in resourceFields request parameter if they have not empty values.',
            ),
            EndpointParameter(
                name='expand',
                location='query',
                type='string',
                required=False,
                description="The sub-entities that are embedded into each resource item returned in the response. Only one option is supported: workSkills. To avoid huge responses, if a sub-entity contains more than 500 items is not expanded, and it is returned as a link. The link can be used to retrieve the sub-entity in a separate call using the 'limit' and 'offset' parameters to control the response size.",
            ),
        ],
        request_body_schema=None,
        response_schema='resourcesAssistants',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=167,
        path='/rest/ofscCore/v1/resources/{resourceId}',
        method='GET',
        module='core',
        summary='Get a resource',
        description='This operation retrieves the information about the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resource',
        implemented_in='core_api.py:OFSCoreAPI.get_resource()',
        signature='async def get_resource(self, resource_id: str, inventories: bool = False, workSkills: bool = False, workZones: bool = False, workSchedules: bool = False) -> Resource',
        rate_limits=None,
    ),
    EndpointInfo(
        id=168,
        path='/rest/ofscCore/v1/resources/{resourceId}',
        method='PUT',
        module='core',
        summary='Create a resource',
        description="This operation creates a new resource. If the specified resource already exists, then the operation erases the existing resource properties and replaces them with the properties specified in the request.The specified resource must be assigned to one or more users in Oracle Field Service.All custom properties (except file properties) can be sent in the request in the same way as the built-in properties. The maximum character length for custom properties of type 'string' is 65535 characters. If the character length exceeds the limit, then only the first 65535 characters are saved and the rest are ignored.",
        operation_id='put /rest/ofscCore/v1/resources/{resourceId}',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='createResource',
        response_schema='resource',
        implemented_in='core_api.py:OFSCoreAPI.create_resource()',
        signature='async def create_resource(self, resource_id: str, resource_data: dict) -> Resource',
        rate_limits=None,
    ),
    EndpointInfo(
        id=169,
        path='/rest/ofscCore/v1/resources/{resourceId}',
        method='PATCH',
        module='core',
        summary='Update a resource',
        description="This operation updates the properties of an existing resource with the properties specified in the request.All custom properties (except file properties) can be sent in the request in the same way as the built-in properties. The maximum character length for custom properties of type 'string' is 65535 characters. If the character length exceeds the limit, then only the first 65535 characters are saved and the rest are ignored.",
        operation_id='patch /rest/ofscCore/v1/resources/{resourceId}',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource. If the identifyResourceBy query parameter is specified as "resourceId" or absent then the resource is identified by its External Id. (maximum length is 32 characters). If the identifyResourceBy query parameter is specified as "resourceInternalId" then the resource is identified by its OFS internal id (integer value).',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='identifyResourceBy',
                location='query',
                type='string',
                required=False,
                description='Indicates what type of identifier is used in the path parameter <b>resourceId</b>.Note that only if the "resourceInternalId" value is specified and the resource is addressed by its internal id, the function allows to modify the resource external Id value among of others resource attributes.',
                enum=['resourceId', 'resourceInternalId'],
            ),
        ],
        request_body_schema='updateResource',
        response_schema='resource',
        implemented_in='core_api.py:OFSCoreAPI.update_resource()',
        signature='async def update_resource(self, resource_id: str, resource_data: dict) -> Resource',
        rate_limits=None,
    ),
    EndpointInfo(
        id=170,
        path='/rest/ofscCore/v1/resources/{resourceId}/users',
        method='GET',
        module='core',
        summary='Get resource users',
        description='This operation retrieves the users assigned to the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/users',
        tags=['Core/Resources/Resource Assigned Users'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resourceUsers',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_users()',
        signature='async def get_resource_users(self, resource_id: str) -> ResourceUsersListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=171,
        path='/rest/ofscCore/v1/resources/{resourceId}/users',
        method='PUT',
        module='core',
        summary='Set users',
        description='This operation updates the list of users assigned to the specified resource.',
        operation_id='put /rest/ofscCore/v1/resources/{resourceId}/users',
        tags=['Core/Resources/Resource Assigned Users'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceUsers',
        response_schema='resourceUsers',
        implemented_in='core_api.py:OFSCoreAPI.set_resource_users()',
        signature='async def set_resource_users(self, resource_id: str, user_logins: List[str]) -> ResourceUsersListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=172,
        path='/rest/ofscCore/v1/resources/{resourceId}/users',
        method='DELETE',
        module='core',
        summary='Unset users',
        description='This operation removes all the users assigned to the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/users',
        tags=['Core/Resources/Resource Assigned Users'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_users()',
        signature='async def delete_resource_users(self, resource_id: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=173,
        path='/rest/ofscCore/v1/resources/{resourceId}/inventories',
        method='POST',
        module='core',
        summary='Create a resource inventory',
        description="This operation creates a resource inventory and assigns it to the specified resource. The new inventory has the status as 'resource'.",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/inventories',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='createResourceInventory',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.assign_inventory_to_resource()',
        signature='async def assign_inventory_to_resource(self, resource_id: str, inventory_data: dict) -> ResourceInventory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=174,
        path='/rest/ofscCore/v1/resources/{resourceId}/inventories',
        method='GET',
        module='core',
        summary='Get resource inventories',
        description='This operation retrieves the resource inventories for the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/inventories',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resourceInventories',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_inventories()',
        signature='async def get_resource_inventories(self, resource_id: str) -> ResourceInventoryListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=175,
        path='/rest/ofscCore/v1/resources/{resourceId}/inventories/{inventoryId}/custom-actions/install',
        method='POST',
        module='core',
        summary='Install an inventory',
        description="This operation installs the specified inventory for the specified resource. The operation changes the inventory status to 'installed' and adds it to the 'installed' list of inventories for the specified activity.If the inventory is associated with a segmentable activity, then the Activity ID must be specified.",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/inventories/{inventoryId}/custom-actions/install',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource to which the inventory is assigned or the activity (that has the inventory assigned to it) is assigned.',
            ),
            EndpointParameter(
                name='inventoryId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the inventory in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='inventoryCustomActionSchema',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=176,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSkills',
        method='POST',
        module='core',
        summary='Set work skills',
        description='This operation updates the work skills for the specified resource. The operation does the following:<ol><li>Removes all the current work skills (by changing the end date of the work skill to a past date) for the specified resource.</li><li>Updates the work skills according to the parameters specified in the request.</li><li>Returns the updated work skills and the deleted work skills.</li><ol>',
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/workSkills',
        tags=['Core/Resources/Resource Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='setWorkSkillsRequest',
        response_schema='workSkills',
        implemented_in='core_api.py:OFSCoreAPI.add_resource_work_skills()',
        signature='async def add_resource_work_skills(self, resource_id: str, work_skills_data: List[dict]) -> ResourceWorkSkillListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=177,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSkills',
        method='GET',
        module='core',
        summary='Get work skills',
        description='This operation retrieves the details about the work skills assigned to the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/workSkills',
        tags=['Core/Resources/Resource Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=False,
                description='The work skills, which are active starting from the specified date, are retrieved in the response. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description='The work skills, which are active starting from the date in the dateFrom parameter till the specified date, are retrieved in the response. Specify the date in YYYY-MM-DD format. If you specify the dateTo parameter, then you must also specify the dateFrom parameter.',
            ),
        ],
        request_body_schema=None,
        response_schema='workSkills',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_work_skills()',
        signature='async def get_resource_work_skills(self, resource_id: str) -> ResourceWorkSkillListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=178,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSkills/{workSkill}',
        method='DELETE',
        module='core',
        summary='Delete a work skill',
        description='This operation deletes the specified work skill for the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/workSkills/{workSkill}',
        tags=['Core/Resources/Resource Work Skills'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='workSkill',
                location='path',
                type='string',
                required=True,
                description='The identifier of the work skill in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=179,
        path='/rest/ofscCore/v1/resources/{resourceId}/workZones',
        method='POST',
        module='core',
        summary='Set a resource work zone',
        description='This operation assigns a work zone to the specified resource.',
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/workZones',
        tags=['Core/Resources/Resource Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceWorkZone',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.assign_resource_work_zones()',
        signature='async def assign_resource_work_zones(self, resource_id: str, work_zones_data: List[dict]) -> ResourceWorkZoneListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=180,
        path='/rest/ofscCore/v1/resources/{resourceId}/workZones',
        method='GET',
        module='core',
        summary='Get resource work zones',
        description='This operation retrieves the details of the work zones assigned to the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/workZones',
        tags=['Core/Resources/Resource Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=False,
                description='The work zones, which are active starting from the specified date, are retrieved in the response. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description='The work zones, which are active starting from the date in the dateFrom parameter till the specified date, are retrieved in the response. Specify the date in YYYY-MM-DD format. If you specify the dateTo parameter, then you must also specify the dateFrom parameter.',
            ),
            EndpointParameter(
                name='onlyActiveWorkZones',
                location='query',
                type='boolean',
                required=False,
                description='Indicates if the records related to inactive work zones should be returned in the response.If onlyActiveWorkZones=true parameter is specified, the resource work zone assignments related to inactive work zones will be skipped.',
            ),
        ],
        request_body_schema=None,
        response_schema='getResourceWorkZones',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_work_zones()',
        signature='async def get_resource_work_zones(self, resource_id: str) -> ResourceWorkZoneListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=181,
        path='/rest/ofscCore/v1/resources/{resourceId}/workZones/{workZoneItemId}',
        method='DELETE',
        module='core',
        summary='Delete a resource work zone item',
        description='This operation deletes the specified work zone item for the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/workZones/{workZoneItemId}',
        tags=['Core/Resources/Resource Work Zones'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='workZoneItemId',
                location='path',
                type='string',
                required=True,
                description="The identifier of the work zone item that needs to be deleted. This identifier must be present in the list of work zone item IDs returned by the 'Get work zones' operation.",
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=182,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSchedules',
        method='GET',
        module='core',
        summary='Get work schedules',
        description="This operation retrieves the list of work schedules assigned to the specified resource.Work schedules represent a resource's work calendar, which includes working hours, working and non-working days, reasons for absence, and so on.<b>Note:</b> This operation does not return work schedules configured for parent resources.",
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/workSchedules',
        tags=['Core/Resources/Resource Work Schedules'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='actualForDate',
                location='query',
                type='string',
                required=False,
                description='The work schedules that expired before the specified date are not returned. Specify the date in YYYY-MM-DD format.',
            ),
        ],
        request_body_schema=None,
        response_schema='workSchedules',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_work_schedules()',
        signature='async def get_resource_work_schedules(self, resource_id: str, actual_date: Optional[date] = None) -> ResourceWorkScheduleResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=183,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSchedules',
        method='POST',
        module='core',
        summary='Set a work schedule',
        description="This operation creates a work schedule for the specified resource.Work schedules represent a resource's work calendar, which includes working hours, working and non-working days, reasons for absence, and so on.This operation overwrites any work schedules that are assigned for the dates specified in the request.For example, if schedule X is currently assigned (startDate=2015-10-06, endDate=indefinite), and then an API call assigns the schedule Y (startDate=2015-11-06, endDate=2015-11-07), the schedules after the new assignment are:<ul><li>Schedule X is assigned to the resource on the start date specified as 2015-10-06.</li><li>Schedule Y is assigned on the start date specified as 2015-11-06.</li><li>Schedule Y ends on 2015-11-07 according to the specified end date.<li>Schedule X is assigned again on 2015-11-07 because its end date is specified as indefinite.</li></ul>",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/workSchedules',
        tags=['Core/Resources/Resource Work Schedules'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='workScheduleItem',
        response_schema='workSchedules',
        implemented_in='core_api.py:OFSCoreAPI.create_resource_work_schedule()',
        signature='async def create_resource_work_schedule(self, resource_id: str, schedule_data: dict) -> ResourceWorkScheduleResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=184,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSchedules/{scheduleItemId}',
        method='DELETE',
        module='core',
        summary='Delete a work schedule item',
        description='This operation deletes the specified work schedule item for the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/workSchedules/{scheduleItemId}',
        tags=['Core/Resources/Resource Work Schedules'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='scheduleItemId',
                location='path',
                type='string',
                required=True,
                description='The identifier of the work schedule item.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_work_schedule_item()',
        signature='async def delete_resource_work_schedule_item(self, resource_id: str, schedule_item_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=185,
        path='/rest/ofscCore/v1/resources/{resourceId}/workSchedules/calendarView',
        method='GET',
        module='core',
        summary='Get a calendar',
        description="This operation retrieves the work schedule assigned to the specified resource for the specified duration. Use this operation to render the resource's work schedule on a calendar view control, such as a monthly view or a weekly view.Work schedules represent a resource's work calendar, which includes working hours, working and non-working days, reasons for absence, and so on.<b>Note</b>: Work schedules configured for parent resources are retrieved only if Oracle Field Service supports them.",
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/workSchedules/calendarView',
        tags=['Core/Resources/Resource Work Schedules'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=True,
                description='The date from which the work schedule is retrieved. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=True,
                description='The date till when the work schedule is retrieved. Specify the date in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='workSchedulesCalendarView',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_calendar_view()',
        signature='async def get_resource_calendar_view(self, resource_id: str, start_date: Optional[str] = None, end_date: Optional[str] = None) -> CalendarView',
        rate_limits=None,
    ),
    EndpointInfo(
        id=186,
        path='/rest/ofscCore/v1/calendars',
        method='GET',
        module='core',
        summary='Get calendars',
        description="This operation retrieves the list of work schedules assigned to the specified resource for the specified duration. Use this operation to render the resource's work schedules on a calendar view control, such as a monthly view or a weekly view.Work schedules represent a resource's work calendar, which includes working hours, working and non-working days, reasons for absence, and so on.<b>Note:</b> Work schedules configured for parent resources are retrieved only if Oracle Field Service supports them.<b>Error Handling:</b><ul><li>If the swagger validation fails, then the entire request fails with the HTTP status '400 Bad Request' error. For example, the swagger validation fails if a required field is not specified in the request.</li><li>In all other cases, the operation returns '200 OK'.</li></ul><b>Permissions:</b>You must grant permissions to the Core API and must set Read-Write access to the Resource type entity in the Configuration, Applications (API permissions) screen.<b>Limits:</b>The date range in a request shouldn't exceed 31 days, otherwise an error is returned.<b>Errors Matrix:</b><ul><li>Returns error 404 if any of the resources do not exist.</li><li>Returns error 400 if any of the following parameters are in an incorrect format:<ul><li>dateFrom</li><li>dateTo</li><li>includeChildren</li><li>includeInactive</li></ul></li><li>Returns error 400 if the value of the dateFrom parameter is greater than the value of the dateTo parameter.</li><li>Returns error 400 if the date range (dateFrom-dateTo) in the request is greater than 31 days.</li><li>Returns error 409 if the dates specified in the request are too far in the past, or in the future.</li></ul>",
        operation_id='get /rest/ofscCore/v1/calendars',
        tags=['Core/Resources/Resource Work Schedules'],
        required_parameters=[
            EndpointParameter(
                name='resources',
                location='query',
                type='array',
                required=True,
                description='The comma-separated list of resource IDs that are returned in the response. This parameter works in conjunction with the includeChildren parameter.',
            ),
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=True,
                description='The date from which the work schedule is retrieved. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=True,
                description='The date till when the work schedule is retrieved. Specify the date in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='includeChildren',
                location='query',
                type='string',
                required=False,
                description='Indicates whether the subordinate resources must be returned. <ul><li>If the value is none, then only the calendars of the specified resource are returned.</li><li>If the value is immediate, then the calendars of the specified resource and its first level descendants are returned.</li><li>If the value is all or if it is not specified, then the calendars of the specified resource and its descendants in the hierarchy tree are returned.</li></ul>',
                enum=['none', 'immediate', 'all'],
            ),
            EndpointParameter(
                name='includeInactive',
                location='query',
                type='string',
                required=False,
                description='Indicates whether the calendars of the inactive resources must be returned.<ul><li>If the value is true, then the calendars of the inactive resources are returned.</li><li>If the value is false, then the calendars of the inactive resources are not returned.</li></ul>',
                enum=['true', 'false'],
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of items to be returned in the response. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, then it defaults to 100. Value less then 1 is not allowed.',
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. If no value is specified, then it defaults to zero. The value zero indicates that the retrieval will start from the beginning of the collection.',
            ),
        ],
        request_body_schema=None,
        response_schema='getCalendarsResponse',
        implemented_in='core_api.py:OFSCoreAPI.get_calendars()',
        signature='async def get_calendars(self, offset: int = 0, limit: int = 100) -> CalendarListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=187,
        path='/rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        method='PUT',
        module='core',
        summary='Set a file property',
        description="This operation creates the specified 'file' property for the specified resource.<b>Note:</b> The maximum size of the file that can be uploaded is 5 MB.",
        operation_id='put /rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        tags=['Core/Resources/Resource File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.set_resource_property()',
        signature='async def set_resource_property(self, resource_id: str, property_label: str, property_value: Any) -> ResourcePropertyValue',
        rate_limits=None,
    ),
    EndpointInfo(
        id=188,
        path='/rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        method='GET',
        module='core',
        summary='Get a file property',
        description='This operation retrieves the file property for the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        tags=['Core/Resources/Resource File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_property()',
        signature='async def get_resource_property(self, resource_id: str, property_label: str) -> ResourcePropertyValue',
        rate_limits=None,
    ),
    EndpointInfo(
        id=189,
        path='/rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        method='DELETE',
        module='core',
        summary='Delete a file property',
        description='This operation deletes the file property for the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}',
        tags=['Core/Resources/Resource File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_property()',
        signature='async def delete_resource_property(self, resource_id: str, property_label: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=190,
        path='/rest/ofscCore/v1/resources/{resourceId}/locations',
        method='POST',
        module='core',
        summary='Create a resource location',
        description="This operation creates a location for the specified resource.After the location is created, use the 'Set assignedlocation' operation to assign the 'start', 'end', or 'home zone center' locations to the resource.The operation supports custom properties of data type string, enumeration, and integer. You can only specify the properties that are present in the activity travel key configuration. The properties that are not present in the activity travel key configuration are ignored.",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/locations',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceLocationRequestBody',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.create_resource_location()',
        signature='async def create_resource_location(self, resource_id: str, location_data: dict) -> LocationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=191,
        path='/rest/ofscCore/v1/resources/{resourceId}/locations',
        method='GET',
        module='core',
        summary='Get resource locations',
        description='This operation retrieves the locations created for the specified resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/locations',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The external identifier of the resource.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='resourceLocations',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_locations()',
        signature='async def get_resource_locations(self, resource_id: str, offset: int = 0, limit: int = 100) -> LocationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=192,
        path='/rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        method='GET',
        module='core',
        summary='Get a resource location',
        description='This operation retrieves the details of the specified resource location.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The external identifier of the resource.',
            ),
            EndpointParameter(
                name='locationId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the location.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='resourceLocation',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_location()',
        signature='async def get_resource_location(self, resource_id: str, location_id: int) -> LocationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=193,
        path='/rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        method='PATCH',
        module='core',
        summary='Update a resource location',
        description='This operation updates the properties of the specified resource location.The operation supports custom properties of data type string, enumeration, and integer. You can only specify the properties that are present in the activity travel key configuration. The properties that are not present in the activity travel key configuration are ignored.',
        operation_id='patch /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
            EndpointParameter(
                name='locationId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the location.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceLocationRequestBody',
        response_schema='resourceLocation',
        implemented_in='core_api.py:OFSCoreAPI.update_resource_location()',
        signature='async def update_resource_location(self, resource_id: str, location_id: int, location_data: dict) -> LocationListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=194,
        path='/rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        method='DELETE',
        module='core',
        summary='Delete a resource location',
        description='This operation deletes the specified location for the specified resource.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
            EndpointParameter(
                name='locationId',
                location='path',
                type='integer',
                required=True,
                description='The unique identifier of the location.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_location()',
        signature='async def delete_resource_location(self, resource_id: str, location_id: int) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=195,
        path='/rest/ofscCore/v1/resources/{resourceId}/positionHistory',
        method='GET',
        module='core',
        summary='Get position history of a resource',
        description='This operation retrieves the position history of the specified resource for the specified date.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/positionHistory',
        tags=['Core/Resources/Resource Positions'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
            EndpointParameter(
                name='date',
                location='query',
                type='string',
                required=True,
                description='The date for which the resource position history is retrieved. For example, 2016-09-01. The date is in the time zone of the resource. Specify the date in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='resourcePositions',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_position_history()',
        signature='async def get_resource_position_history(self, resource_id: str, start_time: Optional[str] = None, end_time: Optional[str] = None) -> PositionHistory',
        rate_limits=None,
    ),
    EndpointInfo(
        id=196,
        path='/rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        method='PUT',
        module='core',
        summary='Set assigned locations',
        description="This operation creates or updates the locations assigned to the specified resource. The locations include the 'start', 'end', and 'home zone center' locations.<b>Note:</b> When the location is specified in the request, it is assigned to the resource. When the location is not specified in the request, the location is removed from the resource for the specified weekdays.",
        operation_id='put /rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceAssignedLocationsWeek',
        response_schema='resourceAssignedLocationsWeek',
        implemented_in='core_api.py:OFSCoreAPI.set_resource_assigned_locations()',
        signature='async def set_resource_assigned_locations(self, resource_id: str, assigned_locations_data: dict) -> AssignedLocationsResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=197,
        path='/rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        method='GET',
        module='core',
        summary='Get assigned locations',
        description="This operation retrieves the details of the locations assigned to the specified resource. The locations include the 'start', 'end', and 'home zone center' locations.<b>Limitations:</b>The value of the DateTo parameter cannot be greater than 32 days from the value of dateFrom parameter.<b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=False,
                description="The date from which the locations are assigned to the resource. Specify the date in 'YYYY-MM-DD' format.",
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=False,
                description="The date till when the locations are assigned to the resource. Specify the date in 'YYYY-MM-DD' format.",
            ),
        ],
        request_body_schema=None,
        response_schema='resourceAssignedLocationsWeek',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_assigned_locations()',
        signature='async def get_resource_assigned_locations(self, resource_id: str) -> AssignedLocationsResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=198,
        path='/rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        method='PATCH',
        module='core',
        summary='Update assigned locations',
        description="This operation creates or updates the temporary locations assigned to the specified resource. The temporary locations include the 'start', 'end' and 'home zone center' locations.<b>Note: </b>When the location is specified in the request, the location is assigned to the resource.<b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='patch /rest/ofscCore/v1/resources/{resourceId}/assignedLocations',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The external identifier of the resource.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='resourceTemporaryAssignedLocationsWeek',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.update_resource_assigned_locations()',
        signature='async def update_resource_assigned_locations(self, resource_id: str, assigned_locations_data: dict) -> AssignedLocationsResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=199,
        path='/rest/ofscCore/v1/resources/{resourceId}/assignedLocations/{date}',
        method='DELETE',
        module='core',
        summary='Delete assigned locations',
        description="This operation deletes the locations assigned to the specified resource for the specified weekday or date.<b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/assignedLocations/{date}',
        tags=['Core/Resources/Resource Locations'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifer of the resource.',
            ),
            EndpointParameter(
                name='date',
                location='path',
                type='string',
                required=True,
                description="The date for which you want to remove the locations assigned to the resource. Specify the date in either of these formats:<ul><li>YYYY-MM-DD</li><li>Day of the week ('sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat')</li></ul>",
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_assigned_location_date()',
        signature='async def delete_resource_assigned_location_date(self, resource_id: str, date: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=200,
        path='/rest/ofscCore/v1/resources/{resourceId}/plans',
        method='POST',
        module='core',
        summary='Create work plan for a resource',
        description='This operation creates a work plan for the specified group resource.A field manager can use work plans in the Oracle Field Service Mobility application to measure the planned amount of working time of a group resource for a particular day.',
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/plans',
        tags=['Core/Resources/Resource Work Plans'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema='plan',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.create_resource_plan()',
        signature='async def create_resource_plan(self, resource_id: str, plan_data: dict) -> ResourcePlanListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=201,
        path='/rest/ofscCore/v1/resources/{resourceId}/plans',
        method='GET',
        module='core',
        summary='Get work plans for a resource',
        description='This operation retrieves the list of work plans assigned to the specified group resource.A field manager can use work plans in the Oracle Field Service Mobility application to measure the planned amount of working time of a group resource for a particular day.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/plan',
        tags=['Core/Resources/Resource Work Plans'],
        required_parameters=[
            EndpointParameter(
                name='dateFrom',
                location='query',
                type='string',
                required=True,
                description='The work plans assigned to the resource from the specified date are retrieved. Specify the date in YYYY-MM-DD format.',
            ),
            EndpointParameter(
                name='dateTo',
                location='query',
                type='string',
                required=True,
                description='The work plans assigned to the resource till the specified date are retrieved. Specify the date in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_plans()',
        signature='async def get_resource_plans(self, resource_id: str) -> ResourcePlanListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=202,
        path='/rest/ofscCore/v1/resources/{resourceId}/plans',
        method='DELETE',
        module='core',
        summary='Delete work plan for a resource',
        description='This operation deletes the work plan assigned to the specified group resource. A field manager can use work plans in the Oracle Field Service Mobility application to measure the planned amount of working time of a group resource for a particular day.',
        operation_id='delete /rest/ofscCore/v1/resources/{resourceId}/plan',
        tags=['Core/Resources/Resource Work Plans'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_resource_plans()',
        signature='async def delete_resource_plans(self, resource_id: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=203,
        path='/rest/ofscCore/v1/resources/{resourceId}/routes/{date}',
        method='GET',
        module='core',
        summary='Get a resource route',
        description='This operation retrieves a list of activities assigned to the specified resource for the specified date.Special values can be specified in the date field to return a list of activities not scheduled for a specific date or to return a list of segmentable activities assigned to the resource.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/routes/{date}',
        tags=['Core/Resources/Resource Routes'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
            EndpointParameter(
                name='date',
                location='path',
                type='string',
                required=True,
                description="The date of the route. The date can have the following values: <ul><li>The date in YYYY-MM-DD format.</li><li>Special value 'nonScheduled' to return activities without a specific date.</li><li>Special value 'multiday' to return segmentable activities.</li><ul>",
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='activityFields',
                location='query',
                type='array',
                required=False,
                description="The comma-separated names of the activity fields (properties) returned in the response. The available fields are same as those present in the 'get activity' method except for the file properties. The start time and time zone information is returned when the parameter is ignored.",
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='route',
        implemented_in='core_api.py:OFSCoreAPI.get_resource_route()',
        signature='async def get_resource_route(self, resource_id: str, date: str) -> RouteInfo',
        rate_limits=None,
    ),
    EndpointInfo(
        id=204,
        path='/rest/ofscCore/v1/resources/{resourceId}/routes/{date}/custom-actions/activate',
        method='POST',
        module='core',
        summary='Activate a resource route',
        description="This operation activates the specified resource's route for the specified date.",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/routes/{date}/custom-actions/activate',
        tags=['Core/Resources/Resource Routes'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='date',
                location='path',
                type='string',
                required=True,
                description="The date on which the resource's route has to be activated. Specify the date in YYYY-MM-DD format.",
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.activate_resource_route()',
        signature='async def activate_resource_route(self, resource_id: str, date: str, activation_data: Optional[dict] = None) -> RouteActivationResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=205,
        path='/rest/ofscCore/v1/resources/{resourceId}/routes/{date}/custom-actions/deactivate',
        method='POST',
        module='core',
        summary='Deactivate a resource route',
        description="This operation deactivates the specified resource's route only for the current date.<b>Note:</b>If the <b>Overnight work</b> field is set to a non-zero value in the Configuration, Business rules screen, then it is possible to deactivate the resource's route on the previous day.",
        operation_id='post /rest/ofscCore/v1/resources/{resourceId}/routes/{date}/custom-actions/deactivate',
        tags=['Core/Resources/Resource Routes'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource in Oracle Field Service.',
            ),
            EndpointParameter(
                name='date',
                location='path',
                type='string',
                required=True,
                description="The date on which the resource's route has to be deactivated. Specify the date in YYYY-MM-DD format.",
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.deactivate_resource_route()',
        signature='async def deactivate_resource_route(self, resource_id: str, date: str, deactivation_data: Optional[dict] = None) -> RouteActivationResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=206,
        path='/rest/ofscCore/v1/resources/{resourceId}/findNearbyActivities',
        method='GET',
        module='core',
        summary='Find nearby activities',
        description='This operation retrieves activities near the specified location, that can be performed by the specified resource.If longitude and latitude are not specified, system may use the following information to identify position of the resource:<ul><li>resource geolocation provided by their devices or API</li><li>position of currently performed activity (started), recently completed or first pending activity</li><li>position of configured resource start location</li></ul>As a result the system returns found pending activities that match the following criteria:<ul><li>The resource\'s work skills and work zone configuration matches the activity requirements</li><li>Activity is scheduled for Today or it is non-scheduled</li><li>Activity is visible for the requesting application (see "Allow access only to certain resources" configuration of the "Application" entity)</li><li>Activity location is known to system and the activity is located within configured distance ("Nearby Radius": see Business Rules configuration)</li><li>For non-scheduled, only activities with SLA end-time that is within the configured SLA time range (Nearby SLA)</li><li>For non-scheduled, only activities with SLA start-time that is not in the future</li></ul>The found activities are sorted first by their distance and then by the SLA end time, the response will contain first best matches, not more then the <b>\'limit\'</b> value (maximum is 100) <b>Permissions:</b>This API can be used only when the permission to access Core API for Activity and Resource is granted in the <b>Configuration > Applications > API access</b> section of the required application.',
        operation_id='get /rest/ofscCore/v1/resources/{resourceId}/findNearbyActivities',
        tags=['Core/Resources'],
        required_parameters=[
            EndpointParameter(
                name='resourceId',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the resource.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='latitude',
                location='query',
                type='number',
                required=False,
                description='The geographic latitude coordinate that specifies the location of the activity.',
                minimum=-90,
                maximum=90,
            ),
            EndpointParameter(
                name='longitude',
                location='query',
                type='number',
                required=False,
                description='The geographic longitude coordinate that specifies the location of the activity.',
                minimum=-180,
                maximum=180,
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description='The comma-separated field names to be returned in the response. The field names include the names used to create an activity, get an activity, and the custom property names. The default values are activityId, resourceId, date, status, latitude, and longitude.',
            ),
            EndpointParameter(
                name='limit',
                location='query',
                type='integer',
                required=False,
                description='The number of items to be returned in the response. The default value is 10. The minimum value that can be specified is 1 and the maximum value that can be specified is 100. If the specified value is greater than 100, then it defaults to 100. Value less then 1 is not allowed.',
                minimum=1,
                maximum=100,
            ),
        ],
        request_body_schema=None,
        response_schema='findNearbyActivitiesResponse',
        implemented_in='core_api.py:OFSCoreAPI.find_nearby_activities()',
        signature='async def find_nearby_activities(self, resource_id: str, latitude: Optional[float] = None, longitude: Optional[float] = None, radius: Optional[float] = None) -> NearbyActivityListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=207,
        path='/rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules',
        method='POST',
        module='core',
        summary='Bulk update resource work schedules',
        description="This operation creates, updates, or deletes work schedules of multiple resources in a single call.<b>Error Handling:</b><ul><li>If the request size is greater than 5 MB, then the operation fails with the HTTP status '413 Request entity too large' error.</li><li>If the request body in JSON is invalid in terms of the swagger schema, then the operation fails with the HTTP status '400 Bad Request' error. The error details are as follows:<ul><li>Invalid property value. Path: 'path_in_swagger_shema'. Value: 'error_value'. Valid values: 'some_valid_value_1','some_valid_value_N'.</li></ul></li><li>If both the parameters 'resourceId' and 'resourceInternalId' are specified in a request, then the operation fails with the HTTP status '400 Bad Request' error. The error details are as follows:<ul><li>Only one of the parameters 'resourceId' or 'resourceInternalId' can be specified in a request.</li></ul></li><li>If the parameters 'resourceId' and 'resourceInternalId' are missing in the request item, then the operation fails with the HTTP status '400 Bad Request' error. The error details are as follows:<ul><li>Mandatory property is absent: 'resourceId' or 'resourceInternalId' must be defined.</li></ul></li><li>If the swagger validation fails, then the operation fails with the HTTP status '400 Bad Request' error. Examples of such cases are:<ul><li>A required field is not specified.</li><li>The request is not a valid JSON.</li></ul></li><li>The operation returns HTTP status '200 OK', even if some work schedules are not updated or some resources specified in the request are invalid.  Verify the response to identify the operations that succeeded and the operations that failed. The following is an example of such case:<ul><li>The resourceId does not exist.</li></ul></li></ul><b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bulkUpdateWorkSchedulesSchema',
        response_schema='bulkUpdateWorkSchedulesResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.bulk_update_work_schedules()',
        signature='async def bulk_update_work_schedules(self, bulk_data: dict) -> BulkScheduleUpdateResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=208,
        path='/rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills',
        method='POST',
        module='core',
        summary='Bulk update resource work skills',
        description="This operation creates, updates, or deletes work skills of multiple resources in a single call.<b>Error Handling:</b><ul><li>If the request size is greater than 5 MB, then the operation fails with the HTTP status '413 Request entity too large' error.</li><li>If the swagger validation fails, then the operation fails with the HTTP status '400 Bad Request' error. Examples of such cases are:<ul><li>A required field is not specified.</li><li>The request is not a valid JSON.</li></ul></li><li>The operation returns HTTP status '200 OK', even if some work skills are not updated or some resources specified in the request are invalid. Verify the response to identify the operations that succeeded and the operations that failed. Examples of such cases are:<ul><li>The resource ID does not exist.</li><li>The  work skill does not exist or is invalid.</li><li>The start date or end date is not specified or is invalid.</li><li>The ratio is not specified or is invalid.</li></ul></li></ul><b>Error Messages</b>The following error messages are supported for this operation:<ul><li>Cannot set work skills for resource: 'resource2'</li><li>Resource not found: resourceId='resource2'</li><li>Only one of the parameters 'resourceId' or 'resourceInternalId' can be specified at one item of request</li><li>Mandatory property is absent: 'resourceId' or 'resourceInternalId' must be defined</li><li>Invalid property value. Path: '0/resourceId'. String is too long. Length: '%%'. Maximum valid length: '32'</li><li>Invalid property value. Path: '0/resourceId'. String is too short. Length: '0'. Minimum valid length: '1'</li><li>Invalid property value. Path: '0/workSkills/0/ratio'. Value: '%%'. Value is greater than maximum: '100'</li><li>Invalid property value. Path: '%%%/workSkills/0/ratio'. Value: '-%%'. Value is less than minimum: '0'</li><li>Invalid property value. Property: 'resourceId'. Value: '%%'</li><li>Required property is not specified: '0/workSkills'</li></ul><b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bulkUpdateWorkSkillsSchema',
        response_schema='bulkUpdateWorkSkillsResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.bulk_update_work_skills()',
        signature='async def bulk_update_work_skills(self, bulk_data: dict) -> BulkSkillUpdateResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=209,
        path='/rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones',
        method='POST',
        module='core',
        summary='Bulk update resource work zones',
        description="This operation creates, updates, or deletes work zones of multiple resources in a single call. If there are no existing work zones for the resource, then the operation creates the work zones specified in the request. If there are work zones already existing for the resource, then the operation replaces them with the work zones specified in the request.<b>Error Handling:</b><ul><li>If the request size is greater than 5 MB, then the operation fails with the HTTP status '413 Request entity too large' error.</li><li>If the swagger validation fails, then the operation fails with the HTTP status '400 Bad Request' error. Examples of such cases are:<ul><li>A required field is not specified.</li><li>The request is not a valid JSON.</li></ul></li><li>The operation returns HTTP status '200 OK', even if some work zones are not updated or some resources specified in the request are invalid. Verify the response to identify the operations that succeeded and the operations that failed. Examples of such cases are:<ul><li>The resource ID does not exist.</li><li>The work zone does not exist or is invalid.</li><li>The start date or end date is not specified or is invalid.</li></ul></li></ul><b>Permissions:</b>The permission 'core_api_resource' has to be set to 'ReadWrite' for this API to work.",
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bulkUpdateWorkZonesRequestSchema',
        response_schema='bulkUpdateWorkZonesResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.bulk_update_work_zones()',
        signature='async def bulk_update_work_zones(self, bulk_data: dict) -> BulkZoneUpdateResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=210,
        path='/rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories',
        method='POST',
        module='core',
        summary='Bulk update resource inventories',
        description='This operation creates, updates, or deletes inventories of multiple resources in a single call. Only inventories with status as \'resource\' are created, deleted, or updated. Inventories with status as \'installed\' or \'deinstalled\' are ignored. Each resource pool is processed independently - inventory will not be moved between different resources. To "move" a piece of inventory it is necessary to specifically create it in one resource pool and remove from another.<b>Error Handling:</b><ul><li>If the request size is greater than 5 MB, then the API fails with the HTTP status \'413 Request entity too large\' error.</li><li>If the swagger validation fails, then the entire request fails with the HTTP status \'400 Bad Request\' error. Examples of such cases are:<ul><li>A required field is not specified.</li><li>The request is not a valid JSON.</li></ul></li><li>The operation returns HTTP status \'200 OK\', even if individual inventories are not created for some reason. Verify the response to identify the operations that succeeded and the operations that failed. Examples of such cases are:<ul><li>The resource ID does not exist</li><li>The resource does have inventories (not a technician).</li><li>The inventory type does not exist.</li><li>An invalid value is specified for an \'enum\' custom property.</li><li>A string value is specified for a custom property having data type as integer.</li></ul></li></ul><b>Permissions:</b>The permissions \'Core API : Resource\' and \'Core API : Inventory\' have to be set to \'ReadWrite\' for this API to work.',
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bulkUpdateResourceInventoriesRequestSchema',
        response_schema='bulkUpdateResourceInventoriesResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.bulk_update_inventories()',
        signature='async def bulk_update_inventories(self, bulk_data: dict) -> BulkInventoryUpdateResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=211,
        path='/rest/ofscCore/v1/resources/custom-actions/findMatchingResources',
        method='POST',
        module='core',
        summary='Find matching resources',
        description='This operation returns a list of resources which can complete this activity based on the criteria in the request. Only resources that match all of the criteria specified in request will be returned in response. Note that technicians must have a working calendar for the requested date (and not deactivated queue if it is for Today) in order to be received in the response. Depending on the application settings, the returned list may be optimized to offer true optimized appointment slots as of activity duration and travel time. <b>Overnight</b> Overnight is represented as ["FROM_TIME","TO_TIME"] where, the FROM_TIME is greater than the TO_TIME.For example, ["12:00","10:00"] indicates that the provider working time is from 12:00 to 10:00 of the next day, that is, 22 hours. <b>Fitness formula for "workTime"</b>The length (in minutes) of intersection interval of "activity window" with "technician working schedule".The interval "activity window" is the time of activity service window for the parameter "date" without time which is earlier then the SLA start (SLA end is ignored).If service window and SLA start are not defined, then the value is equal to the duration of technicians working day.<b>Fitness formula for "workZone"</b>The Resource\'s workzone ratio for the activity workzone (0-100).<ul><li>The value is 100 if the activity does not have a work zone (no work zone requirements).</li><li>The value is 0 if this resource does not have the activity\'s work zone assigned to it.</li><li>Else, the value is equal to the \'ratio\' of the resource\'s assigned work zone.</li></ul><b>Fitness formula for "workSkill"</b><ul><li>The value is 100 if:<ul><li>the activity does not have any work skill requirements. </li><li>the resource meets all the work skill requirements for this activity, that is, all resource\'s skill ratios &ge; activity\'s preferred ratios.</li></ul></li><li>The value is 0 if the resource does not have the work skills required for this activity, that is, all resource\'s skill ratios are less than activity\'s required ratios.</li><li>Else, the following formula is used: &prod;<sub>[skill]</sub>( resource<sub>[skill]</sub>.ratio - activity<sub>[skill]</sub>.required ) / ( activity<sub>[skill]</sub>.preferable - activity<sub>[skill]</sub>.required )with the following exceptions:<ul><li>if dividend &le; 0, then it is set to 0</li><li>if divisor is 0, then it is set to 1</li></ul></li></ul> <b>Fitness formula for "resourcePreference"</b>The level of correspondence to activity resource preferences.<ul><li>The value is 0 if:<ul><li>the resource is in the Denied Resources list, or</li><li>the required Resources list is not empty and the Resource is not in the list</li></ul></li><li>The value is 1 if Preferred Resources list is empty or the Resource is in the list.</li><li>The value is 0.5 for other cases.</li></ul>From Release 18A onwards, this operation has the ability to search for resources without having to create an activity first. The activity information can be sent in the request using the \'activity\' field/property. Some of the important implementation details of the function are as follows:<ul><li>Only one of the parameters (activity, activityId, or activitySearchFields) can be used in each request, if more then one is sent together, then it results in a 400 error.</li><li>The \'actvityType\' value must always be provided in the activity information as it specifies the activity features in Oracle Field Service.</li><li>Depending on the configuration some other activity fields may be required:</li><ul><li>If Activity type supports work skills, all fields that are used in the work skill conditions are mandatory in the request, and the Oracle Field Service configuration is\'Activity type Work skill conditions\'</li><li>If Activity type supports work zones, all fields that are part of the work zone key are mandatory in the request, and the Oracle Field Service configuration is \'Activity type Work zone key configuration\'</li><li>If the Activity type feature \'Calculate duration\' is enabled, then all the fields that are used in the activity duration key are mandatory in the request, and the \'Activity type Statistic parameters - Activity duration key\' configuration is used.</li><li>If the Activity type feature \'Calculate travel\' is enabled, then travel key value will be calculated based on the Activity Travel Key fields that are provided in the request. If any field is not provided, then the value of that field will be considered as empty when calculating travel key. If \'Detect activity travel keys automatically\' is checked in Statistics configuration, then it is recommended to pass country_code, city and postalCode.</li></ul></ul><b>Segmentable activities:</b>For requests related to segmentable activities the "date" parameter is mandatory. The function looks for resources that could begin the first segment on the specified date. The function will try to estimate the date of activity completion for each matching resource, considering the duration of the activity and available working hours in each date. Note that the system will only scan a limited amount of days into the future (not further than 2500 days from activity start) and also stops calculations if a resource has a long period of non working days consequently. If the complete date was not successfully estimated, the parameter "estimatedCompleteDate" will not be present in the response for that resource.<b>This operation is subject to the following conditions:</b>\nNumber of Requests:\nThe maximum number of requests that can be processed in parallel is 20. Any additional requests are rejected with an error message.',
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/findMatchingResources',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='findMatchingResourcesRequestSchema',
        response_schema='findMatchingResourcesResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.find_matching_resources()',
        signature='async def find_matching_resources(self, search_criteria: dict) -> ResourceMatchResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=212,
        path='/rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment',
        method='POST',
        module='core',
        summary='Find resources for urgent assignment',
        description='This operation retrieves a list of resources that can immediately perform an activity based on the criteria specified in the request.The resources matching the specified criteria are returned in the response if the information about their location is not older then one hour.',
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment',
        tags=['Core/Resources'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='findResourcesForUrgentAssignmentRequestSchema',
        response_schema='findResourcesForUrgentAssignmentResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.find_resources_for_urgent_assignment()',
        signature='async def find_resources_for_urgent_assignment(self, urgent_data: dict) -> UrgentAssignmentResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=213,
        path='/rest/ofscCore/v1/resources/custom-actions/setPositions',
        method='POST',
        module='core',
        summary='Set positions for resources',
        description='This operation sets resource positions for the specified resources. A maximum of 300 items are allowed in a single request.This method uses regular OAuth 2.0 authentication on behalf of user or application:<ul><li>In case of when the OAuth 2.0 access token is issued on behalf of a specific user the only available resource for updating its positions is main resource specified for this user.</li><li>In case of authentication with application there are options to allow posting positions for all resources (default) or to configure  a list of available (visible) resources to post positions for. Available (visible) resources (or buckets) can be specified in Core application - Configuration >> Applications >> [Specific application] >> Additional restrictions >> Allow access only to certain resources.</li></ul>',
        operation_id='post /rest/ofscCore/v1/resources/custom-actions/setPositions',
        tags=['Core/Resources/Resource Positions'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='setResourcesPositionsRequestSchema',
        response_schema='setResourcesPositionsResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.set_resource_positions()',
        signature='async def set_resource_positions(self, positions_data: dict) -> SetPositionsResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=214,
        path='/rest/ofscCore/v1/resources/custom-actions/lastKnownPositions',
        method='GET',
        module='core',
        summary='Get last known positions of resources',
        description="This operation retrieves the last known position of the specified resources.This operation is subject to the following conditions:<ul><li><b>Number of Resources Returned</b>:<ul><li>If 'resources' parameter is used, then the maximum number of resources with positions that can be retrieved in a single response is 300.</li><li>If 'resources' parameter is NOT used, then:<ul><li>The system tries to get all resources with last known position available.</li><li>The maximum number of resources with positions that can be retrieved in a single response is 100000.</li><li>The resources that have no last known position are not included in the response.</li><li>The maximum number of 'Get last known positions of resources' requests that can be sent simultaneously without 'resources' parameter is three. Any additional requests are rejected with an error message.</li></ul></li></ul></li><li><b>Response Size</b>: The response for a single request is limited to 20 MB. If the response size is close to 20 MB, the operation returns fewer resources with positions than available, and the response contains the 'hasMore' flag set to 'true'. This flag indicates that there are more resources with positions to be returned. In this case, a new request with 'offset' parameter set to the last returned item count is sent.</li><li><b>Operation Run Time</b>: The maximum run time for a single operation is 30 seconds. When the 30-second time limit is reached, the operation returns fewer resources with positions than available and the response contains the 'hasMore' flag set to 'true'. This flag indicates that there are more resources with positions to be returned. In this case, a new request with 'offset' parameter set to the last returned item count is sent. If the time limit has exceeded before any resources with positions are included in the response (for example, due to slow storage response), an error is returned.</li></ul>",
        operation_id='get /rest/ofscCore/v1/resources/custom-actions/lastKnownPositions',
        tags=['Core/Resources/Resource Positions'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='resources',
                location='query',
                type='array',
                required=False,
                description='The comma-separated string of resource IDs as per swagger CSV format. For example, john.smith,scott.tiger.',
            ),
            EndpointParameter(
                name='offset',
                location='query',
                type='integer',
                required=False,
                description='The record number from which the retrieval starts. The default value is zero. The value zero indicates that the retrieval will start from the beginning of the collection. The parameter is ignored if Resources parameter is specified',
            ),
        ],
        request_body_schema=None,
        response_schema='lastKnownResourcesPositionsResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.get_last_known_positions()',
        signature='async def get_last_known_positions(self, resource_ids: Optional[List[str]] = None) -> LastKnownPositionListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=215,
        path='/rest/ofscCore/v1/resources/custom-actions/resourcesInArea',
        method='GET',
        module='core',
        summary='Get resources in area',
        description='This operation retrieves resources present in an area based on the parameters specified in the request.',
        operation_id='get /rest/ofscCore/v1/resources/custom-actions/resourcesInArea',
        tags=['Core/Resources/Resource Positions'],
        required_parameters=[
            EndpointParameter(
                name='lat',
                location='query',
                type='number',
                required=True,
                description='The latitude coordinate of the center point of the specified area.',
                minimum=-90,
                maximum=90,
            ),
            EndpointParameter(
                name='lng',
                location='query',
                type='number',
                required=True,
                description='The longitude coordinate of the center point of the specified area.',
                minimum=-180,
                maximum=180,
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='radius',
                location='query',
                type='number',
                required=False,
                description='The radius (in meters) of the circular area. The center of the circular area is defined by the latitude and longitude coordinates. The maximum value of the radius that can be specified is 100000 meters. The default value is 10000 meters.',
                minimum=0,
            ),
            EndpointParameter(
                name='timeDiff',
                location='query',
                type='number',
                required=False,
                description='The time duration in minutes until a position is considered as the actual position of the resource. The resources with the last known coordinates older than the specified threshold are not returned in the response. The default value is 60 min. The maximum value is 1440 min (24h).',
                minimum=0,
                maximum=1440,
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='resourcesInAreaResponseSchema',
        implemented_in='core_api.py:OFSCoreAPI.get_resources_in_area()',
        signature='async def get_resources_in_area(self, latitude: float, longitude: float, radius: float, resource_types: Optional[List[str]] = None) -> ResourcesInAreaResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=216,
        path='/rest/ofscCore/v1/serviceRequests/{requestId}',
        method='GET',
        module='core',
        summary='Get a service request',
        description='This operation retrieves information about the specified service request.',
        operation_id='get /rest/ofscCore/v1/serviceRequests/{requestId}',
        tags=['Core/Service Requests'],
        required_parameters=[
            EndpointParameter(
                name='requestId',
                location='path',
                type='integer',
                required=True,
                description='The identifier of the service request.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='serviceRequestsItem',
        implemented_in='core_api.py:OFSCoreAPI.get_service_request()',
        signature='async def get_service_request(self, request_id: str) -> ServiceRequest',
        rate_limits=None,
    ),
    EndpointInfo(
        id=217,
        path='/rest/ofscCore/v1/serviceRequests',
        method='POST',
        module='core',
        summary='Create a service request',
        description="This operation allows integrated systems to create a new service request in Oracle Field Service.A service request is a data container, which can be used to collect information about activities, resources, or inventories when used by integrated systems. You can also specify service request custom properties while creating a service request. After a service request is created in Oracle Field Service, it cannot be modified. An existing entity ID (resourceId, activityId, or inventoryId) must be provided with the request. Only one entity ID can be specified in the request, but Oracle Field Service will populate related IDs (if any).<ul><li>If no entity ID is provided, then a bad request error, 'Required property not set. One of the property: activityId or inventoryId or resourceId must be specified' is returned.</li><li>If more than one entity ID is provided in the request, then a bad request error, 'Only one of the parameters  activityId, inventoryId, resourceId can be specified at one request' is returned.</li></ul>A new event, resourceRequestCreated, inventoryRequestCreated, customerRequestCreated in Events API is generated depending on the specified entity field (resourceId, inventoryId, activityId) in the request. For example, when an inventory ID is specified when creating a service request, Oracle Field Service finds the activity or resource that is linked with the specified inventory ID and adds the activityId and resourceId to the service request.The response of POST or GET methods will return the saved entity IDs. The response also contains the date and time when the service request is created in Oracle Field Service and is returned in YYYY-MM-DD HH:MM format (UTC time zone).<b>Permissions:</b> The user must at least have read-write access to the service request entity of the Core API; else, the function will return a 403 error.",
        operation_id='post /rest/ofscCore/v1/serviceRequests/',
        tags=['Core/Service Requests'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='createServiceRequest',
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.create_service_request()',
        signature='async def create_service_request(self, request_data: dict) -> ServiceRequest',
        rate_limits=None,
    ),
    EndpointInfo(
        id=218,
        path='/rest/ofscCore/v1/serviceRequests/{requestId}/{propertyLabel}',
        method='GET',
        module='core',
        summary='Get a file property',
        description='This operation retrieves the specified file property for the specified service request.',
        operation_id='get /rest/ofscCore/v1/serviceRequests/{requestId}/{propertyLabel}',
        tags=['Core/Service Requests'],
        required_parameters=[
            EndpointParameter(
                name='requestId',
                location='path',
                type='integer',
                required=True,
                description='The identifier of the service request.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='core_api.py:OFSCoreAPI.get_service_request_property()',
        signature='async def get_service_request_property(self, request_id: str, property_label: str) -> ServiceRequestProperty',
        rate_limits=None,
    ),
    EndpointInfo(
        id=219,
        path='/rest/ofscCore/v1/users',
        method='GET',
        module='core',
        summary='Get users',
        description='This operation returns the list of users.The visibility rules are based on the application\'s configuration parameter\n"Allow access only to certain resources", which allows to restrict the access by a list of resources. The function will only return users that associated with resources visible for the application which makes the request.\nFor example if a requesting application has the access to the top level resource then all the users in the system are visible. If an application is configured with some resource(s) in the list "Allow access only to certain resources", then the visible users are only the users that associated with allowed resource(s) and  the resources below in the resource hierarchy.',
        operation_id='get /rest/ofscCore/v1/users',
        tags=['Core/Users'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='users',
        implemented_in='core_api.py:OFSCoreAPI.get_users()',
        signature='async def get_users(self, offset: int = 0, limit: int = 100) -> UserListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=220,
        path='/rest/ofscCore/v1/users/{login}',
        method='GET',
        module='core',
        summary='Get a user',
        description='This operation retrieves the details of the specified user account.',
        operation_id='get /rest/ofscCore/v1/users/{login}',
        tags=['Core/Users'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='userGet',
        implemented_in='core_api.py:OFSCoreAPI.get_user()',
        signature='async def get_user(self, login: str) -> User',
        rate_limits=None,
    ),
    EndpointInfo(
        id=221,
        path='/rest/ofscCore/v1/users/{login}',
        method='PUT',
        module='core',
        summary='Create a user',
        description="This operation creates a new user record or replaces an existing record. If a user with the specified login does not exist, then a new user record is created. If a user already exists, then the existing user properties are replaced with the properties specified in the request.Consider the following conditions while creating a new user:<ul><li>The user login has to be unique.</li><li>The user has to be assigned to one or more resources.</li><li>The other required fields such as 'name', 'userType', 'language', and 'timeZone' must be set.</li></ul>",
        operation_id='put /rest/ofscCore/v1/users/{login}',
        tags=['Core/Users'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='userRequest',
        response_schema='userResponse',
        implemented_in='core_api.py:OFSCoreAPI.create_user()',
        signature='async def create_user(self, login: str, user_data: dict) -> User',
        rate_limits=None,
    ),
    EndpointInfo(
        id=222,
        path='/rest/ofscCore/v1/users/{login}',
        method='PATCH',
        module='core',
        summary='Update a user',
        description='This operation updates the properties of the specified user account.',
        operation_id='patch /rest/ofscCore/v1/users/{login}',
        tags=['Core/Users'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='updateUser',
        response_schema='userResponse',
        implemented_in='core_api.py:OFSCoreAPI.update_user()',
        signature='async def update_user(self, login: str, user_data: dict) -> User',
        rate_limits=None,
    ),
    EndpointInfo(
        id=223,
        path='/rest/ofscCore/v1/users/{login}',
        method='DELETE',
        module='core',
        summary='Delete a user',
        description='This operation deletes the specified user account.',
        operation_id='delete /rest/ofscCore/v1/users/{login}',
        tags=['Core/Users'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='core_api.py:OFSCoreAPI.delete_user()',
        signature='async def delete_user(self, login: str) -> None',
        rate_limits=None,
    ),
    EndpointInfo(
        id=224,
        path='/rest/ofscCore/v1/users/{login}/{propertyLabel}',
        method='PUT',
        module='core',
        summary='Set a file property',
        description="This operation creates the specified 'file' property for the specific user. Note: The maximum file size that can be uploaded is 5 MB.",
        operation_id='put /rest/ofscCore/v1/users/{login}/{propertyLabel}',
        tags=['Core/Users/User File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=225,
        path='/rest/ofscCore/v1/users/{login}/{propertyLabel}',
        method='GET',
        module='core',
        summary='Get a file property',
        description='This operation retrieves the specified file property of the specified user.',
        operation_id='get /rest/ofscCore/v1/users/{login}/{propertyLabel}',
        tags=['Core/Users/User File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='file',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=226,
        path='/rest/ofscCore/v1/users/{login}/{propertyLabel}',
        method='DELETE',
        module='core',
        summary='Delete a file property',
        description='This operation deletes the specified file property of the specified user.',
        operation_id='delete /rest/ofscCore/v1/users/{login}/{propertyLabel}',
        tags=['Core/Users/User File Properties'],
        required_parameters=[
        ],
        optional_parameters=[
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
            EndpointParameter(
                name='',
                location='',
                type='unknown',
                required=False,
                description='',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=227,
        path='/rest/ofscCore/v1/users/{login}/collaborationGroups',
        method='GET',
        module='core',
        summary='Get collaboration groups',
        description='This operation retrieves a list of collaboration groups associated with the specified user.',
        operation_id='get /rest/ofscCore/v1/users/{login}/collaborationGroups',
        tags=['Core/Users/User Collaboration Groups'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='collaborationGroups',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=228,
        path='/rest/ofscCore/v1/users/{login}/collaborationGroups',
        method='POST',
        module='core',
        summary='Add collaboration groups',
        description='This operation creates collaboration groups for the specified user.',
        operation_id='post /rest/ofscCore/v1/users/{login}/collaborationGroups',
        tags=['Core/Users/User Collaboration Groups'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema='collaborationGroups',
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=229,
        path='/rest/ofscCore/v1/users/{login}/collaborationGroups',
        method='DELETE',
        module='core',
        summary='Delete collaboration groups',
        description='This operation deletes the collaboration groups assigned to the specified user.',
        operation_id='delete /rest/ofscCore/v1/users/{login}/collaborationGroups',
        tags=['Core/Users/User Collaboration Groups'],
        required_parameters=[
            EndpointParameter(
                name='login',
                location='path',
                type='string',
                required=True,
                description='The unique identifier of the user account in Oracle Field Service.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=230,
        path='/rest/oauthTokenService/v1/token',
        method='POST',
        module='auth',
        summary='Get an access token (Deprecated)',
        description='This operation authenticates the calling application and retrieves the access token. <b>Note:</b> This operation is deprecated because it returns the access token in a non-standard response field "token". Use the endpoint with the resource path "/rest/oauthTokenService/v2/token", to get the access token in the "access_token" field according to the RFC 6749 - The OAuth 2.0 Authorization Framework standard.',
        operation_id='post /rest/oauthTokenService/v1/token',
        tags=['OAuth2/Token Service'],
        required_parameters=[
            EndpointParameter(
                name='grant_type',
                location='formData',
                type='string',
                required=True,
                description="The type of the authentication. The allowed values are:<ul><li>'client_credentials' - HTTP Basic authentication is used to authenticate the calling application. The 'client_id' and 'client_secret' are used as the credentials.</li><li>'urn:ietf:params:oauth:grant-type:jwt-bearer' - JWT Assertion token is used to authenticate the calling application.</li></ul>",
                enum=['client_credentials', 'urn:ietf:params:oauth:grant-type:jwt-bearer'],
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='assertion',
                location='formData',
                type='string',
                required=False,
                description='The JWT assertion token. This field contains the assertion token only when the grant_type is \'urn:ietf:params:oauth:grant-type:jwt-bearer\'.The JWT assertion token structure is as follows:<ul><li>Header: The header should contain \'alg\' field set to \'RS256\'. For example, { "alg" : "RS256" }.</li><li>Payload: The payload should contain the following fields:<ul><li>"iss" - the name of the person who issued the assertion token. This field is only for information/logging purposes and is not used for validation.</li><li>"aud" - the audience for the assertion token. It is a string composed of three parts delimited by colon. The first part of the string is always \'ofsc\', the second part is the Oracle Field Service environment name, and the third part is the Application ID. For example, "ofsc:bestcustomer:best_mobile_app".</li><li>"sub" - the subject of the assertion token. It can either be equal to "aud" (if we perform the call as application, not as a Oracle Field Service user), or it can be equal to the "login" field of an Oracle Field Service user that you want to authorize to call the REST APIs.</li><li>"iat" - the UNIX timestamp when the assertion was issued.</li><li>"exp" - the UNIX timestamp when the assertion expires. The "exp" time should be kept short, for example, a minute or a few minutes.</li></ul> The following is an example JWT assertion token that you can copy-paste to https://jwt.io to see the fields: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJwaGlsbGlwIiwiYXVkIjoib2ZzYzp5YW1hdG86NTM0ZjgyYThkMWFjMmE0N2RhOWNmZTk1YTRjOGJmOWI4N2I2NjU1MyIsImlzcyI6Im15IG1vbW15IiwiaWF0IjoxNDg1NDY5MzY0LCJleHAiOjE0ODU0Njk0OTR9.Y8fAyCvJ1EqGip0jgOb8VjwjPq3WDZuTRsFrZSfNSSH-8QXTyj11adQPDH8OZKrpTyPMtxHGZscBniimCpA7w-0_9TDCNf4v1mHvWgNZDI-Q8qe7wr66rrH1wGpBDX6QijGw2GU_642aw6hXo2YVtViUz9NJ0W-sLj1y7yamwJPiJNGx_diiQJxMJ4pPzqs6H1KxkucmSlbKMjscausF8NVqpB_wupcuSxlvo5-mCDsbfZrDPMgnvi1SqoaHOrzTiPSFp96dowXnVnlsHcypASczmQvz30MIuQvHLGJq_HRTXcgzZ5ofY0At823c1dPY0Jfri172TadT5jc10g4QHg',
            ),
            EndpointParameter(
                name='ofsc_dynamic_scope',
                location='formData',
                type='string',
                required=False,
                description='If the value of this parameter adds an additional claim to the access token returned in response with the same name and value. The \'ofsc_dynamic_scope\' parameter and the claim have the URL format with optional query parameters. The claim applies the following restrictions to the requests:<ul> <li><b>endpoint</b>: Oracle Field Service REST API rejects the token with HTTP 401 status code, if it is used to call a different endpoint other than the one specified in \'ofsc_dynamic_scope\' claim.</li> <li><b>query fields</b>: Oracle Field Service REST API rejects the request with HTTP 401 status code, if the request URL does not contain all the query parameters specified in the \'ofsc_dynamic_scope\' claim.</li> <li><b>query values</b>: Oracle Field Service REST API rejects the request with HTTP 401 status code, if all the query parameter values specified in the request URL do not match the query parameter values of the \'ofsc_dynamic_scope\' claim.</li></ul>Multiple URLs can be specified in this parameter and claim. The URLs must be separated by a single space.In the following cURL command example, the value of the \'ofsc_dynamic_scope\' parameter is set to "https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/whereIsMyTech?activityId=12345" (value is URL-encoded in the command) <code>curl -u \'client_id@environment_name:client_secret\' -X POST --url \'https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/oauthTokenService/v1/token\' -d \'grant_type=client_credentials\'  -d \'ofsc_dynamic_scope=https%3A%2F%2F&lt;environment_name&gt;.fs.ocs.oraclecloud.com%2Frest%2FofscCore%2Fv1%2FwhereIsMyTech%3FactivityId%3D12345\'</code>',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=231,
        path='/rest/oauthTokenService/v2/token',
        method='POST',
        module='auth',
        summary='Get an access token',
        description='This operation authenticates the calling application and retrieves the access token.',
        operation_id='post /rest/oauthTokenService/v2/token',
        tags=['OAuth2/Token Service'],
        required_parameters=[
            EndpointParameter(
                name='grant_type',
                location='formData',
                type='string',
                required=True,
                description="The type of the authentication. The allowed values are:<ul><li>'client_credentials' - HTTP Basic authentication is used to authenticate the calling application. The 'client_id' and 'client_secret' are used as the credentials.</li><li>'urn:ietf:params:oauth:grant-type:jwt-bearer' - JWT Assertion token is used to authenticate the calling application.</li></ul>",
                enum=['client_credentials', 'urn:ietf:params:oauth:grant-type:jwt-bearer'],
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='assertion',
                location='formData',
                type='string',
                required=False,
                description='The JWT assertion token. This field contains the assertion token only when the grant_type is \'urn:ietf:params:oauth:grant-type:jwt-bearer\'.The JWT assertion token structure is as follows:<ul><li>Header: The header should contain \'alg\' field set to \'RS256\'. For example, { "alg" : "RS256" }.</li><li>Payload: The payload should contain the following fields:<ul><li>"iss" - the name of the person who issued the assertion token. This field is only for information/logging purposes and is not used for validation.</li><li>"aud" - the audience for the assertion token. It is a string composed of three parts delimited by colon. The first part of the string is always \'ofsc\', the second part is the Oracle Field Service environment name, and the third part is the Application ID. For example, "ofsc:bestcustomer:best_mobile_app".</li><li>"sub" - the subject of the assertion token. It can either be equal to "aud" (if we perform the call as application, not as a Oracle Field Service user), or it can be equal to the "login" field of an Oracle Field Service user that you want to authorize to call the REST APIs.</li><li>"iat" - the UNIX timestamp when the assertion was issued.</li><li>"exp" - the UNIX timestamp when the assertion expires. The "exp" time should be kept short, for example, a minute or a few minutes.</li></ul> The following is an example JWT assertion token that you can copy-paste to https://jwt.io to see the fields: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJwaGlsbGlwIiwiYXVkIjoib2ZzYzp5YW1hdG86NTM0ZjgyYThkMWFjMmE0N2RhOWNmZTk1YTRjOGJmOWI4N2I2NjU1MyIsImlzcyI6Im15IG1vbW15IiwiaWF0IjoxNDg1NDY5MzY0LCJleHAiOjE0ODU0Njk0OTR9.Y8fAyCvJ1EqGip0jgOb8VjwjPq3WDZuTRsFrZSfNSSH-8QXTyj11adQPDH8OZKrpTyPMtxHGZscBniimCpA7w-0_9TDCNf4v1mHvWgNZDI-Q8qe7wr66rrH1wGpBDX6QijGw2GU_642aw6hXo2YVtViUz9NJ0W-sLj1y7yamwJPiJNGx_diiQJxMJ4pPzqs6H1KxkucmSlbKMjscausF8NVqpB_wupcuSxlvo5-mCDsbfZrDPMgnvi1SqoaHOrzTiPSFp96dowXnVnlsHcypASczmQvz30MIuQvHLGJq_HRTXcgzZ5ofY0At823c1dPY0Jfri172TadT5jc10g4QHg',
            ),
            EndpointParameter(
                name='ofsc_dynamic_scope',
                location='formData',
                type='string',
                required=False,
                description='If the value of this parameter adds an additional claim to the access token returned in response with the same name and value. The \'ofsc_dynamic_scope\' parameter and the claim have the URL format with optional query parameters. The claim applies the following restrictions to the requests:<ul> <li><b>endpoint</b>: Oracle Field Service REST API rejects the token with HTTP 401 status code, if it is used to call a different endpoint other than the one specified in \'ofsc_dynamic_scope\' claim.</li> <li><b>query fields</b>: Oracle Field Service REST API rejects the request with HTTP 401 status code, if the request URL does not contain all the query parameters specified in the \'ofsc_dynamic_scope\' claim.</li> <li><b>query values</b>: Oracle Field Service REST API rejects the request with HTTP 401 status code, if all the query parameter values specified in the request URL do not match the query parameter values of the \'ofsc_dynamic_scope\' claim.</li></ul>Multiple URLs can be specified in this parameter and claim. The URLs must be separated by a single space.In the following cURL command example, the value of the \'ofsc_dynamic_scope\' parameter is set to "https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/ofscCore/v1/whereIsMyTech?activityId=12345" (value is URL-encoded in the command) <code>curl -u \'client_id@environment_name:client_secret\' -X POST --url \'https://&lt;environment_name&gt;.fs.ocs.oraclecloud.com/rest/oauthTokenService/v2/token\' -d \'grant_type=client_credentials\'  -d \'ofsc_dynamic_scope=https%3A%2F%2F&lt;environment_name&gt;.fs.ocs.oraclecloud.com%2Frest%2FofscCore%2Fv1%2FwhereIsMyTech%3FactivityId%3D12345\'</code>',
            ),
        ],
        request_body_schema=None,
        response_schema='',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=232,
        path='/rest/ofscCapacity/v1/activityBookingOptions',
        method='GET',
        module='capacity',
        summary='Get activity booking options',
        description="This operation retrieves the available booking options (such as buckets and time slots) for booking an activity.<b>Overview</b>This operation retrieves the time slots in which the activity can be performed. The following points are considered while booking an activity within the time slots:<ul><li>The booking quota is available for the category and for the day.</li><li>The booking is not closed for the category, time frame, and work zone.</li><li>The workforce is available to perform the activity.</li></ul>Additionally, the StopBookingAt constraint is considered for activity booking in an availability-based quota bucket. The StopBookingAt value denotes the percentage of the quota used for a day and indicates that no more activities can be booked for the selected category, when the  StopBookingAt percentage is reached.<b>Activity fields</b>This operation calculates the estimated travel time, duration, area, and capacity category for booking an activity based on the activity fields and custom properties request parameters. The built-in activity fields have the same names and the same format as in the other REST API operations. The following built-in fields are considered:<ul><li>apptNumber</li> <li>recordType</li> <li>customerName</li> <li>customerNumber</li> <li>customerPhone</li> <li>customerEmail</li> <li>customerCell</li> <li>streetAddress</li> <li>city</li> <li>postalCode</li> <li>stateProvince</li> <li>reminderTime</li> <li>longitude</li> <li>latitude</li> <li>slaWindowStart</li> <li>slaWindowEnd</li> <li>points</li> <li>timeOfBooking</li> <li>language</li> <li>timeZone</li> </ul>The custom properties are identified by their label and are same as in the other REST API operations.Activity field requirements are as follows:<ul><li>The 'work zone key' fields must be passed, if the 'determineAreaByWorkZone' parameter is not set to 'false' or if the bucket settings close bookings by work zone. </li><li>All fields mentioned in work skill conditions should be passed, if the 'determineCategory' parameter is set to 'true', else the category will not be determined.</li><li>The 'duration key' fields need to be passed, if the 'estimateDuration' parameter is set to 'true'.</li><li>If the 'estimateTravelTime' parameter is set to 'true', then, the 'travel key' fields need to be passed. If any field is not provided, then the value of that field will be considered as empty when calculating travel key. If 'Detect activity travel keys automatically' is checked in Statistics configuration, then it is recommended to pass country_code, city and postalCode.</li></ul><b>For example:</b> If the postal code/Zip code is configured as part of the travel key, then the <code>?postalCode=12345</code> can be specified as one of the query parameters.<b>Note:</b>If any custom property label conflicts with another query parameter, then it will be ignored and cannot be used until renamed.",
        operation_id='get activityBookingOptions',
        tags=['Capacity/Booking'],
        required_parameters=[
            EndpointParameter(
                name='dates',
                location='query',
                type='array',
                required=True,
                description='The dates for which the booking options are requested. The dates are specified as a comma-separated list, for example, YYYY-MM-D1,YYYY-MM-D2,YYYY-MM-D3.',
            ),
            EndpointParameter(
                name='activityType',
                location='query',
                type='string',
                required=True,
                description='The type of the activity. Based on the activity type, predefined company-specific rules are applied while processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources to which the activities can be assigned.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='apptNumber',
                location='query',
                type='string',
                required=False,
                description='The parameter may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and may be left empty.',
                max_length=40,
            ),
            EndpointParameter(
                name='recordType',
                location='query',
                type='string',
                required=False,
                description="The type of the activity record. The following values are available:<ul><li>regular: The default value for most new activities.</li><li>prework: The pre-work activity is created in Oracle Field Service, if the technician needs to perform some work before the actual activity.</li><li>reopened: The activity is created when an activity in a final status is reopened for some reason.</li><li>multiday_activity: The activity is created when the 'activityType' specified in the API indicates that it is a segmentable activity.</li><li>multiday_activity_segment: The activities that are automatically created for segmentable activities, based on their duration and timeslot settings.</li></ul>",
                enum=['regular', 'reopened', 'prework', 'multiday_activity', 'multiday_activity_segment'],
            ),
            EndpointParameter(
                name='customerName',
                location='query',
                type='string',
                required=False,
                description='The name of the customer.',
            ),
            EndpointParameter(
                name='customerNumber',
                location='query',
                type='string',
                required=False,
                description='The account number of the customer. This parameter is used by integrations as a placeholder for the external identifier of the account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty.',
            ),
            EndpointParameter(
                name='customerPhone',
                location='query',
                type='string',
                required=False,
                description="The regular (land) phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
            ),
            EndpointParameter(
                name='customerEmail',
                location='query',
                type='string',
                required=False,
                description='The email address of the customer.',
            ),
            EndpointParameter(
                name='customerCell',
                location='query',
                type='string',
                required=False,
                description="The customer's cell phone number. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
            ),
            EndpointParameter(
                name='streetAddress',
                location='query',
                type='string',
                required=False,
                description='The street address of the customer. This field is used for geocoding and must contain a valid address.',
            ),
            EndpointParameter(
                name='city',
                location='query',
                type='string',
                required=False,
                description='The city of the customer where the activity is scheduled. This field is used for geocoding and must contain a valid address.',
            ),
            EndpointParameter(
                name='postalCode',
                location='query',
                type='string',
                required=False,
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address.',
            ),
            EndpointParameter(
                name='stateProvince',
                location='query',
                type='string',
                required=False,
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address.',
            ),
            EndpointParameter(
                name='longitude',
                location='query',
                type='number',
                required=False,
                description='The longitude coordinate (in degrees) of the activity.',
                minimum=-180,
                maximum=180,
            ),
            EndpointParameter(
                name='latitude',
                location='query',
                type='number',
                required=False,
                description='The latitude coordinate (in degrees) of the activity.',
                minimum=-90,
                maximum=90,
            ),
            EndpointParameter(
                name='slaWindowStart',
                location='query',
                type='string',
                required=False,
                description="The time when the Service Level Agreement (SLA) window starts. Specify the time in 'YYYY-MM-DD HH:MM:SS' format.",
            ),
            EndpointParameter(
                name='slaWindowEnd',
                location='query',
                type='string',
                required=False,
                description="The time when the Service Level Agreement (SLA) window ends. Specify the time in 'YYYY-MM-DD HH:MM:SS' format.",
            ),
            EndpointParameter(
                name='points',
                location='query',
                type='integer',
                required=False,
                description="The cost of the activity in 'points'. This parameter is intended for use by the Routing module.",
                minimum=0,
                maximum=65535,
            ),
            EndpointParameter(
                name='timeOfBooking',
                location='query',
                type='string',
                required=False,
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
            ),
            EndpointParameter(
                name='reminderTime',
                location='query',
                type='integer',
                required=False,
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
            ),
            EndpointParameter(
                name='language',
                location='query',
                type='string',
                required=False,
                description='The preferred language of the customer. This parameter is optional and its value defaults to the language set for the Login screen.\nThe accepted language codes are listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
            ),
            EndpointParameter(
                name='languageISO',
                location='query',
                type='string',
                required=False,
                description="The ISO language code (for example, 'en-US').",
            ),
            EndpointParameter(
                name='timeZone',
                location='query',
                type='string',
                required=False,
                description="The name of the customer's time zone.",
            ),
            EndpointParameter(
                name='determineAreaByWorkZone',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. \nIf true, then the work zone is determined automatically and all capacity areas or groups that have the work zone are processed.<b>Note:</b> The determination algorithm is based on the calculation of the work zone key (defined in the Company Settings, Work Zone Dictionary screen) and uses the specified activity fields and finds a zone that corresponds to the calculated value. Therefore, all the fields that are used to calculate the work zone key formula are mandatory.If false, then the capacity area or group is not determined by the work zone of the activity. The default value is true.',
            ),
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=False,
                description="The labels of the capacity areas.<b>Note:</b> If the 'areas' parameter is not passed and if the 'determineAreaByWorkZone' parameter is set to 'false', then the operation processes all the visible capacity areas.",
            ),
            EndpointParameter(
                name='determineCategory',
                location='query',
                type='boolean',
                required=False,
                description="Contains one of the following values: true or false. \nIf true, then all the included fields in the work skill conditions must be specified and these fields are required to determine work skills and capacity categories for booking the activity.<b>Note:</b> Contrary to the 'get_capacity' operation, this operation books activities that do not have capacity categories. Therefore, if the operation is unable to determine a capacity category using the specified fields, it does not return an error.If false, then the capacity categories are not determined based on the specified activity fields. The default value is true.",
            ),
            EndpointParameter(
                name='categories',
                location='query',
                type='array',
                required=False,
                description='The labels of the capacity categories in the capacity category filter.',
            ),
            EndpointParameter(
                name='estimateDuration',
                location='query',
                type='boolean',
                required=False,
                description="Contains one of the following values: true or false. \nIf true and if the 'Define duration manually' option is disabled for a corresponding activity type, then the operation tries to estimate the duration of the activity using statistics.To estimate the activity duration, it is required to calculate the activity duration key. Therefore, all the fields that are used to calculate the  activity duration key formula become mandatory.If the 'estimateDuration' option is enabled and the operation is unable to find a corresponding statistical record, then the following values are used:<ul><li>The 'defaultDuration' parameter</li>OR<li>The default duration value defined on the activity type level.</li></ul>If false, then the operation does not estimate the duration of the activity using statistics. The default value is true.",
            ),
            EndpointParameter(
                name='defaultDuration',
                location='query',
                type='integer',
                required=False,
                description="The duration value (in minutes) used in one of the following scenarios:<ul><li>The 'Define duration manually' option is enabled for the activity type. </li><li>The 'estimateDuration' option is disabled.</li><li>The statistical record is not available for the activity.</li></ul><b>Note:</b>If the 'estimateDuration' option is disabled and if the 'defaultDuration' value is not passed, then the duration of the activity to be booked is the default duration of the activity type.",
            ),
            EndpointParameter(
                name='estimateTravelTime',
                location='query',
                type='boolean',
                required=False,
                description="Contains one of the following values: true or false. \nIf true and the 'Calculate travel' option is set for a corresponding activity type, then the operation tries to estimate the activity travel time using statistics.To estimate the activity travel time, it is required to calculate the activity travel key. Therefore, all the fields used to calculate the activity travel key formula become mandatory.<b>Note:</b> The operation uses the same travel estimation algorithm for the activity located in the capacity area.If false, then the operation does not estimate the activity travel time using statistics. The default value is true.",
            ),
            EndpointParameter(
                name='minTimeBeforeArrival',
                location='query',
                type='integer',
                required=False,
                description='The parameter is used for day-0 bookings. When it is specified, the operation only returns the intervals where the start time is greater than the sum of currentTime and minTimeBeforeArrival parameters.',
            ),
            EndpointParameter(
                name='includePartiallyDefinedCategories',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. \nIf true and if more than one capacity category matching the activity is defined for the capacity areas, then the operation returns capacity areas having at least one capacity category matching the activity.If false or not specified, then the operation returns only those capacity areas that have all the capacity categories matching the activity. The default value is false.',
            ),
            EndpointParameter(
                name='lateStartMitigation',
                location='query',
                type='integer',
                required=False,
                description='Do not suggest booking options if the activity is likely to begin close to the end of the time slot within last [ NN ] percent. This functionality is only applicable for quota by intervals. Default: 20',
                minimum=0,
                maximum=100,
            ),
        ],
        request_body_schema=None,
        response_schema='activityBookingOptions',
        implemented_in='capacity_api.py:CapacityAPI.get_activity_booking_options()',
        signature='async def get_activity_booking_options(self, activity_id: str, date: str, duration: Optional[int] = None, travel_time: Optional[int] = None) -> ActivityBookingOptionsResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=233,
        path='/rest/ofscCapacity/v1/bookingClosingSchedule',
        method='GET',
        module='capacity',
        summary='Get booking closing schedule',
        description='This operation returns a booking closing schedule for one or more capacity areas.',
        operation_id='get bookingClosingSchedule',
        tags=['Capacity/Booking Closing Schedule'],
        required_parameters=[
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=True,
                description='The labels of the capacity areas or the capacity area groups.',
            ),
        ],
        optional_parameters=[
        ],
        request_body_schema=None,
        response_schema='bookingClosingScheduleList',
        implemented_in='capacity_api.py:CapacityAPI.get_booking_closing_schedule()',
        signature='async def get_booking_closing_schedule(self, areas: Optional[List[str]] = None) -> BookingClosingScheduleListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=234,
        path='/rest/ofscCapacity/v1/bookingClosingSchedule',
        method='PATCH',
        module='capacity',
        summary='Create or update booking closing schedules',
        description='This operation creates or updates the booking closing schedules for one or more capacity areas.',
        operation_id='patch bookingClosingSchedule',
        tags=['Capacity/Booking Closing Schedule'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bookingClosingScheduleList',
        response_schema='ResultObject',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=235,
        path='/rest/ofscCapacity/v1/bookingStatuses',
        method='GET',
        module='capacity',
        summary='Get booking statuses',
        description='This operation retrieves a collection of booking statuses for the specified dates and capacity areas.',
        operation_id='get bookingStatuses',
        tags=['Capacity/Booking Closing Schedule'],
        required_parameters=[
            EndpointParameter(
                name='dates',
                location='query',
                type='string',
                required=True,
                description='The dates for which the booking statuses must be retrieved. The date is specified in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=False,
                description='The label of the capacity area.',
            ),
        ],
        request_body_schema=None,
        response_schema='bookingStatusList',
        implemented_in='capacity_api.py:CapacityAPI.get_booking_statuses()',
        signature='async def get_booking_statuses(self, dates: List[str], areas: Optional[List[str]] = None) -> BookingStatusListResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=236,
        path='/rest/ofscCapacity/v1/bookingStatuses',
        method='PATCH',
        module='capacity',
        summary='Update booking statuses',
        description='This operation updates the booking statuses (that is, open or closed) based on the specified request parameters.',
        operation_id='patch bookingStatuses',
        tags=['Capacity/Booking Closing Schedule'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='bookingStatusRequestList',
        response_schema='ResultBookingStatusObject',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=237,
        path='/rest/ofscCapacity/v1/capacity',
        method='GET',
        module='capacity',
        summary='Get available capacity',
        description='This operation returns the maximum available capacity and the estimated availability for each capacity area according to the working calendars.',
        operation_id='get capacity',
        tags=['Capacity/Available Capacity'],
        required_parameters=[
            EndpointParameter(
                name='dates',
                location='query',
                type='array',
                required=True,
                description='The dates for which the available capacity is calculated. The date is specified in YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=False,
                description='The labels of the capacity areas or the capacity area groups.',
            ),
            EndpointParameter(
                name='aggregateResults',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. If true and if multiple capacity areas are selected, then the max capacity values for each area are aggregated and returned as a single structure. If false, then the max capacity values for each area  are returned separately. The default value is false.',
            ),
            EndpointParameter(
                name='calendarTimeIntervals',
                location='query',
                type='array',
                required=False,
                description="The comma-separated  list of time intervals for which the calendar capacity is calculated. Each item in the list represents a particular interval. Use the following format to specify the comma-separated  list of time intervals:\n                                           all | <hour>[:<minute>] | [<from hour>[:<from minute>]]-[[<to hour>[:<to minute>]] \n                                           'all' represents a whole working day.\n                                            Valid values for hours: [0 to 48] \n                                            The dash sign after 24, for example, 24 - represents overnight work.\n                                            Minutes are optional. Valid values for minutes: [0 to 59].\nA single time value specified as the interval determines the number of resources available on a given moment.                                         Separate intervals can be specified for the 'calendar' and 'available' capacity. \n                                            The system allows intersected (for example, 9-10, 9.30-12) and duplicated intervals (for example, 12-12:30, 12:30-13) within the same request. \nThe default value is all.",
            ),
            EndpointParameter(
                name='availableTimeIntervals',
                location='query',
                type='string',
                required=False,
                description='The list of time intervals for which the available capacity is calculated. Use the following format to specify the time intervals: \n                                            all | <hour>[:<minute>] | [<from hour>[:<from minute>]]-[[<to hour>[:<to minute>]]. The default value is all.',
            ),
            EndpointParameter(
                name='categories',
                location='query',
                type='array',
                required=False,
                description='The labels of the capacity categories in the capacity category filter. If there are no capacity categories in the filter, then all capacity categories available for the specified area(s) are returned.',
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description='The list of fields that should be returned in the response.\nSupported fields:\n - area.name; \n - area.calendar.count; \n - area.calendar.minutes; \n - area.available.count; \n - area.available.minutes; \n - area.category.calendar.count; \n - area.category.calendar.minutes; \n - area.category.available.count; \n - area.category.available.minutes;\nDefault value:\n - date (returned regardless "fields");\n - area.label (returned regardless "fields"); \n - area.calendar.count; \n - area.category.label (returned regardless "fields"); \n - area.category.calendar.count',
            ),
        ],
        request_body_schema=None,
        response_schema='capacityList',
        implemented_in='capacity_api.py:CapacityAPI.get_capacity()',
        signature='async def get_capacity(self, dates: List[str], areas: Optional[List[str]] = None, categories: Optional[List[str]] = None, fields: Optional[List[str]] = None, aggregateResults: bool = False, availableTimeIntervals: str = "all", calendarTimeIntervals: str = "all") -> GetCapacityResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=238,
        path='/rest/ofscCapacity/v1/quota',
        method='GET',
        module='capacity',
        summary='Get quota',
        description='This operation retrieves a collection of quota groups. Each quota group contains a list of quotas with a ratio value. <b>Note:</b> This operation does not support timeslot-based quota and can be only used for interval-based quota.',
        operation_id='get quota',
        tags=['Capacity/Quota/v1'],
        required_parameters=[
            EndpointParameter(
                name='dates',
                location='query',
                type='array',
                required=True,
                description='The dates for which the quota groups are retrieved. The date is specified in the YYYY-MM-DD format.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=False,
                description='The labels of the capacity areas or the capacity area groups.',
            ),
            EndpointParameter(
                name='aggregateResults',
                location='query',
                type='boolean',
                required=False,
                description='Contains one of the following values: true or false. If true and if multiple capacity areas are selected, then the quota values for each area are aggregated and returned as a single structure. If false, then the quota values for each area are returned separately. The default value is false.',
            ),
            EndpointParameter(
                name='categories',
                location='query',
                type='array',
                required=False,
                description='The labels of the capacity categories in the capacity category filter. If there are no capacity categories in the filter, then all capacity categories available for the specified area(s) are returned.',
            ),
            EndpointParameter(
                name='fields',
                location='query',
                type='array',
                required=False,
                description="The list of fields that are returned in the response. \n<ul><li>Supported fields: area.name, area.quotaPercent, area.minQuota, area.quota, area.maxAvailable, area.maxAvailableByPlans, area.otherActivities, area.used, area.usedQuotaPercent, area.count, area.status, area.category.quotaPercentDay, area.category.quotaPercentCategory, area.category.minQuota, area.category.quota, area.category.maxAvailable, area.category.maxAvailableByPlans, area.category.stopBookingAt, area.category.used, area.category.usedQuotaPercent, area.category.count, area.category.plan, area.category.status, area.category.interval</li><li>Default values: date, area.label, area.quota, area.category.label, area.category.quota</li></ul><b>Note:</b> The date, area.label, and area.category.label values are returned regardless of the 'fields' parameter.",
            ),
        ],
        request_body_schema=None,
        response_schema='v1-quota-result',
        implemented_in='capacity_api.py:CapacityAPI.get_quota()',
        signature='async def get_quota(self, dates: List[str], areas: Optional[List[str]] = None, categories: Optional[List[str]] = None, aggregateResults: Optional[bool] = None, categoryLevel: Optional[bool] = None, intervalLevel: Optional[bool] = None, returnStatuses: Optional[bool] = None, timeSlotLevel: Optional[bool] = None) -> GetQuotaResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=239,
        path='/rest/ofscCapacity/v1/quota',
        method='PATCH',
        module='capacity',
        summary='Create or update quota',
        description='This operation creates a new quota or updates an existing quota.',
        operation_id='patch quota',
        tags=['Capacity/Quota/v1'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='quotaPatchList',
        response_schema='ResultQuotaObject',
        implemented_in='capacity_api.py:CapacityAPI.patch_quota()',
        signature='async def patch_quota(self, dates: List[str], areas: Optional[List[str]] = None, categories: Optional[List[str]] = None, aggregateResults: Optional[bool] = None, categoryLevel: Optional[bool] = None, intervalLevel: Optional[bool] = None, returnStatuses: Optional[bool] = None, timeSlotLevel: Optional[bool] = None) -> GetQuotaResponse',
        rate_limits=None,
    ),
    EndpointInfo(
        id=240,
        path='/rest/ofscCapacity/v2/quota',
        method='GET',
        module='capacity',
        summary='Get quota',
        description='The function allows to read the quota information for set of days on different quota levels - Capacity Areas, Capacity Categories, Time slots or Intervals. The quota values can be retreived from various levels accordingly to the quota type configuration of each particular Capacity Area.',
        operation_id='get quota (v2)',
        tags=['Capacity/Quota/v2'],
        required_parameters=[
            EndpointParameter(
                name='dates',
                location='query',
                type='array',
                required=True,
                description='The list of dates in the YYYY-MM-DD format, for which the quota information is retrieved.',
            ),
        ],
        optional_parameters=[
            EndpointParameter(
                name='areas',
                location='query',
                type='array',
                required=False,
                description='The list of labels of the capacity areas. It is also possible to use resource external id(s) of a grouping resource item(s), under which the capacity areas are configured, for such the function will scan and collect all the nested Capacity Areas for processing. The default value is the root item of the resource tree, so that all existing capacity areas will be processed.',
            ),
            EndpointParameter(
                name='categories',
                location='query',
                type='array',
                required=False,
                description='The list of labels of the capacity categories. If the parameter is not specified then all categories configured for the areas will be processed.',
            ),
            EndpointParameter(
                name='aggregateResults',
                location='query',
                type='boolean',
                required=False,
                description='If this parameter is <b>true</b> then the quota values for all requested capacity areas are aggregated and returned as a single structure. If <b>false</b>, then the quota values for each area are returned separately. Note that the result can be aggregated only if all requested Capacity Areas have same quota configuration type (e.g., time-slot based or based on intervals). If aggregation is requested for mixed types in one request, the error will be returned. The default value is <b>false</b>.',
            ),
            EndpointParameter(
                name='categoryLevel',
                location='query',
                type='boolean',
                required=False,
                description='This parameter indicates if the qouta information from the Capacity Category level should be returned. It can be used for areas configured with time-slot based quota and with quota by intervals. The default value is <b>false</b>.',
            ),
            EndpointParameter(
                name='intervalLevel',
                location='query',
                type='boolean',
                required=False,
                description='This parameter indicates if the qouta information from the Intervals level should be returned. It can be used for areas configured with quota by intervals. The default value is <b>false</b>.',
            ),
            EndpointParameter(
                name='timeSlotLevel',
                location='query',
                type='boolean',
                required=False,
                description='This parameter indicates if the qouta information from the Time Slots level should be returned. It can be used for areas configured with time-slot based quota. The default value is <b>false</b>.',
            ),
            EndpointParameter(
                name='returnStatuses',
                location='query',
                type='boolean',
                required=False,
                description='This parameter indicates if the information about the quota statuses at various levels should be returned. The default value is <b>false</b>.',
            ),
        ],
        request_body_schema=None,
        response_schema='v2-quota-result',
        implemented_in='capacity_api.py:CapacityAPI.get_quota_v2()',
        signature='async def get_quota_v2(self, dates: List[str], areas: Optional[List[str]] = None, categories: Optional[List[str]] = None, aggregateResults: Optional[bool] = None, categoryLevel: Optional[bool] = None, intervalLevel: Optional[bool] = None, returnStatuses: Optional[bool] = None, timeSlotLevel: Optional[bool] = None) -> GetQuotaV2Response',
        rate_limits=None,
    ),
    EndpointInfo(
        id=241,
        path='/rest/ofscCapacity/v2/quota',
        method='PATCH',
        module='capacity',
        summary='Create or update quota',
        description='The function allows to modify the quota information for set of days on different quota levels - Capacity Areas, Capacity Categories, Time slots or Intervals. The quota values can be retreived from various levels accordingly to the quota type configuration of each particular Capacity Area.',
        operation_id='patch quota (v2)',
        tags=['Capacity/Quota/v2'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='v2-patch-quota',
        response_schema='v2-patch-quota-result',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
    EndpointInfo(
        id=242,
        path='/rest/ofscCapacity/v1/showBookingGrid',
        method='POST',
        module='capacity',
        summary='Show booking grid',
        description='This operation retrieves the booking grid for booking an activity.<b>Overview</b>This operation retrieves the time slots in which the activity can be performed. The following points are considered while booking an activity within the time slots:<ul><li>The booking quota is available for the category and for the day.</li><li>The booking is not closed for the category, time frame, and work zone.</li><li>The workforce is available to perform the activity.</li></ul>The function may provide recommendations to select more preferable time-slots for activity booking that reduce overall travel expenses.To get the recommendations in the response:<ul><li>Enable this ability in the capacity area configuration.</li><li>Ensure that, in the request, you include enough information that the application uses to calculate the distances / travel to other activities. This is the latitude and longitude fields for booking by Capacity / Quota, or the fields configured as the activity travel key in case of direct assignment booking.</li></ul>For more information about booking recommendations, see the <i>Booking Recommendations</i> chapter in the <i>Using Capacity Service guide</i>.',
        operation_id='post_showBookingGrid',
        tags=['Capacity/Booking'],
        required_parameters=[
        ],
        optional_parameters=[
        ],
        request_body_schema='showBookingGridSchema',
        response_schema='showBookingGrid',
        implemented_in='',
        signature='',
        rate_limits=None,
    ),
]


# Utility functions for endpoint lookup and filtering

def get_endpoint_by_id(endpoint_id: int) -> Optional[EndpointInfo]:
    """Get endpoint by ID."""
    for endpoint in ENDPOINTS:
        if endpoint.id == endpoint_id:
            return endpoint
    return None


def get_endpoints_by_path(path: str) -> List[EndpointInfo]:
    """Get all endpoints for a specific path."""
    return [ep for ep in ENDPOINTS if ep.path == path]


def get_endpoints_by_method(method: str) -> List[EndpointInfo]:
    """Get all endpoints for a specific HTTP method."""
    method = method.upper()
    return [ep for ep in ENDPOINTS if ep.method == method]


def get_endpoints_by_module(module: str) -> List[EndpointInfo]:
    """Get all endpoints for a specific module."""
    return [ep for ep in ENDPOINTS if ep.module == module]


def get_endpoints_by_tag(tag: str) -> List[EndpointInfo]:
    """Get all endpoints with a specific tag."""
    return [ep for ep in ENDPOINTS if tag in ep.tags]


def find_endpoint(method: str, path: str) -> Optional[EndpointInfo]:
    """Find endpoint by method and path."""
    method = method.upper()
    for endpoint in ENDPOINTS:
        if endpoint.method == method and endpoint.path == path:
            return endpoint
    return None


# Indexes by module
ENDPOINTS_BY_MODULE: Dict[str, List[EndpointInfo]] = {}
for endpoint in ENDPOINTS:
    if endpoint.module not in ENDPOINTS_BY_MODULE:
        ENDPOINTS_BY_MODULE[endpoint.module] = []
    ENDPOINTS_BY_MODULE[endpoint.module].append(endpoint)

# Indexes by method
ENDPOINTS_BY_METHOD: Dict[str, List[EndpointInfo]] = {}
for endpoint in ENDPOINTS:
    if endpoint.method not in ENDPOINTS_BY_METHOD:
        ENDPOINTS_BY_METHOD[endpoint.method] = []
    ENDPOINTS_BY_METHOD[endpoint.method].append(endpoint)

# Summary statistics
TOTAL_ENDPOINTS = len(ENDPOINTS)
ENDPOINTS_COUNT_BY_MODULE = {module: len(endpoints) for module, endpoints in ENDPOINTS_BY_MODULE.items()}
ENDPOINTS_COUNT_BY_METHOD = {method: len(endpoints) for method, endpoints in ENDPOINTS_BY_METHOD.items()}
