"""
OFSC API Models Registry

This module provides a comprehensive registry of all Oracle Field Service Cloud (OFSC) API model schemas
parsed from the swagger.json specification. It includes model metadata, properties, relationships,
endpoint usage, and Pydantic model mappings.

Generated automatically from swagger.json - DO NOT EDIT MANUALLY
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass


@dataclass
class ModelProperty:
    """Represents a property of a model schema."""
    name: str
    type: str
    description: str
    required: bool
    format: Optional[str] = None
    enum: Optional[List[str]] = None
    min_length: Optional[int] = None
    max_length: Optional[int] = None
    minimum: Optional[int] = None
    maximum: Optional[int] = None
    items: Optional[Dict[str, Any]] = None  # For arrays
    ref: Optional[str] = None  # For object references
    default: Optional[Any] = None


@dataclass 
class ModelInfo:
    """Represents complete model schema information."""
    name: str
    description: str
    properties: List[ModelProperty]
    required_properties: List[str]
    inheritance: List[str]  # allOf references
    used_in_endpoints: List[str]  # endpoint paths that use this schema
    used_in_request_endpoints: List[str]  # endpoints using this as request body
    used_in_response_endpoints: List[str]  # endpoints using this as response
    mapped_pydantic_class: Optional[str]
    module: str  # core, metadata, capacity, etc.
    schema_type: str  # object, array, etc.
    examples: List[Dict[str, Any]]
    nested_models: List[str]  # Other models referenced by this model
    parent_models: List[str]  # Models that reference this model


# All models from swagger.json definitions
MODELS: Dict[str, ModelInfo] = {
    "ActivityTypeGroups": ModelInfo(
        name='ActivityTypeGroups',
        description='The collection of activity type groups.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'ActivityTypeGroup'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of activity type groups in the collection.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/activityTypeGroups'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/activityTypeGroups'],
        mapped_pydantic_class='ActivityTypeGroup',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ActivityTypeGroup'],
        parent_models=[],
    ),
    "ActivityTypeGroupForPut": ModelInfo(
        name='ActivityTypeGroupForPut',
        description='The object representing group activity types.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the activity type group.',
                required=False,
                min_length=1,
                max_length=32,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The array of translation objects associated with the activity type group.',
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/activityTypeGroups/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/activityTypeGroups/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['ActivityTypeGroup'],
    ),
    "ActivityTypeGroup": ModelInfo(
        name='ActivityTypeGroup',
        description='',
        properties=[
            ModelProperty(
                name='activityTypes',
                type='array',
                description='The array of activity type objects associated with the activity type group.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=['ActivityTypeGroupForPut'],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/activityTypeGroups/{label}', 'PUT /rest/ofscMetadata/v1/activityTypeGroups/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/activityTypeGroups/{label}', 'PUT /rest/ofscMetadata/v1/activityTypeGroups/{label}'],
        mapped_pydantic_class='ActivityTypeGroup',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ActivityTypeGroupForPut'],
        parent_models=['ActivityTypeGroups'],
    ),
    "ActivityTypes": ModelInfo(
        name='ActivityTypes',
        description='The collection of activity types. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'ActivityType'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of activity type records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/activityTypes'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/activityTypes'],
        mapped_pydantic_class='ActivityType',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ActivityType'],
        parent_models=[],
    ),
    "ActivityType": ModelInfo(
        name='ActivityType',
        description='The activity type object.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique label assigned to the activity type. For example, IN (Install).',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the name of the activity type.If the language parameter is specified, then the name is provided in that language.If the language parameter is not specified, then the name is provided in English, unless the request is performed using an Oracle Field Service user account which is linked to an API application (in this case, the name is provided in the language of the user making the request).',
                required=True,
                min_length=1,
                max_length=32,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the activity type is listed as a possible value in the 'Activity Type' drop-down list in Manage or Mobility apps while creating an activity. If false, then the activity type is not listed as a value in the drop-down list.  The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='groupLabel',
                type='string',
                description='The label of the activity type group.',
                required=False,
            ),
            ModelProperty(
                name='features',
                type='object',
                description='The set of boolean attributes that define the active features for the activity type.',
                required=False,
            ),
            ModelProperty(
                name='colors',
                type='object',
                description='The set of color values for the corresponding status of the activity.',
                required=False,
            ),
            ModelProperty(
                name='timeSlots',
                type='array',
                description='The collection of time slots.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='segmentMinDuration',
                type='integer',
                description='The minimum duration of a single segment created for a particular day, for segmentable activities, in minutes. It is returned if the value of isSegmentingEnabled is set to true. Allowed values are: 15,30,45,60,90,120,180,240,300,360,420,480,540,600,660,720,780,840,900',
                required=False,
                enum=[15, 30, 45, 60, 90, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900],
            ),
            ModelProperty(
                name='segmentMaxDuration',
                type='integer',
                description='The maximum total duration of segments created for a particular day, for segmentable activities, in minutes. It is returned if the value of isSegmentingEnabled is set to true. Allowed values are: 15,30,45,60,90,120,180,240,300,360,420,480,540,600,660,720,780,840,900',
                required=False,
                enum=[15, 30, 45, 60, 90, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900],
            ),
            ModelProperty(
                name='defaultDuration',
                type='integer',
                description='The default duration of the activity type. It is used while creating an activity and when no statistics are available for the activity.',
                required=True,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of translations associated with the name of the activity type. The list is only returned if the language parameter is not specified in the request.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'name', 'active', 'translations', 'defaultDuration'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/activityTypes/{label}', 'PUT /rest/ofscMetadata/v1/activityTypes/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/activityTypes/{label}', 'PUT /rest/ofscMetadata/v1/activityTypes/{label}'],
        mapped_pydantic_class='ActivityType',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['ActivityTypes'],
    ),
    "CreateActivityTypeSchema": ModelInfo(
        name='CreateActivityTypeSchema',
        description='The activity type object.',
        properties=[
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the activity type is listed as a possible value in the 'Activity Type' drop-down list in Manage or Mobility apps while creating an activity. If false, then the activity type is not listed as a value in the drop-down list. The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='features',
                type='object',
                description='The set of boolean attributes that define the active features for the activity type.',
                required=False,
            ),
            ModelProperty(
                name='colors',
                type='object',
                description='The set of color values for the corresponding status of the activity.',
                required=False,
            ),
            ModelProperty(
                name='timeSlots',
                type='array',
                description='The collection of time slots.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='segmentMinDuration',
                type='integer',
                description='The minimum duration of a single segment created for a particular day, for segmentable activities, in minutes. It is returned if the value of isSegmentingEnabled is set to true. Allowed values are: 15,30,45,60,90,120,180,240,300,360,420,480,540,600,660,720,780,840,900',
                required=False,
                enum=[15, 30, 45, 60, 90, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900],
            ),
            ModelProperty(
                name='segmentMaxDuration',
                type='integer',
                description='The maximum total duration of segments created for a particular day, for segmentable activities, in minutes. It is returned if the value of isSegmentingEnabled is set to true. Allowed values are: 15,30,45,60,90,120,180,240,300,360,420,480,540,600,660,720,780,840,900',
                required=False,
                enum=[15, 30, 45, 60, 90, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900],
            ),
            ModelProperty(
                name='groupLabel',
                type='string',
                description='The label of the activity type group.',
                required=True,
            ),
            ModelProperty(
                name='defaultDuration',
                type='integer',
                description='The default duration of the activity type. It is used while creating an activity and when no statistics are available for the activity.',
                required=True,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of translations associated with the name of the activity type. The list is only returned if the language parameter is not specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'active', 'groupLabel', 'defaultDuration'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/activityTypes/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/activityTypes/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=[],
    ),
    "Applications": ModelInfo(
        name='Applications',
        description='The schema of the applications.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'Application'},
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Indicates whether there are more results that can be retrieved with successive paging requests. If the value is true, then there are more results that can be retrieved with successive paging requests. If the value is false or is absent, then there are no more results or this is the final page.',
                required=False,
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the applications in the collection.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the limit was not specified or not accepted, the value defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/applications'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/applications'],
        mapped_pydantic_class='Application',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Application'],
        parent_models=[],
    ),
    "ApplicationApiAccesses": ModelInfo(
        name='ApplicationApiAccesses',
        description='The schema of API access objects.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccess'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}/apiAccess'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}/apiAccess'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ApplicationApiAccess'],
        parent_models=[],
    ),
    "CreateApplicationSchema": ModelInfo(
        name='CreateApplicationSchema',
        description='',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='The name of the application.',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the application.',
                required=True,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='tokenService',
                type='string',
                description='The token service used by the application.',
                required=True,
                enum=['ofsc', 'external', 'idcs'],
            ),
            ModelProperty(
                name='resourcesToAllow',
                type='array',
                description='The resourceInternalIds and resourceIds (external IDs) of resources accessible to the application. The parameter includes all the children of a specified resource. If the resourceInternalIds and resourceIds (external IDs) of resources are not specified, then the parameter allows the application to access the root resource. If both resourceId and resourceInternalId are used in the request parameter, then the application considers the resourceID (unless it is empty).',
                required=True,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='IPAddressesToAllow',
                type='array',
                description='The IP addresses accessible to the application. If no IP address is specified, then all IP addresses are accessible.',
                required=True,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='allowedCorsDomains',
                type='array',
                description='The list of origin domains which are allowed to send requests to Oracle Field Service REST API. The max size of a value is 1020 symbols or 100 domain entries.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=['name', 'status', 'tokenService', 'resourcesToAllow', 'IPAddressesToAllow'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/applications/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/applications/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "Application": ModelInfo(
        name='Application',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the application.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the application.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the application.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='tokenService',
                type='string',
                description='The token service used by the application.',
                required=False,
                enum=['ofsc', 'external', 'idcs'],
            ),
            ModelProperty(
                name='resourcesToAllow',
                type='array',
                description='The specified resourceInternalIds and resourceIds (external IDs) of resources accessible to the application. The parameter includes all the children of the specified resource. If the resourceInternalIds and resourceIds (external IDs) of resources are not specified, then the application accesses the root resource. If resourceId and resourceInternalId are used in the request parameter, then the application considers the resourceID (unless it is empty).',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='IPAddressesToAllow',
                type='array',
                description='The specified IP addresses accessible to the application. If no IP address is specified, then all IP addresses are accessible.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='allowedCorsDomains',
                type='array',
                description='The list of origin domains which are allowed to send requests to Oracle Field Service REST API. The max size of a value is 1020 symbols or 100 domain entries.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}', 'PUT /rest/ofscMetadata/v1/applications/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}', 'PUT /rest/ofscMetadata/v1/applications/{label}'],
        mapped_pydantic_class='Application',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['Applications'],
    ),
    "ApplicationApiAccess": ModelInfo(
        name='ApplicationApiAccess',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the API access object.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the API access object.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the API access object.',
                required=False,
                enum=['active', 'inactive'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ApplicationApiAccess',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ApplicationApiAccesses'],
    ),
    "ApiConfiguration": ModelInfo(
        name='ApiConfiguration',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the API.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the API.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status set for the application.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='apiMethods',
                type='array',
                description='The methods Capacity API specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessMethod'},
            ),
            ModelProperty(
                name='apiEntities',
                type='array',
                description='The entities of Core API or Metadata API specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessEntity'},
            ),
            ModelProperty(
                name='activityFields',
                type='array',
                description='The activity fields of the Inbound API specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='inventoryFields',
                type='array',
                description='The inventory fields of the Inbound Interface API specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='providerFields',
                type='array',
                description='The provider fields of the Inbound Interface API specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='userFields',
                type='array',
                description='Not used. The user fields visibility is not applicable for any API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContextUser'},
            ),
            ModelProperty(
                name='requestFields',
                type='array',
                description='Not used. The request fields visibility is not applicable for any API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ApplicationApiAccessEntity', 'ApplicationApiAccessContextUser', 'ApplicationApiAccessMethod', 'ApplicationApiAccessContext'],
        parent_models=[],
    ),
    "ApiConfigurationPatch": ModelInfo(
        name='ApiConfigurationPatch',
        description='',
        properties=[
            ModelProperty(
                name='status',
                type='string',
                description='The status of the application.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='apiMethods',
                type='array',
                description='The methods of the API that are assigned to the application. The API Method fields are only applicable for Capacity API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessMethod'},
            ),
            ModelProperty(
                name='apiEntities',
                type='array',
                description='The entities of the API that are assigned to the application. The API Entities fields are only applicable for Core API and Metadata API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessEntity'},
            ),
            ModelProperty(
                name='activityFields',
                type='array',
                description='The activity fields of the API that are assigned to the application. The activity fields are only available for Inbound API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='inventoryFields',
                type='array',
                description='The inventory fields of the API that are assigned to the application. The inventory fields are only applicable for Inbound Interface API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='providerFields',
                type='array',
                description='The provider fields of the API that are assigned to the application. The provider fields are only applicable for Inbound Interface API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
            ModelProperty(
                name='userFields',
                type='array',
                description='The user fields are not applicable for any API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContextUser'},
            ),
            ModelProperty(
                name='requestFields',
                type='array',
                description='The request fields are not applicable for any API.',
                required=False,
                items={'type': 'unknown', '$ref': 'ApplicationApiAccessContext'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}', 'PATCH /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}'],
        used_in_request_endpoints=['PATCH /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}'],
        used_in_response_endpoints=['PATCH /rest/ofscMetadata/v1/applications/{label}/apiAccess/{apiLabel}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ApplicationApiAccessEntity', 'ApplicationApiAccessContextUser', 'ApplicationApiAccessMethod', 'ApplicationApiAccessContext'],
        parent_models=[],
    ),
    "ApplicationApiAccessContext": ModelInfo(
        name='ApplicationApiAccessContext',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the activity property.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='visibilities',
                type='array',
                description='The visibility settings for each field.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='valuesVisibility',
                type='array',
                description='The visibility settings for each property.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ApplicationApiAccessContext',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['ApplicationApiAccessContextConditions'],
        parent_models=['ApiConfiguration', 'ApiConfigurationPatch'],
    ),
    "ApplicationApiAccessContextUser": ModelInfo(
        name='ApplicationApiAccessContextUser',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the user property.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='visibilities',
                type='array',
                description='',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ApiConfiguration', 'ApiConfigurationPatch'],
    ),
    "ApplicationApiAccessContextConditions": ModelInfo(
        name='ApplicationApiAccessContextConditions',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=[],
        parent_models=['ApplicationApiAccessContext'],
    ),
    "ApplicationApiAccessEntity": ModelInfo(
        name='ApplicationApiAccessEntity',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the entity.',
                required=False,
                min_length=1,
                max_length=80,
            ),
            ModelProperty(
                name='access',
                type='string',
                description='The visibility set for the entity.',
                required=False,
                enum=['ReadOnly', 'ReadWrite', 'Hidden'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ApplicationApiAccessEntity',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ApiConfiguration', 'ApiConfigurationPatch'],
    ),
    "ApplicationApiAccessMethod": ModelInfo(
        name='ApplicationApiAccessMethod',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the API method.',
                required=False,
                min_length=1,
                max_length=80,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the API method.',
                required=False,
                enum=['on', 'off'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ApplicationApiAccessMethod',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ApiConfiguration', 'ApiConfigurationPatch'],
    ),
    "ApplicationClientSecret": ModelInfo(
        name='ApplicationClientSecret',
        description='',
        properties=[
            ModelProperty(
                name='clientSecret',
                type='string',
                description='Client secret of an application',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/applications/{label}/custom-actions/generateClientSecret'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscMetadata/v1/applications/{label}/custom-actions/generateClientSecret'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "Error": ModelInfo(
        name='Error',
        description='',
        properties=[
            ModelProperty(
                name='type',
                type='string',
                description='The URL of the web page containing more details about this error.',
                required=True,
            ),
            ModelProperty(
                name='title',
                type='string',
                description='The brief description of this error.',
                required=True,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The HTTP status code of this error.',
                required=True,
            ),
            ModelProperty(
                name='detail',
                type='string',
                description='The detailed description of this error.',
                required=True,
            ),
        ],
        required_properties=['type', 'title', 'status', 'detail'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bulkUpdateWorkSchedulesResponseSchema', 'bulkUpdateWorkSkillsResponseSchema', 'bulkUpdateWorkZonesResponseSchema', 'bulkUpdateResourceInventoriesResponseResultSchema'],
    ),
    "CapacityAreas": ModelInfo(
        name='CapacityAreas',
        description='The collection of capacity areas.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'CapacityArea'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas', 'GET /rest/ofscMetadata/v1/capacityAreas/{label}/children'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas', 'GET /rest/ofscMetadata/v1/capacityAreas/{label}/children'],
        mapped_pydantic_class='CapacityArea',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['CapacityArea'],
        parent_models=[],
    ),
    "CapacityArea": ModelInfo(
        name='CapacityArea',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the capacity area or the capacity area group.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the capacity area specified in the request.',
                required=False,
                enum=['group', 'area'],
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the capacity area or the capacity area group in the user's language.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the capacity area or the capacity area group specified in the request.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='parent',
                type='object',
                description='The details of the parent capacity area. The Parent value is returned, if the value is specified in the Expand parameter. The value is not returned when:<ul><li> The capacity area or capacity area group is located at the top level of the hierarchy.</li><li>The value is not visible for the current user.</li></ul>',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='CapacityArea',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['CapacityAreas'],
    ),
    "CapacityAreaConfiguration": ModelInfo(
        name='CapacityAreaConfiguration',
        description='The schema of the capacity area object.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the capacity area.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the capacity area in the user's language.",
                required=False,
            ),
            ModelProperty(
                name='parentLabel',
                type='string',
                description='The label of the parent group.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the capacity area.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='type',
                type='string',
                description='',
                required=False,
                enum=['group', 'area'],
            ),
            ModelProperty(
                name='configuration',
                type='object',
                description='The configuration of the capacity area.',
                required=False,
            ),
            ModelProperty(
                name='capacityCategories',
                type='object',
                description='The capacity categories assigned to the capacity area. The capacity categories are not retrieved for a capacity area group.',
                required=False,
            ),
            ModelProperty(
                name='timeSlots',
                type='object',
                description='The time slots assigned to the capacity area. The time slots are not retrieved for a capacity area group.',
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='object',
                description='The work zones assigned to the capacity area. The work zones are not retrieved for a capacity area group.',
                required=False,
            ),
            ModelProperty(
                name='timeIntervals',
                type='object',
                description='The time intervals assigned to the capacity area. The time intervals are not retrieved for a capacity area group.',
                required=False,
            ),
            ModelProperty(
                name='organizations',
                type='object',
                description='The organizations assigned to the capacity area. The organizations are not retrieved for a capacity area group.',
                required=False,
            ),
            ModelProperty(
                name='children',
                type='object',
                description='The capacity areas assigned to the capacity area group. The child capacity areas are always returned for a capacity area group.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}'],
        mapped_pydantic_class='CapacityAreaConfiguration',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "AreaCapacityCategories": ModelInfo(
        name='AreaCapacityCategories',
        description='The collection of capacity categories.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaCapacityCategory'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/capacityCategories'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/capacityCategories'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaCapacityCategory'],
        parent_models=[],
    ),
    "AreaCapacityCategory": ModelInfo(
        name='AreaCapacityCategory',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the capacity category.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the capacity category in the user's language.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the capacity category.',
                required=False,
                enum=['active', 'inactive'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaCapacityCategories'],
    ),
    "AreaWorkZones": ModelInfo(
        name='AreaWorkZones',
        description='The collection of work zones.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaWorkZone'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v2/capacityAreas/{label}/workZones'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v2/capacityAreas/{label}/workZones'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaWorkZone'],
        parent_models=[],
    ),
    "AreaWorkZonesOld": ModelInfo(
        name='AreaWorkZonesOld',
        description='The collection of work zones.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaWorkZoneOld'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/workZones'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/workZones'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaWorkZoneOld'],
        parent_models=[],
    ),
    "AreaWorkZone": ModelInfo(
        name='AreaWorkZone',
        description='',
        properties=[
            ModelProperty(
                name='workZoneLabel',
                type='string',
                description='The label of the work zone.',
                required=False,
            ),
            ModelProperty(
                name='workZoneName',
                type='string',
                description='The name of the work zone.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaWorkZones'],
    ),
    "AreaWorkZoneOld": ModelInfo(
        name='AreaWorkZoneOld',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The name of the work zone.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaWorkZonesOld'],
    ),
    "AreaTimeSlots": ModelInfo(
        name='AreaTimeSlots',
        description='The collection of time slots.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaTimeSlot'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/timeSlots'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/timeSlots'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaTimeSlot'],
        parent_models=[],
    ),
    "AreaTimeSlot": ModelInfo(
        name='AreaTimeSlot',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the time slot.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the time slot in the user's language.",
                required=False,
            ),
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time slot.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time slot.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaTimeSlots'],
    ),
    "AreaTimeIntervals": ModelInfo(
        name='AreaTimeIntervals',
        description='The collection of time intervals.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaTimeInterval'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/timeIntervals'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/timeIntervals'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaTimeInterval'],
        parent_models=[],
    ),
    "AreaTimeInterval": ModelInfo(
        name='AreaTimeInterval',
        description='',
        properties=[
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time interval.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time interval.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaTimeIntervals'],
    ),
    "AreaOrganizations": ModelInfo(
        name='AreaOrganizations',
        description='The collection of organizations.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'AreaOrganization'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/organizations'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityAreas/{label}/organizations'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['AreaOrganization'],
        parent_models=[],
    ),
    "AreaOrganization": ModelInfo(
        name='AreaOrganization',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the organization.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the organization in the user's language.",
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the organization.',
                required=False,
                enum=['contractor', 'inhouse'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AreaOrganizations'],
    ),
    "CapacityCategories": ModelInfo(
        name='CapacityCategories',
        description='The collection of capacity categories.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'CapacityCategory'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of capacity categories in the response.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is greater than 100, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/capacityCategories'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityCategories'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['CapacityCategory'],
        parent_models=[],
    ),
    "CapacityCategory": ModelInfo(
        name='CapacityCategory',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the capacity category. The label is returned by the GET operation and is ignored in the PUT operation.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the capacity category in the user's language. The name is returned by the GET operation and is ignored in the PUT operation.",
                required=False,
                min_length=1,
                max_length=5000,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then the active capacity categories are returned. If false, then the inactive capacity categories are returned. The default value is true.',
                required=True,
            ),
            ModelProperty(
                name='workSkills',
                type='array',
                description='The array of work skill objects. It is optional for the PUT operation.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='workSkillGroups',
                type='array',
                description='The array of work skill group objects. It is optional for the PUT operation.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='timeSlots',
                type='array',
                description='The array of time slots objects. It is optional for the PUT operation.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of translations associated with the name of the capacity category.<ul><li>The translations parameter is required in the PUT method for creating a capacity category, but the parameter is optional for updating a capacity category.</li><li>If the parameter is not specified, then the translations in the response are not changed.</li><li>The translation for the 'name' attribute must not be empty atleast for the default language.</li></ul>",
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['active'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/capacityCategories/{label}', 'GET /rest/ofscMetadata/v1/capacityCategories/{label}', 'PUT /rest/ofscMetadata/v1/capacityCategories/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/capacityCategories/{label}'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/capacityCategories/{label}', 'PUT /rest/ofscMetadata/v1/capacityCategories/{label}'],
        mapped_pydantic_class='CapacityCategoryResponse',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['CapacityCategories'],
    ),
    "Forms": ModelInfo(
        name='Forms',
        description='The collection of forms. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of forms.',
                required=False,
                items={'type': 'unknown', '$ref': 'Form'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of form records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/forms'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/forms'],
        mapped_pydantic_class='Form',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Form'],
        parent_models=[],
    ),
    "Form": ModelInfo(
        name='Form',
        description='The form entity in the Oracle Field Service application.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the form.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation of the name of the form to the specified language.',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of associated translations that is returned for the name of the form. The list is only returned if the language parameter is not specified in the request.',
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'name'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='Form',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['Forms', 'FormDetails'],
    ),
    "FormContent": ModelInfo(
        name='FormContent',
        description='The specified form content in JSON string format.',
        properties=[
            ModelProperty(
                name='content',
                type='string',
                description='The JSON string that describes the form content.',
                required=True,
            ),
        ],
        required_properties=['content'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['FormDetails', 'FormBody'],
    ),
    "FormDetails": ModelInfo(
        name='FormDetails',
        description='The schema of the response body object for this operation.',
        properties=[
        ],
        required_properties=[],
        inheritance=['Form', 'FormContent'],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/forms/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/forms/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Form', 'FormContent'],
        parent_models=['FormDetailsWithStats'],
    ),
    "FormDetailsWithStats": ModelInfo(
        name='FormDetailsWithStats',
        description='The list of errors and warnings that occured while creating or updating the form.',
        properties=[
            ModelProperty(
                name='warnings',
                type='array',
                description='The list of warnings that occurred while saving the form.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=['FormDetails'],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/forms/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PUT /rest/ofscMetadata/v1/forms/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['FormDetails'],
        parent_models=[],
    ),
    "FormBody": ModelInfo(
        name='FormBody',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='translations',
                type='array',
                description="The list of translations associated with the name of the form. The list is only returned if the language parameter is not specified in the request.\n<ul><li>The translations parameter is required for creating a form, but the parameter is optional for updating a form.</li><li>If the parameter is not specified, then the translations in the response are not changed.</li>\n<li>If the parameter is present in the request, then the 'name' attribute is required for English and the attribute cannot be empty.</li><li>All the translations for the name of the form are replaced in the request.</li></ul>",
                required=False,
                items={'type': 'unknown', '$ref': 'FormBodyTranslationParam'},
            ),
        ],
        required_properties=[],
        inheritance=['FormContent'],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/forms/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/forms/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['FormContent', 'FormBodyTranslationParam'],
        parent_models=[],
    ),
    "FormBodyTranslationParam": ModelInfo(
        name='FormBodyTranslationParam',
        description='',
        properties=[
            ModelProperty(
                name='language',
                type='string',
                description="The ISO language code (for example, 'en-US').",
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the form.',
                required=True,
                min_length=1,
                max_length=255,
            ),
        ],
        required_properties=['language', 'name'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['FormBody'],
    ),
    "InventoryTypes": ModelInfo(
        name='InventoryTypes',
        description='An array of the inventory type records in the collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'InventoryType'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the inventory type records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/inventoryTypes'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/inventoryTypes'],
        mapped_pydantic_class='InventoryType',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['InventoryType'],
        parent_models=[],
    ),
    "InventoryType": ModelInfo(
        name='InventoryType',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Inventory type label.',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the name of the inventory type. If the value of the language parameter is specified, then the name is provided in the specified language. If the value is not specified, then the name is provided in English. Minimum Length: 1, Maximum Length: 40.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='unitOfMeasurement',
                type='string',
                description='The translation for the unit of measurement of the inventory type. If the value of the language parameter is specified, then the unit of measurement is provided the specified language. If the value is not specified, then the unit of measurement is provided in English. This attribute is used only for non-serialized inventory.',
                required=False,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Indicates whether the inventory type is valid for creating an inventory. If the value is true, then the inventory type is listed as a possible value in the 'Inventory Type' drop-down list in Manage or Mobility apps while creating an inventory. If the value is false, then the inventory type is not listed as a value in the drop-down list.",
                required=True,
            ),
            ModelProperty(
                name='nonSerialized',
                type='boolean',
                description="Indicates whether the inventory is serialized. If the value is true, then the inventory is serialized, that is, it has a serial number. If the value is false, then the inventory is non-serialized, that is, it doesn't have a serial number.",
                required=True,
            ),
            ModelProperty(
                name='modelProperty',
                type='string',
                description='Label of an inventory property which is used to identify model of this inventory.',
                required=False,
            ),
            ModelProperty(
                name='quantityPrecision',
                type='integer',
                description="Number of digits after decimal point of the quantity for non-serialized inventory . '0' value means that the quantity doesn't have a fractional part.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of translations associated with the name and unit of measurement of the inventory type. The list is only returned if the language parameter is not specified in the request.\nlanguage: string - The language code of the translated text. The code in the response is two characters long. For example, 'en', 'es'.",
                required=True,
                items={'type': 'unknown', '$ref': 'TranslationInvType'},
            ),
        ],
        required_properties=['label', 'name', 'active', 'nonSerialized', 'translations'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        mapped_pydantic_class='InventoryType',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TranslationInvType'],
        parent_models=['InventoryTypes'],
    ),
    "CreateInventoryTypeSchema": ModelInfo(
        name='CreateInventoryTypeSchema',
        description='The inventory type object.',
        properties=[
            ModelProperty(
                name='active',
                type='boolean',
                description="Indicates whether the inventory type is valid for creating an inventory. If the value is true, then the inventory type is listed as a possible value in the 'Inventory Type' drop-down list in Manage or Mobility apps while creating an inventory. If the value is false, then the inventory type is not listed as a value in the drop-down list.",
                required=True,
            ),
            ModelProperty(
                name='nonSerialized',
                type='boolean',
                description="Indicates whether the inventory is serialized. If the value is true, then the inventory is serialized, that is, it has a serial number. If the value is false, then the inventory is non-serialized, that is, it doesn't have a serial number.",
                required=True,
            ),
            ModelProperty(
                name='modelProperty',
                type='string',
                description='Label of an inventory property which is used to identify model of this inventory. Note that this field cannot be changed after it is set with inventory type creation.',
                required=False,
            ),
            ModelProperty(
                name='quantityPrecision',
                type='integer',
                description="Number of digits after decimal point of the quantity for non-serialized inventory . '0' value means that the quantity doesn't have a fractional part.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of translations associated with the name and unit of measurement of the inventory type. The list is only returned if the language parameter is not specified in the request.\nlanguage: string - The language code of the translated text. The code in the response is two characters long. For example, 'en', 'es'.",
                required=True,
                items={'type': 'unknown', '$ref': 'TranslationInvType'},
            ),
        ],
        required_properties=['active', 'nonSerialized', 'translations'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TranslationInvType'],
        parent_models=[],
    ),
    "ResponseCreateInventoryTypeSchema": ModelInfo(
        name='ResponseCreateInventoryTypeSchema',
        description='The inventory type object.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Inventory type label.',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the name of the inventory type. If the value of the language parameter is specified, then the name is provided in the specified language. If the value is not specified, then the name is provided in English. Minimum Length: 1, Maximum Length: 40.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='unitOfMeasurement',
                type='string',
                description='The translation for the unit of measurement of the inventory type. If the value of the language parameter is specified, then the unit of measurement is provided the specified language. If the value is not specified, then the unit of measurement is provided in English. This attribute is used only for non-serialized inventory.',
                required=False,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Indicates whether the inventory type is valid for creating an inventory. If the value is true, then the inventory type is listed as a possible value in the 'Inventory Type' drop-down list in Manage or Mobility apps while creating an inventory. If the value is false, then the inventory type is not listed as a value in the drop-down list.",
                required=True,
            ),
            ModelProperty(
                name='nonSerialized',
                type='boolean',
                description="Indicates whether the inventory is serialized. If the value is true, then the inventory is serialized, that is, it has a serial number. If the value is false, then the inventory is non-serialized, that is, it doesn't have a serial number.",
                required=True,
            ),
            ModelProperty(
                name='modelProperty',
                type='string',
                description='Label of an inventory property which is used to identify model of this inventory.',
                required=False,
            ),
            ModelProperty(
                name='quantityPrecision',
                type='integer',
                description="Number of digits after decimal point of the quantity for non-serialized inventory . '0' value means that the quantity doesn't have a fractional part.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of translations associated with the name and unit of measurement of the inventory type. The list is only returned if the language parameter is not specified in the request.\nlanguage: string - The language code of the translated text. The code in the response is two characters long. For example, 'en', 'es'.",
                required=True,
                items={'type': 'unknown', '$ref': 'TranslationInvType'},
            ),
        ],
        required_properties=['active', 'nonSerialized', 'translations', 'label', 'name'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PUT /rest/ofscMetadata/v1/inventoryTypes/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TranslationInvType'],
        parent_models=[],
    ),
    "TranslationInvType": ModelInfo(
        name='TranslationInvType',
        description='',
        properties=[
            ModelProperty(
                name='language',
                type='string',
                description="The language code of the translated text. The code in the response is two characters long (for example, 'en', 'es').See <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a> to view the values that are supported.",
                required=True,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description="The ISO language code. For example, 'en-US'.",
                required=False,
            ),
            ModelProperty(
                name='unitOfMeasurement',
                type='string',
                description='The translation for the unit of measurement of the inventory type. This attribute is used only for non-serialized inventory.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The specified name of the property translated to the language code available in the application.',
                required=True,
            ),
        ],
        required_properties=['language', 'name'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['InventoryType', 'CreateInventoryTypeSchema', 'ResponseCreateInventoryTypeSchema'],
    ),
    "Languages": ModelInfo(
        name='Languages',
        description='The collection of languages.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'Language'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of language records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/languages'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/languages'],
        mapped_pydantic_class='Language',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Language'],
        parent_models=[],
    ),
    "Language": ModelInfo(
        name='Language',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique label assigned to the language code. For example, en.',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the language name. If the language parameter is specified, then the name is provided in that language.If the language parameter is not specified, then the name is provided in English, unless the request is performed using an Oracle Field Service user account which is linked to an API application (in this case, the name is provided in the language of the user making the request).',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.<ul><li>If true, then the activity type is listed as a possible value in the 'Activity Type' drop-down list in the Manage or Mobility apps while creating an activity.</li><li>If false, then the activity type is not listed as a value in the drop-down list.</li></ul>The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The array of associated translations.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'name', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='Language',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['Languages'],
    ),
    "LinkTemplates": ModelInfo(
        name='LinkTemplates',
        description='The collection of link templates. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'LinkTemplate'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of link templates records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/linkTemplates'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/linkTemplates'],
        mapped_pydantic_class='LinkTemplate',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['LinkTemplate'],
        parent_models=[],
    ),
    "LinkTemplate": ModelInfo(
        name='LinkTemplate',
        description='The link template object.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Unique label of the link template. Use this label when adding a link to the the list of links of the "second" activity.\nFor example, label "start_after" should appear in the list of the activity which is expected to be started after another activity. To create the link for the first activity in the pair, use the "reverseLabel" instead.\nThis parameter is mandatory for any link template type. For the symmetrical template type ("simultaneous") it is used as the only label.\nNote that you cannot modify the label using API, the parameter will be ignored in update request.\nMaximum length is 40 characters.',
                required=True,
            ),
            ModelProperty(
                name='reverseLabel',
                type='string',
                description='Unique label of the link template. Use this label when adding a link to the the list of links of the "first" activity.\nFor example, reverseLabel "start_before" should appear in the list of the activity which is expected to be started before another activity.\nThe parameter is mandatory for all link template types except "simultaneous". For the "simultaneous" type it is not needed and it will be ignored in create/update requests.\nNote that you cannot modify the label using API, the parameter will be ignored in update request.\nMaximum length is 40 characters.',
                required=False,
            ),
            ModelProperty(
                name='linkType',
                type='string',
                description='The type of the sequence constraint. This attribute can only be set when the link template is created. This attribute it is not allowed to be modified, it will be ignored in update request.\nAvailable values: [ "finishToStart", "startToStart", "simultaneous", "related" ]',
                required=True,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the link template is available for creating new activity links.',
                required=True,
            ),
            ModelProperty(
                name='minInterval',
                type='string',
                description='The parameter specifies if the minimum time constraint can or cannot be adjusted for a particular link.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nAvailable values: [ "adjustable", "nonAdjustable" ]',
                required=False,
            ),
            ModelProperty(
                name='minIntervalValue',
                type='integer',
                description='The parameter contains a predefined value of the minimum time constraint. This value is used as default for new activity links.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nMaximum allowed value is 30000',
                required=False,
            ),
            ModelProperty(
                name='maxInterval',
                type='string',
                description='The parameter specifies if the maximum time constraint is not used ("unlimited"), if it can or cannot be adjustable for a particular link.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nAvailable values: [ "unlimited", "adjustable", "nonAdjustable" ]',
                required=False,
            ),
            ModelProperty(
                name='maxIntervalValue',
                type='integer',
                description='The parameter contains a predefined value of the maximum time constraint. This value is used as default for new activity links.\nThe parameter is not applicable for the "simultaneous" and  "related" link types.\nThe paramenter is not used if maxInterval is "unlimited".\nMaximum allowed value is 30000.',
                required=False,
            ),
            ModelProperty(
                name='schedulingConstraint',
                type='string',
                description='The parameter specifies the constraint for scheduling the linked activities.\nThe parameter is not applicable for the "simultaneous" link type.\nAvailable values: [ "none", "sameDay", "differentDays" ]',
                required=False,
            ),
            ModelProperty(
                name='assignmentConstraint',
                type='string',
                description='The parameter specifies the constraint for assignment of the linked activities.\nThe parameter is not applicable for the "simultaneous" link type.\nAvailable values: [ "none", "sameResource", "differentResources" ]',
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of associated names for the link as they are displayed in the activity links list. The names of a link are configured separately for the "first" activity and for the "second" activity. Note that the English tranlation is mandatory',
                required=True,
                items={'type': 'unknown', '$ref': 'TranslationLinkTemplates'},
            ),
        ],
        required_properties=['label', 'linkType', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/linkTemplates/{label}', 'POST /rest/ofscMetadata/v1/linkTemplates/{label}', 'PATCH /rest/ofscMetadata/v1/linkTemplates/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/linkTemplates/{label}', 'POST /rest/ofscMetadata/v1/linkTemplates/{label}', 'PATCH /rest/ofscMetadata/v1/linkTemplates/{label}'],
        mapped_pydantic_class='LinkTemplate',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TranslationLinkTemplates'],
        parent_models=['LinkTemplates'],
    ),
    "TranslationLinkTemplates": ModelInfo(
        name='TranslationLinkTemplates',
        description='',
        properties=[
            ModelProperty(
                name='language',
                type='string',
                description="This field contains ISO code of the language (e.g. 'en-US').",
                required=True,
            ),
            ModelProperty(
                name='reverseName',
                type='string',
                description='Name of the link as it is displayed in the list of the "second" activity. (For the "simultaneous" link types this value is not used)',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='Name of the link as it is displayed in the list of the "second" activity. (For the "simultaneous" link types this value is used for displaying in the lists of both activities)',
                required=True,
            ),
        ],
        required_properties=['language', 'name'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['LinkTemplate', 'CreateLinkTemplateSchema'],
    ),
    "CreateLinkTemplateSchema": ModelInfo(
        name='CreateLinkTemplateSchema',
        description='The link template object.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Unique label of the link template. Use this label when adding a link to the the list of links of the "second" activity.\nFor example, label "start_after" should appear in the list of the activity which is expected to be started after another activity. To create the link for the first activity in the pair, use the "reverseLabel" instead.\nThis parameter is mandatory for any link template type. For the symmetrical template type ("simultaneous") it is used as the only label.\nNote that you cannot modify the label using API, the parameter will be ignored in update request.\nMaximum length is 40 characters.',
                required=True,
            ),
            ModelProperty(
                name='reverseLabel',
                type='string',
                description='Unique label of the link template. Use this label when adding a link to the the list of links of the "first" activity.\nFor example, reverseLabel "start_before" should appear in the list of the activity which is expected to be started before another activity.\nThe parameter is mandatory for all link template types except "simultaneous". For the "simultaneous" type it is not needed and it will be ignored in create/update requests.\nNote that you cannot modify the label using API, the parameter will be ignored in update request.\nMaximum length is 40 characters.',
                required=False,
            ),
            ModelProperty(
                name='linkType',
                type='string',
                description='The type of the sequence constraint. This attribute can only be set when the link template is created. This attribute it is not allowed to be modified, it will be ignored in update request.\nAvailable values: [ "finishToStart", "startToStart", "simultaneous", "related" ]',
                required=True,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the link template is available for creating new activity links.',
                required=True,
            ),
            ModelProperty(
                name='minInterval',
                type='string',
                description='The parameter specifies if the minimum time constraint can or cannot be adjusted for a particular link.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nAvailable values: [ "adjustable", "nonAdjustable" ]',
                required=False,
            ),
            ModelProperty(
                name='minIntervalValue',
                type='integer',
                description='The parameter contains a predefined value of the minimum time constraint. This value is used as default for new activity links.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nMaximum allowed value is 30000',
                required=False,
            ),
            ModelProperty(
                name='maxInterval',
                type='string',
                description='The parameter specifies if the maximum time constraint is not used ("unlimited"), if it can or cannot be adjustable for a particular link.\nThe parameter is not applicable for the "simultaneous" and "related" link types.\nAvailable values: [ "unlimited", "adjustable", "nonAdjustable" ]',
                required=False,
            ),
            ModelProperty(
                name='maxIntervalValue',
                type='integer',
                description='The parameter contains a predefined value of the maximum time constraint. This value is used as default for new activity links.\nThe parameter is not applicable for the "simultaneous" and  "related" link types.\nThe paramenter is not used if maxInterval is "unlimited".\nMaximum allowed value is 30000.',
                required=False,
            ),
            ModelProperty(
                name='schedulingConstraint',
                type='string',
                description='The parameter specifies the constraint for scheduling the linked activities.\nThe parameter is only applicable for the "related" link type.\nAvailable values: [ "none", "sameDay", "differentDays" ]',
                required=False,
            ),
            ModelProperty(
                name='assignmentConstraint',
                type='string',
                description='The parameter specifies the constraint for assignment of the linked activities.\nThe parameter is only applicable for the "related" link type.\nAvailable values: [ "none", "sameResource", "differentResources" ]',
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of associated names for the link as they are displayed in the activity links list. The names of a link are configured separately for the "first" activity and for the "second" activity. Note that the English tranlation is mandatory',
                required=True,
                items={'type': 'unknown', '$ref': 'TranslationLinkTemplates'},
            ),
        ],
        required_properties=['label', 'linkType', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/linkTemplates/{label}', 'PATCH /rest/ofscMetadata/v1/linkTemplates/{label}'],
        used_in_request_endpoints=['POST /rest/ofscMetadata/v1/linkTemplates/{label}', 'PATCH /rest/ofscMetadata/v1/linkTemplates/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TranslationLinkTemplates'],
        parent_models=[],
    ),
    "CustomMapLayers": ModelInfo(
        name='CustomMapLayers',
        description='The collection of custom map layers.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of custom map layers. The array is not returned if the collection is empty.',
                required=False,
                items={'type': 'unknown', '$ref': 'CustomMapLayer'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of items in the collection.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The index from which the custom map layers are retrieved.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The maximum number of custom map layers retrieved.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/mapLayers'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/mapLayers'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['CustomMapLayer'],
        parent_models=[],
    ),
    "CustomMapLayer": ModelInfo(
        name='CustomMapLayer',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique identifier of the custom map layer.',
                required=True,
                min_length=1,
                max_length=24,
            ),
            ModelProperty(
                name='type',
                type='string',
                description="The type of the custom map layer. The value can be set to either 'external' or 'internal'.<ul><li>If the value is set to 'external', then the geo data is imported from external source.</li><li>If the value is set to 'internal', then the geo data is in the Oracle Field Service MapViewer, and it need not be imported.</li></ul>",
                required=True,
                enum=['internal', 'external'],
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the custom map layers. The status can be set to either 'active' or 'inactive'.",
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='sourceName',
                type='string',
                description='The name of the external source of the custom map layers. This field is not applicable for the internal custom map layers.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='theme',
                type='string',
                description='The theme name of the external custom map layers. This field is not applicable for the internal custom map layers.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='url',
                type='string',
                description='The URL for the external custom map layers. This field is not applicable for the internal custom map layers.',
                required=False,
                min_length=1,
                max_length=1024,
            ),
            ModelProperty(
                name='text',
                type='string',
                description="The name of the custom map layer in the user's language. This field is returned only by using the GET operation and it is ignored in a PUT or POST operation.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The translations of all the custom map layers. This field is required in a PUT or POST operation. The translation of the 'text' parameter is required for the default language.",
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
            ModelProperty(
                name='shapeTitleColumn',
                type='string',
                description='The name of the column that is selected as the title. This field is returned only if the property is set for the custom map layer.',
                required=False,
            ),
            ModelProperty(
                name='tableColumns',
                type='array',
                description='',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='shapeHintColumns',
                type='array',
                description='',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='shapeHintButton',
                type='object',
                description='The object representing selected Custom Form or Plugin will be displayed as a button on layer hint. Parameters specified in Plugin/Form Field will be sent to the selected Custom Form or Plugin.',
                required=False,
            ),
        ],
        required_properties=['label', 'type'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/mapLayers', 'PUT /rest/ofscMetadata/v1/mapLayers/{label}', 'GET /rest/ofscMetadata/v1/mapLayers/{label}', 'PUT /rest/ofscMetadata/v1/mapLayers/{label}'],
        used_in_request_endpoints=['POST /rest/ofscMetadata/v1/mapLayers', 'PUT /rest/ofscMetadata/v1/mapLayers/{label}'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/mapLayers/{label}', 'PUT /rest/ofscMetadata/v1/mapLayers/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['CustomMapLayers'],
    ),
    "CustomActionMapLayersPopulateLayersSchemaResponse": ModelInfo(
        name='CustomActionMapLayersPopulateLayersSchemaResponse',
        description='The schema of the response body object for this operation.',
        properties=[
            ModelProperty(
                name='status',
                type='string',
                description='The status of the downloaded shape file.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The time when the operation started.',
                required=False,
            ),
            ModelProperty(
                name='downloadId',
                type='integer',
                description='The identifier of the shape file specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers/{downloadId}', 'POST /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers/{downloadId}', 'POST /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "CustomActionMapLayersPopulateLayersSchema": ModelInfo(
        name='CustomActionMapLayersPopulateLayersSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='URL',
                type='string',
                description='The URL of the external source from which the geo-data is downloaded. Supported protocols: HTTPS only.',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='authentication',
                type='object',
                description="The authentication used for downloading the geo-data from the external source specified in the URL field.<ul><li>If the URL points to an HTTP service, and the type of the authentication specified is 'basic', then Oracle Field Service sends a request to this URL to authenticate using the HTTP-Basic scheme with the username and password as credentials.</li><li>If the URL points to an FTP service, and the type of the authentication specified is 'ftp', then Oracle Field Service connects via the FTP protocol using the username and password as credentials.</li><li>If the type of the authentication specified is 'none', then Oracle Field Service downloads the geo-data without any authentication.</li>",
                required=True,
            ),
            ModelProperty(
                name='shapeTitleColumn',
                type='string',
                description='The name of the non-spatial column that contains the titles of the shapes that are displayed on the map.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='shapeHintColumns',
                type='array',
                description='The set of objects that define the contents of the hint for the shapes on the map.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='shapeHintButton',
                type='object',
                description='The object representing selected Custom Form or Plugin will be displayed as a button on layer hint. Parameters specified in Plugin/Form Field will be sent to the selected Custom Form or Plugin.',
                required=False,
            ),
            ModelProperty(
                name='layerLabel',
                type='string',
                description='The unique identifier of the layer.',
                required=True,
                min_length=1,
                max_length=24,
            ),
            ModelProperty(
                name='SRID',
                type='integer',
                description='The spatial reference identifier (SRID) of the geo-data in the shape file.',
                required=True,
            ),
        ],
        required_properties=['URL', 'authentication', 'layerLabel', 'SRID'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers'],
        used_in_request_endpoints=['POST /rest/ofscMetadata/v1/mapLayers/custom-actions/populateLayers'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "NonWorkingReasons": ModelInfo(
        name='NonWorkingReasons',
        description='The collection of non-working reasons. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'NonWorkingReason'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the non-working reason records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/nonWorkingReasons'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/nonWorkingReasons'],
        mapped_pydantic_class='NonWorkingReason',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['NonWorkingReason'],
        parent_models=[],
    ),
    "NonWorkingReason": ModelInfo(
        name='NonWorkingReason',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique label assigned to the non-working reason. For example, Illness.',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the name of the non-working reason.If the value of language parameter is specified, then the name is provided in the specified language. If the value is not specified, then the name is provided in English, unless the request is performed using an Oracle Field Service user account which is linked to an API application (in this case the name is provided in the language of the user making the request).',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the non-working reason is listed as a possible value in the 'Non-working Reason' drop-down list in Manage or Mobility apps while creating an activity. If false, then the value is not listed in the drop-down list. The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of translations associated with the name of the non-working reason. The list is only returned if the language parameter is not specified in request.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'name', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='NonWorkingReason',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['NonWorkingReasons'],
    ),
    "Organizations": ModelInfo(
        name='Organizations',
        description='The collection of organizations.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'Organization'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of organizations retrieved.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/organizations'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/organizations'],
        mapped_pydantic_class='Organization',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Organization'],
        parent_models=[],
    ),
    "Organization": ModelInfo(
        name='Organization',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The organization label specified in the request.',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the organization in the user's preferred language. This field is returned only by using the GET method.",
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the organization.',
                required=True,
                enum=['contractor', 'inhouse'],
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='An array of translations associated with the name of the organization.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'type', 'translations'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/organizations/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/organizations/{label}'],
        mapped_pydantic_class='Organization',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['Organizations'],
    ),
    "ErrorWithResponseCode": ModelInfo(
        name='ErrorWithResponseCode',
        description='',
        properties=[
            ModelProperty(
                name='type',
                type='string',
                description='The URL of the web page containing more details about this error.',
                required=True,
            ),
            ModelProperty(
                name='title',
                type='string',
                description='The brief description of this error.',
                required=True,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The HTTP status code of this error.',
                required=True,
            ),
            ModelProperty(
                name='detail',
                type='string',
                description='The detailed description of this error.',
                required=True,
            ),
            ModelProperty(
                name='o:errorCode',
                type='string',
                description='Application error code, which is different from HTTP error code.',
                required=True,
            ),
        ],
        required_properties=['type', 'title', 'status', 'detail', 'o:errorCode'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "PropertiesGet": ModelInfo(
        name='PropertiesGet',
        description='The collection of properties.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'PropertyGet'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The number of properties returned in the response.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/properties'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/properties'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['PropertyGet'],
        parent_models=[],
    ),
    "PropertyGet": ModelInfo(
        name='PropertyGet',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the property. It is the unique identifier of the property in Oracle Field Service.This field is present for all the types of properties. The label cannot be changed for an existing property.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the property in user's language.This field is present for all types of properties. It is returned only by using a GET operation and is ignored in PUT and PATCH operations.",
                required=False,
            ),
            ModelProperty(
                name='hint',
                type='string',
                description="The hint of the property name in the user's language.This field is present for all the types of properties. It is returned only by using a GET operation and is ignored in PUT and PATCH operations.",
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the property.This field is present for all the property types. It is required in a PUT operation and is optional in a PATCH operation. The property type cannot be changed for an existing property.',
                required=False,
                enum=['field', 'integer', 'string', 'enumeration', 'file', 'attachments'],
            ),
            ModelProperty(
                name='entity',
                type='string',
                description='The entity of the property.This field is present for all property types. It is required in a PUT operation and is optional in a PATCH operation. This field cannot be changed for an existing property.',
                required=False,
                enum=['activity', 'inventory', 'resource', 'service request', 'user'],
            ),
            ModelProperty(
                name='gui',
                type='string',
                description="The GUI of the property. It defines how the property is displayed to the users.This field is present for all property types. It is required in a PUT operation and optional in a PATCH operation. It cannot be changed for a property of type 'field'.",
                required=False,
                enum=['text', 'checkbox', 'combobox', 'radiogroup', 'file', 'signature', 'image', 'url', 'phone', 'email', 'capture', 'geo', 'attachments'],
            ),
            ModelProperty(
                name='cloneFlag',
                type='boolean',
                description="Contains one of the following values: true or false. If true, then the property is duplicated while reopening an activity or applying pre-work for a new activity. If false, then you cannot duplicate the property.This field is optional and present for all the property types except 'field'. It is not set for the entity 'resource'.",
                required=False,
            ),
            ModelProperty(
                name='template',
                type='string',
                description="The template of the property. This field is optional and is present only for the properties of type 'integer' and 'string'.",
                required=False,
            ),
            ModelProperty(
                name='lines',
                type='integer',
                description="The number of lines that the property displays in the Activity Details form. This field is optional and is present only for the properties of type 'string'. The value can be set only to 1 for all GUI elements except for the 'text' element.",
                required=False,
                minimum=1,
                maximum=9,
            ),
            ModelProperty(
                name='fileSizeLimit',
                type='string',
                description="The maximum file size allowed for 'file' elements. The default and the maximum size allowed is 5 MB.This field is optional and is present only for the file properties with the GUI file element.",
                required=False,
                enum=['0.5MB', '1MB', '2MB', '3MB', '5MB'],
            ),
            ModelProperty(
                name='mimeTypes',
                type='array',
                description="An array of MIME types. This is an optional field and is present only for properties of type 'file'.This field is required in a PUT operation and is optional in a PATCH operation. It is ignored for a property with the gui 'image'.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='maxWidth',
                type='integer',
                description='The maximum width of the property. This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
                minimum=10,
                maximum=5000,
            ),
            ModelProperty(
                name='maxHeight',
                type='integer',
                description='The maximum height of the property. This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
                minimum=10,
                maximum=5000,
            ),
            ModelProperty(
                name='allowDraw',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the user can draw on the captured image using a stylus. If false, then the user cannot draw on the captured image using a stylus.This field is optional and is present only for the file properties that have the GUI Image element.',
                required=False,
            ),
            ModelProperty(
                name='getGeolocation',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the location information is saved on the map. If false, then the location information is not saved on the map.This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
            ),
            ModelProperty(
                name='watermark',
                type='boolean',
                description="The parameter is supported for properties with the 'type' = file and ''gui' = 'image'.Default: <code>false</code>.",
                required=False,
            ),
            ModelProperty(
                name='storageApplication',
                type='string',
                description='Application label of configured "Oracle Storage" application.It is optional for the properties of the "attachments" type and ignored for all other properties.',
                required=False,
            ),
            ModelProperty(
                name='businessObject',
                type='string',
                description="A business object type (Service Work Order or Maintenance Work Order) to which the attachment is related. Allowed values : [ serviceWorkOrder, maintenanceWorkOrder ]. This attribute is applicable for properties of type 'attachments' with a Fusion configured storage.",
                required=False,
            ),
            ModelProperty(
                name='attachmentCategory',
                type='string',
                description="A label of the Fusion Attachment Category. This attribute is applicable for properties of type 'attachments' with a Fusion configured storage.<br />Maximum Length: 30",
                required=False,
            ),
            ModelProperty(
                name='transformation',
                type='object',
                description="The array of transformation objects. This field is optional and is present only for the properties of type 'string' with the gui 'text'.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of associated translations returned for the name the property. The list is returned only if the language parameter is not specified in request.This field is present for all the property types. It is required in a PUT operation and optional in a PATCH operation. For the default language, specify the value of the 'name' parameter.",
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/properties/{label}', 'PATCH /rest/ofscMetadata/v1/properties/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/properties/{label}', 'PATCH /rest/ofscMetadata/v1/properties/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['PropertiesGet'],
    ),
    "Properties": ModelInfo(
        name='Properties',
        description='The collection of properties.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'Property'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The number of properties returned in the response.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Property'],
        parent_models=[],
    ),
    "Property": ModelInfo(
        name='Property',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the property. It is the unique identifier of the property in Oracle Field Service.This field is present for all the types of properties. The label cannot be changed for an existing property.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the property in user's language.This field is present for all types of properties. It is returned only by using a GET operation and is ignored in PUT and PATCH operations.",
                required=False,
            ),
            ModelProperty(
                name='hint',
                type='string',
                description="The hint of the property name in the user's language.This field is present for all the types of properties. It is returned only by using a GET operation and is ignored in PUT and PATCH operations.",
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the property.This field is present for all the property types. It is required in a PUT operation and is optional in a PATCH operation. The property type cannot be changed for an existing property.',
                required=False,
                enum=['integer', 'string', 'enumeration', 'file', 'attachments'],
            ),
            ModelProperty(
                name='entity',
                type='string',
                description='The entity of the property.This field is present for all property types. It is required in a PUT operation and is optional in a PATCH operation. This field cannot be changed for an existing property.',
                required=False,
                enum=['activity', 'inventory', 'resource', 'service request', 'user'],
            ),
            ModelProperty(
                name='gui',
                type='string',
                description="The GUI of the property. It defines how the property is displayed to the users.This field is present for all property types. It is required in a PUT operation and optional in a PATCH operation. It cannot be changed for a property of type 'field'.",
                required=False,
                enum=['text', 'checkbox', 'combobox', 'radiogroup', 'file', 'signature', 'image', 'url', 'phone', 'email', 'capture', 'geo', 'attachments'],
            ),
            ModelProperty(
                name='cloneFlag',
                type='boolean',
                description="Contains one of the following values: true or false. If true, then the property is duplicated while reopening an activity or applying pre-work for a new activity. If false, then you cannot duplicate the property.This field is optional and present for all the property types except 'field'. It is not set for the entity 'resource'.",
                required=False,
            ),
            ModelProperty(
                name='template',
                type='string',
                description="The template of the property. This field is optional and is present only for the properties of type 'integer' and 'string'.",
                required=False,
            ),
            ModelProperty(
                name='lines',
                type='integer',
                description="The number of lines that the property displays in the Activity Details form. This field is optional and is present only for the properties of type 'string'. The value can be set only to 1 for all GUI elements except for the 'text' element.",
                required=False,
                minimum=1,
                maximum=9,
            ),
            ModelProperty(
                name='fileSizeLimit',
                type='string',
                description="The maximum file size allowed for 'file' elements. The default and the maximum size allowed is 5 MB.This field is optional and is present only for the file properties with the GUI file element.",
                required=False,
                enum=['0.5MB', '1MB', '2MB', '3MB', '5MB'],
            ),
            ModelProperty(
                name='mimeTypes',
                type='array',
                description="An array of MIME types. This is an optional field and is present only for properties of type 'file'.This field is required in a PUT operation and is optional in a PATCH operation. It is ignored for a property with the gui 'image'.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='maxWidth',
                type='integer',
                description='The maximum width of the property. This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
                minimum=10,
                maximum=5000,
            ),
            ModelProperty(
                name='maxHeight',
                type='integer',
                description='The maximum height of the property. This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
                minimum=10,
                maximum=5000,
            ),
            ModelProperty(
                name='allowDraw',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the user can draw on the captured image using a stylus. If false, then the user cannot draw on the captured image using a stylus.This field is optional and is present only for the file properties that have the GUI Image element.',
                required=False,
            ),
            ModelProperty(
                name='getGeolocation',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the location information is saved on the map. If false, then the location information is not saved on the map.This field is optional and is present only for the file properties with the GUI image element.',
                required=False,
            ),
            ModelProperty(
                name='watermark',
                type='boolean',
                description="The parameter is supported for properties with the 'type' = file and ''gui' = 'image'.Default: <code>false</code>.",
                required=False,
            ),
            ModelProperty(
                name='storageApplication',
                type='string',
                description='Application label of configured "Oracle Storage" application.It is optional for the properties of the "attachments" type and ignored for all other properties.',
                required=False,
            ),
            ModelProperty(
                name='businessObject',
                type='string',
                description="A business object type (Service Work Order or Maintenance Work Order) to which the attachment is related. Allowed values : [ serviceWorkOrder, maintenanceWorkOrder ]. This attribute is applicable for properties of type 'attachments' with a Fusion configured storage.",
                required=False,
            ),
            ModelProperty(
                name='attachmentCategory',
                type='string',
                description="A label of the Fusion Attachment Category. This attribute is applicable for properties of type 'attachments' with a Fusion configured storage.<br />Maximum Length: 30",
                required=False,
            ),
            ModelProperty(
                name='transformation',
                type='object',
                description="The array of transformation objects. This field is optional and is present only for the properties of type 'string' with the gui 'text'.",
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description="The list of associated translations returned for the name the property. The list is returned only if the language parameter is not specified in request.This field is present for all the property types. It is required in a PUT operation and optional in a PATCH operation. For the default language, specify the value of the 'name' parameter.",
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/properties/{label}', 'PATCH /rest/ofscMetadata/v1/properties/{label}', 'PUT /rest/ofscMetadata/v1/properties/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/properties/{label}', 'PATCH /rest/ofscMetadata/v1/properties/{label}'],
        used_in_response_endpoints=['PUT /rest/ofscMetadata/v1/properties/{label}'],
        mapped_pydantic_class='PropertyResponse',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['Properties'],
    ),
    "PropertyEnumerations": ModelInfo(
        name='PropertyEnumerations',
        description='The collection of enumeration values of a property.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of enumeration values.<b>Note</b>: At least one item in the array should be active.',
                required=False,
                items={'type': 'unknown', '$ref': 'PropertyEnumeration'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of enumeration values retrieved.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/properties/{label}/enumerationList'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/properties/{label}/enumerationList'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['PropertyEnumeration'],
        parent_models=[],
    ),
    "PropertyEnumeration": ModelInfo(
        name='PropertyEnumeration',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description="The code of the enumeration item. This code is unique only to the specified property. The values '0' and '-1' are reserved for internal purposes and cannot be used. The values cannot be changed or deleted.",
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the enumeration item is active. If false, then then the enumeration item is inactive.',
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='An array containing the translations of the enumeration item in different languages.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'translations'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/properties/{label}/enumerationList'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PUT /rest/ofscMetadata/v1/properties/{label}/enumerationList'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['PropertyEnumerations'],
    ),
    "ResourceTypes": ModelInfo(
        name='ResourceTypes',
        description='The array of resource type records in the collection. ',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'ResourceType'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the resource type records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or the value is not present, then there are no more results or this is the final page.  The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/resourceTypes'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/resourceTypes'],
        mapped_pydantic_class='ResourceType',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['ResourceType'],
        parent_models=[],
    ),
    "ResourceType": ModelInfo(
        name='ResourceType',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique label assigned to the resource type. For example,  GR (Group).',
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The translation for the name of the resource type.If the language parameter is specified, then the name is provided in that language.If the language parameter is not specified, then the name is provided in English, unless the request is performed using an Oracle Field Service user account which is linked to an API application (in this case, the name is provided in the language of the user making the request).',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the resource type is listed as a possible value in the 'Resource Type' drop-down list in Manage or Mobility apps while creating a resource. If false, then the resource type is not listed as a value in the drop-down list. The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='role',
                type='string',
                description='The role of the resource type.',
                required=False,
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of translations associated with the name of the resource type. The list is only returned if the language parameter is not specified in request.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['label', 'name', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ResourceType',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['ResourceTypes'],
    ),
    "routingProfileLabels": ModelInfo(
        name='routingProfileLabels',
        description='The collection of routing profile labels.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of routing profile labels.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the resource type records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false. The default value is true.True indicates there are more results that can be retrieved with successive paging requests. False or the value is not present, indicates, there are no more results or this is the final page.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "routingPlanLabels": ModelInfo(
        name='routingPlanLabels',
        description='The collection of routing plan labels.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of routing plan labels.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the resource type records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false. The default value is true.True indicates there are more results that can be retrieved with successive paging requests. False or the value is not present, indicates, there are no more results or this is the final page.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "file": ModelInfo(
        name='file',
        description='The contents of the file. This is usually binary data.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/custom-actions/export', 'GET /rest/ofscCore/v1/activities/{activityId}/{propertyLabel}', 'GET /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files/{dailyExtractFilename}', 'GET /rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}', 'GET /rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}', 'GET /rest/ofscCore/v1/serviceRequests/{requestId}/{propertyLabel}', 'GET /rest/ofscCore/v1/users/{login}/{propertyLabel}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/routingProfiles/{profileLabel}/plans/{planLabel}/custom-actions/export', 'GET /rest/ofscCore/v1/activities/{activityId}/{propertyLabel}', 'GET /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files/{dailyExtractFilename}', 'GET /rest/ofscCore/v1/inventories/{inventoryId}/{propertyLabel}', 'GET /rest/ofscCore/v1/resources/{resourceId}/{propertyLabel}', 'GET /rest/ofscCore/v1/serviceRequests/{requestId}/{propertyLabel}', 'GET /rest/ofscCore/v1/users/{login}/{propertyLabel}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "Shifts": ModelInfo(
        name='Shifts',
        description='The collection of shifts. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'Shift'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of shift records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/shifts'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/shifts'],
        mapped_pydantic_class='Shift',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Shift'],
        parent_models=[],
    ),
    "Shift": ModelInfo(
        name='Shift',
        description='The shift object.',
        properties=[
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the shift is listed as a possible value in the 'shift' drop-down list in Manage or Mobility apps while creating an activity. If false, then the shift is not listed as a value in the drop-down list. The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The label of the shift.',
                required=True,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='Points',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the shift. Possible values are ["regular", "on-call"]. Cannot be changed for an existing shift.',
                required=True,
            ),
            ModelProperty(
                name='workTimeStart',
                type='string',
                description='The workTimeStart of the shift. Possible values are 00:00 - 23:59',
                required=True,
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description='The workTimeEnd of the shift. Possible values are 00:00 - 23:59',
                required=True,
            ),
            ModelProperty(
                name='decoration',
                type='string',
                description='The decoration of the shift. Mandatory for "on-call" type of shift. Possible values are ["yellow","orange","red","blue","green","purple"].',
                required=False,
            ),
        ],
        required_properties=['name', 'active', 'type', 'workTimeEnd', 'workTimeStart'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/shifts/{label}', 'PUT /rest/ofscMetadata/v1/shifts/{label}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/shifts/{label}', 'PUT /rest/ofscMetadata/v1/shifts/{label}'],
        mapped_pydantic_class='Shift',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['Shifts'],
    ),
    "CreateShiftSchema": ModelInfo(
        name='CreateShiftSchema',
        description='The shift object.',
        properties=[
            ModelProperty(
                name='active',
                type='boolean',
                description="Contains one of the following values: true or false.If true, then the shift is listed as a possible value in the 'shift' drop-down list in Manage or Mobility apps while creating an activity. If false, then the shift is not listed as a value in the drop-down list. The default value is true.",
                required=True,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The label of the shift.',
                required=True,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='Points',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the shift. Possible values are ["regular", "on-call"]. Cannot be changed for an existing shift.',
                required=True,
            ),
            ModelProperty(
                name='workTimeStart',
                type='string',
                description='The workTimeStart of the shift. Possible values are 00:00 - 23:59',
                required=True,
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description='The workTimeEnd of the shift. Possible values are 00:00 - 23:59',
                required=True,
            ),
            ModelProperty(
                name='decoration',
                type='string',
                description='The decoration of the shift. Mandatory for "on-call" type of shift. Possible values are ["yellow","orange","red","blue","green","purple"].',
                required=False,
            ),
        ],
        required_properties=['name', 'active', 'type', 'workTimeEnd', 'workTimeStart'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/shifts/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/shifts/{label}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "TimeSlots": ModelInfo(
        name='TimeSlots',
        description='The collection of time slots. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'TimeSlot'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the time slots records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/timeSlots'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/timeSlots'],
        mapped_pydantic_class='TimeSlot',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['TimeSlot'],
        parent_models=[],
    ),
    "TimeSlot": ModelInfo(
        name='TimeSlot',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The unique label assigned to the time slot.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the time slot. For example, 8-10.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the time slot is listed as an option in the <b>Time slot</b> drop-down list in the Oracle Field Service application. If false, then the time slot is not listed as an option in the drop-down list. The default value is true.',
                required=True,
            ),
            ModelProperty(
                name='isAllDay',
                type='boolean',
                description="Contains one of the following values: true or false. If true, then the activities with the 'allDay' time slot can be performed at any time during the day. If false, then the activities cannot be performed at any time during the day. The default value is false.",
                required=True,
            ),
            ModelProperty(
                name='timeStart',
                type='string',
                description='The time when the time slot starts. For example, 14:00 hours.',
                required=False,
            ),
            ModelProperty(
                name='timeEnd',
                type='string',
                description='The time when the time slot ends. For example, 16:00 hours.',
                required=False,
            ),
        ],
        required_properties=['label', 'name', 'active', 'isAllDay'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='TimeSlot',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['TimeSlots'],
    ),
    "WorkSkillConditions": ModelInfo(
        name='WorkSkillConditions',
        description='The collection of work skill conditions.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'WorkSkillCondition'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of work skill conditions returned.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/workSkillConditions', 'PUT /rest/ofscMetadata/v1/workSkillConditions'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workSkillConditions', 'PUT /rest/ofscMetadata/v1/workSkillConditions'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['WorkSkillCondition'],
        parent_models=[],
    ),
    "PutWorkSkillConditions": ModelInfo(
        name='PutWorkSkillConditions',
        description='The collection of work skill conditions.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'WorkSkillCondition'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/workSkillConditions'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/workSkillConditions'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['WorkSkillCondition'],
        parent_models=[],
    ),
    "WorkSkillCondition": ModelInfo(
        name='WorkSkillCondition',
        description='',
        properties=[
            ModelProperty(
                name='internalId',
                type='integer',
                description="The unique identifier of a work skill condition item within the request. This value may be used for reference in the 'dependencies' array of another condition. The values of Id sent to Oracle Field Service does not necessarily match the obtained values in the GET operation.",
                required=True,
                min_length=1,
                max_length=10,
                minimum=1,
            ),
            ModelProperty(
                name='label',
                type='string',
                description='The label of a work skill. This field is required for all conditions.',
                required=True,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='requiredLevel',
                type='integer',
                description='The required level of the work skill. This field is required for all conditions.',
                required=True,
                minimum=0,
                maximum=100,
            ),
            ModelProperty(
                name='preferableLevel',
                type='integer',
                description='The preference level of the work skill. This field is required for all conditions.',
                required=True,
                minimum=1,
                maximum=100,
            ),
            ModelProperty(
                name='conditions',
                type='array',
                description='The array of condition objects.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='dependencies',
                type='array',
                description='The array of dependency objects.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=['internalId', 'label', 'requiredLevel', 'preferableLevel'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['WorkSkillConditions', 'PutWorkSkillConditions'],
    ),
    "WorkSkillGroups": ModelInfo(
        name='WorkSkillGroups',
        description='The collection of work skill groups.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'WorkSkillGroup'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of work skill groups in the collection.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/workSkillGroups'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workSkillGroups'],
        mapped_pydantic_class='WorkSkillGroup',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['WorkSkillGroup'],
        parent_models=[],
    ),
    "WorkSkillGroup": ModelInfo(
        name='WorkSkillGroup',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the work skill group.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the work skill group in the user's language.",
                required=False,
                min_length=1,
                max_length=5000,
            ),
            ModelProperty(
                name='assignToResource',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then the work skill group is assigned to the resource. By default, it is true. <b>Note: </b>This field is present for all work skill groups.',
                required=True,
            ),
            ModelProperty(
                name='addToCapacityCategory',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then the work skill group is added to the capacity category. By default, it is true. <b>Note: </b>This field is present for all work skill groups.',
                required=True,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then the work skill group is active. If false, then the work skill group is inactive. By default, it is true. <b>Note: </b>It is present for all work skill groups.',
                required=True,
            ),
            ModelProperty(
                name='workSkills',
                type='array',
                description='The array of work skill objects associated with the work skill group.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The array of translation objects associated with the work skill group.',
                required=True,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['assignToResource', 'addToCapacityCategory', 'active', 'translations'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/workSkillGroups/{label}', 'GET /rest/ofscMetadata/v1/workSkillGroups/{label}', 'PUT /rest/ofscMetadata/v1/workSkillGroups/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/workSkillGroups/{label}'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workSkillGroups/{label}', 'PUT /rest/ofscMetadata/v1/workSkillGroups/{label}'],
        mapped_pydantic_class='WorkSkillGroup',
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['WorkSkillGroups'],
    ),
    "WorkSkills": ModelInfo(
        name='WorkSkills',
        description='The collection of work skills.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of work skills. It is not returned for an empty collection.',
                required=False,
                items={'type': 'unknown', '$ref': 'WorkSkill'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of the non-working reason records in the collection.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then there are more results that can be retrieved with successive paging requests.If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/workSkills'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workSkills'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['WorkSkill'],
        parent_models=[],
    ),
    "WorkSkill": ModelInfo(
        name='WorkSkill',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the work skill specified in the request.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='name',
                type='string',
                description="The name of the work skill in user's language.",
                required=False,
            ),
            ModelProperty(
                name='active',
                type='boolean',
                description='Contains one of the following values: true or false.If true, then the work skill is active. If false, then the work skill is inactive. By default, it is true.',
                required=True,
            ),
            ModelProperty(
                name='sharing',
                type='string',
                description='The sharing option defined for work skills in the team. The allowed values are as follows:<ul><li>Maximal: The team gets the maximum work skill level of all team members. This is the default value.</li><li>Minimal: The team gets the minimal work skill level of all team members.</li><li>No sharing: The team does not get the work skill of a team member.</li><li>Summary: The team gets the total sum of work skill levels of all the team members.</li></ul>',
                required=True,
                enum=['no sharing', 'maximal', 'minimal', 'summary'],
            ),
            ModelProperty(
                name='translations',
                type='array',
                description='The list of translations associated with the name of the work skill.',
                required=False,
                items={'type': 'unknown', '$ref': 'Translation'},
            ),
        ],
        required_properties=['active', 'sharing'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/workSkills/{label}', 'GET /rest/ofscMetadata/v1/workSkills/{label}', 'PUT /rest/ofscMetadata/v1/workSkills/{label}'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/workSkills/{label}'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workSkills/{label}', 'PUT /rest/ofscMetadata/v1/workSkills/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['Translation'],
        parent_models=['WorkSkills'],
    ),
    "workZones": ModelInfo(
        name='workZones',
        description='The collection of work zones.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of work zone items.',
                required=False,
                items={'type': 'unknown', '$ref': 'workZoneItem'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of work zones retrieved.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscMetadata/v1/workZones', 'PATCH /rest/ofscMetadata/v1/workZones', 'GET /rest/ofscMetadata/v1/workZones'],
        used_in_request_endpoints=['PUT /rest/ofscMetadata/v1/workZones', 'PATCH /rest/ofscMetadata/v1/workZones'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workZones'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['workZoneItem'],
        parent_models=[],
    ),
    "workZoneItem": ModelInfo(
        name='workZoneItem',
        description='',
        properties=[
            ModelProperty(
                name='workZoneLabel',
                type='string',
                description='',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='workZoneName',
                type='string',
                description='',
                required=True,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='travelArea',
                type='string',
                description='',
                required=True,
                enum=['sunrise_enterprise', 'New'],
            ),
            ModelProperty(
                name='keys',
                type='array',
                description='',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='shapes',
                type='array',
                description='',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='organization',
                type='string',
                description='',
                required=False,
                min_length=1,
                max_length=255,
            ),
        ],
        required_properties=['workZoneLabel', 'travelArea', 'workZoneName'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/workZones', 'PUT /rest/ofscMetadata/v1/workZones/{label}', 'GET /rest/ofscMetadata/v1/workZones/{label}'],
        used_in_request_endpoints=['POST /rest/ofscMetadata/v1/workZones', 'PUT /rest/ofscMetadata/v1/workZones/{label}'],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workZones/{label}'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['workZones'],
    ),
    "customActionWorkZonesPopulateShapesSchemaResponse": ModelInfo(
        name='customActionWorkZonesPopulateShapesSchemaResponse',
        description='The schema of the response body object for this operation.',
        properties=[
            ModelProperty(
                name='status',
                type='string',
                description='The status of the shapefile upload process.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The current time.',
                required=False,
            ),
            ModelProperty(
                name='downloadId',
                type='integer',
                description='The unique identifier of the shapefile download process.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes/{downloadId}', 'POST /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes/{downloadId}', 'POST /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "customActionWorkZonesPopulateShapesSchema": ModelInfo(
        name='customActionWorkZonesPopulateShapesSchema',
        description='The request body parameters for populating shapes. These parameters are used to download and convert shapes.',
        properties=[
            ModelProperty(
                name='URL',
                type='string',
                description='The link to the downloaded shapefile. Supported protocols: HTTPS only.',
                required=True,
            ),
            ModelProperty(
                name='authentication',
                type='object',
                description='The authentication parameters used to connect with the server.',
                required=True,
            ),
            ModelProperty(
                name='shapeIdentifierColumn',
                type='string',
                description='The name of the non-spatial column that contains the identifier of the shape.',
                required=True,
            ),
            ModelProperty(
                name='shapeAreaColumn',
                type='string',
                description='The name of the non-spatial column that contains the area of the shape.',
                required=False,
            ),
            ModelProperty(
                name='SRID',
                type='integer',
                description='The spatial reference identifier (SRID) of the geo-data in the shape file.',
                required=True,
            ),
        ],
        required_properties=['URL', 'authentication', 'shapeIdentifierColumn', 'SRID'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes'],
        used_in_request_endpoints=['POST /rest/ofscMetadata/v1/workZones/custom-actions/populateShapes'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "workZoneKey": ModelInfo(
        name='workZoneKey',
        description='The configuration of the work zone key.',
        properties=[
            ModelProperty(
                name='current',
                type='array',
                description='The information related to the current work zone key. It is represented by an array of fields that is used to form the composite key. The order of the fields in the array is same as the order in which they appear in the key.',
                required=False,
                items={'type': 'unknown', '$ref': 'workZoneKeyElement'},
            ),
            ModelProperty(
                name='pending',
                type='array',
                description='The information related to the work zone key that is yet to be applied. It is represented by an array of fields that is used to form the composite key. The order of the fields in the array is same as the order in which they appear in the key.',
                required=False,
                items={'type': 'unknown', '$ref': 'workZoneKeyElement'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscMetadata/v1/workZoneKey'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscMetadata/v1/workZoneKey'],
        mapped_pydantic_class=None,
        module='metadata',
        schema_type='object',
        examples=[],
        nested_models=['workZoneKeyElement'],
        parent_models=[],
    ),
    "workZoneKeyElement": ModelInfo(
        name='workZoneKeyElement',
        description='The element of the work zone key composite.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the field or property.',
                required=False,
                min_length=1,
                max_length=255,
            ),
            ModelProperty(
                name='length',
                type='integer',
                description='The number of characters from the field value that is used in the key.',
                required=False,
                min_length=1,
                max_length=9,
            ),
            ModelProperty(
                name='function',
                type='string',
                description="The case sensitivity of the field value. The possible values are 'caseInsensitive' and 'firstWordCaseInsensitive'.",
                required=False,
            ),
            ModelProperty(
                name='order',
                type='integer',
                description='The value that indicates the sorting order of the item in the list. The items are listed in ascending order.',
                required=False,
            ),
            ModelProperty(
                name='apiParameterName',
                type='string',
                description='The name of API parameter that represents the activity field or a property.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['workZoneKey'],
    ),
    "Translation": ModelInfo(
        name='Translation',
        description='',
        properties=[
            ModelProperty(
                name='language',
                type='string',
                description="The language code of the translated text. The code in the response is two characters long (for example, 'en', 'es').See <a href='OFSC_Supported_Language_Codes.html'>Supported Language Codes</a> to view the values that are supported.",
                required=True,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description="The ISO language code (for example, 'en-US').",
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The specified name of the property translated to the language code available in the system.',
                required=True,
            ),
        ],
        required_properties=['language', 'name'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='Translation',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ActivityTypeGroupForPut', 'ActivityType', 'CreateActivityTypeSchema', 'CapacityCategory', 'Form', 'Language', 'CustomMapLayer', 'NonWorkingReason', 'Organization', 'PropertyGet', 'Property', 'PropertyEnumeration', 'ResourceType', 'WorkSkillGroup', 'WorkSkill'],
    ),
    "activityDurationsList": ModelInfo(
        name='activityDurationsList',
        description='The array of items containing the activity duration statistics.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'activityDuration'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscStatistics/v1/activityDurationStats'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscStatistics/v1/activityDurationStats'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['activityDuration'],
        parent_models=[],
    ),
    "activityDuration": ModelInfo(
        name='activityDuration',
        description='',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The external Identifier of the resource.',
                required=False,
            ),
            ModelProperty(
                name='akey',
                type='string',
                description="The value of the activity duration key. It appears as 'Appointment Key' in the report.",
                required=False,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description='The override value of the activity duration.',
                required=False,
            ),
            ModelProperty(
                name='avg',
                type='integer',
                description='The average value of the estimated activity duration.',
                required=False,
            ),
            ModelProperty(
                name='dev',
                type='integer',
                description='The deviation with respect to the estimated activity duration value.',
                required=False,
            ),
            ModelProperty(
                name='count',
                type='integer',
                description='The number of activities considered for estimation.',
                required=False,
            ),
            ModelProperty(
                name='level',
                type='string',
                description="The level of the resource. It can be 'company', 'aggregate', or 'provider' based on the level of the data.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityDurationsList'],
    ),
    "activityDurationRequestList": ModelInfo(
        name='activityDurationRequestList',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=True,
                items={'type': 'unknown', '$ref': 'activityDurationRequest'},
            ),
        ],
        required_properties=['items'],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/activityDurationStats'],
        used_in_request_endpoints=['PATCH /rest/ofscStatistics/v1/activityDurationStats'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['activityDurationRequest'],
        parent_models=[],
    ),
    "activityDurationRequest": ModelInfo(
        name='activityDurationRequest',
        description='',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The external ID of the resource. If this value is not provided, the override will be performed at the company level.',
                required=True,
                max_length=32,
            ),
            ModelProperty(
                name='akey',
                type='string',
                description="The value of the activity duration key. It appears as 'Appointment Key' in the report.",
                required=True,
                max_length=50,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description="The override value that needs to be set for the 'resourceId' and 'akey' combination. For example, 100.",
                required=True,
                minimum=0,
                maximum=1440,
            ),
        ],
        required_properties=['resourceId', 'akey', 'override'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityDurationRequestList'],
    ),
    "activityDurationPatchResponse": ModelInfo(
        name='activityDurationPatchResponse',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/activityDurationStats'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscStatistics/v1/activityDurationStats'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "activityTravelsList": ModelInfo(
        name='activityTravelsList',
        description='The array of items containing the activity travel statistics.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'activityTravel'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscStatistics/v1/activityTravelStats'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscStatistics/v1/activityTravelStats'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['activityTravel'],
        parent_models=[],
    ),
    "activityTravel": ModelInfo(
        name='activityTravel',
        description='',
        properties=[
            ModelProperty(
                name='tkey',
                type='string',
                description="The travel key value corresponding to the destination of the travel. For example, '11 AY'.",
                required=False,
            ),
            ModelProperty(
                name='fkey',
                type='string',
                description="The travel key value corresponding to the starting location of the travel. For example, 'SRT D3'.",
                required=False,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description="The override value for the activity travel duration that is set for the 'fkey' and 'tkey' combination.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
            ),
            ModelProperty(
                name='avg',
                type='integer',
                description='The average value of the estimated travel duration.',
                required=False,
            ),
            ModelProperty(
                name='dev',
                type='integer',
                description='The deviation with respect to the estimated travel duration value.',
                required=False,
            ),
            ModelProperty(
                name='count',
                type='integer',
                description='The number of travels considered for the travel duration estimation.',
                required=False,
            ),
            ModelProperty(
                name='region',
                type='string',
                description="The label for the region. For example, 'xyz_enterprise'.",
                required=False,
            ),
            ModelProperty(
                name='keyId',
                type='integer',
                description="Key ID of one of the configured travel keys.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
            ),
            ModelProperty(
                name='org',
                type='array',
                description="An array of all the Organizations(labels) for which the key pairs are applicable.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityTravelsList'],
    ),
    "activityTravelRequestList": ModelInfo(
        name='activityTravelRequestList',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=True,
                items={'type': 'unknown', '$ref': 'activityTravelRequest'},
            ),
        ],
        required_properties=['items'],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/activityTravelStats'],
        used_in_request_endpoints=['PATCH /rest/ofscStatistics/v1/activityTravelStats'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['activityTravelRequest'],
        parent_models=[],
    ),
    "activityTravelRequest": ModelInfo(
        name='activityTravelRequest',
        description='The individual items in the request array.',
        properties=[
            ModelProperty(
                name='fkey',
                type='string',
                description="The travel key value corresponding to the source location of the travel. For example, 'SRT D3'.",
                required=True,
                max_length=50,
            ),
            ModelProperty(
                name='tkey',
                type='string',
                description="The travel key value corresponding to the destination location of the travel. For example, '11 AY'.",
                required=True,
                max_length=50,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description="The override value that needs to be set for 'fkey' and 'tkey' combination. For example, 100.",
                required=True,
                minimum=0,
                maximum=480,
            ),
            ModelProperty(
                name='keyId',
                type='integer',
                description="Key ID of one of the configured travel keys.<ul><li>If 'keyId' is not specified, data corresponding to the default travel key will be updated.</li><li>If 'keyId' is specified and if it exists in the system, data will be updated for the corresponding key.</li><li>If 'keyId' is specified but does not exist in the system, an error message will be returned</li></ul>",
                required=False,
                max_length=99999,
            ),
        ],
        required_properties=['fkey', 'tkey', 'override'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityTravelRequestList'],
    ),
    "activityTravelPatchResponse": ModelInfo(
        name='activityTravelPatchResponse',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/activityTravelStats'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscStatistics/v1/activityTravelStats'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "airlineDistanceBasedTravelList": ModelInfo(
        name='airlineDistanceBasedTravelList',
        description='The array of items containing the statistically estimated and override travel time at travel key level for the specified distances.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'airlineDistanceBasedTravel'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['airlineDistanceBasedTravel'],
        parent_models=[],
    ),
    "airlineDistanceBasedTravel": ModelInfo(
        name='airlineDistanceBasedTravel',
        description='',
        properties=[
            ModelProperty(
                name='key',
                type='string',
                description="The value of the travel key. It appears as 'Start Location' and 'End Location' in the Travel Statistics report.",
                required=False,
            ),
            ModelProperty(
                name='data',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'airlineDistanceBasedTravelDataResponse'},
            ),
            ModelProperty(
                name='keyId',
                type='integer',
                description="Key ID of one of the configured travel keys.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
            ),
            ModelProperty(
                name='org',
                type='array',
                description="An array of all the Organizations(labels) for which the key is applicable.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['airlineDistanceBasedTravelDataResponse'],
        parent_models=['airlineDistanceBasedTravelList'],
    ),
    "airlineDistanceBasedTravelRequestList": ModelInfo(
        name='airlineDistanceBasedTravelRequestList',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=True,
                items={'type': 'unknown', '$ref': 'airlineDistanceBasedTravelRequest'},
            ),
        ],
        required_properties=['items'],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        used_in_request_endpoints=['PATCH /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=['airlineDistanceBasedTravelRequest'],
        parent_models=[],
    ),
    "airlineDistanceBasedTravelRequest": ModelInfo(
        name='airlineDistanceBasedTravelRequest',
        description='',
        properties=[
            ModelProperty(
                name='key',
                type='string',
                description="The value of the travel key. It appears as 'Start Location' and 'End Location' in the Travel Statistics report.",
                required=True,
                max_length=50,
            ),
            ModelProperty(
                name='data',
                type='array',
                description='',
                required=True,
                items={'type': 'unknown', '$ref': 'airlineDistanceBasedTravelOverrideData'},
            ),
            ModelProperty(
                name='keyId',
                type='integer',
                description="Key ID of one of the configured travel keys.<ul><li>If 'keyId' is not specified, data corresponding to the default travel key will be updated.</li><li>If 'keyId' is specified and if it exists in the system, data will be updated for the corresponding key.</li><li>If 'keyId' is specified but does not exist in the system, an error message will be returned</li></ul>",
                required=False,
                max_length=99999,
            ),
        ],
        required_properties=['key', 'data'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['airlineDistanceBasedTravelOverrideData'],
        parent_models=['airlineDistanceBasedTravelRequestList'],
    ),
    "airlineDistanceBasedTravelOverrideData": ModelInfo(
        name='airlineDistanceBasedTravelOverrideData',
        description='',
        properties=[
            ModelProperty(
                name='distance',
                type='integer',
                description='The distance (in km) for which the override value of travel time is specified at travel key level. For example, 15',
                required=False,
                minimum=-1,
                maximum=999,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description='The override value for the travel time (in minutes) that needs to be set for the distance at travel key level. For example, 25',
                required=False,
                minimum=-1,
                maximum=999,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['airlineDistanceBasedTravelRequest'],
    ),
    "airlineDistanceBasedTravelDataResponse": ModelInfo(
        name='airlineDistanceBasedTravelDataResponse',
        description='',
        properties=[
            ModelProperty(
                name='distance',
                type='integer',
                description='The distance (in km) for which the override value of travel time is specified at travel key level.',
                required=False,
                maximum=999,
            ),
            ModelProperty(
                name='estimated',
                type='integer',
                description='The statistically estimated value for the travel time (in minutes) for the distance at travel key level.',
                required=False,
            ),
            ModelProperty(
                name='override',
                type='integer',
                description="The override value for the travel time (in minutes) for the distance at travel key level.If 'Detect activity travel keys automatically' is checked in Statistics configuration, then this field will not be returned as part of the response.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['airlineDistanceBasedTravel'],
    ),
    "airlineDistanceBasedTravelPatchResponse": ModelInfo(
        name='airlineDistanceBasedTravelPatchResponse',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscStatistics/v1/airlineDistanceBasedTravel'],
        mapped_pydantic_class=None,
        module='statistics',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "catalogSchema": ModelInfo(
        name='catalogSchema',
        description='',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='The name of the catalog.',
                required=True,
            ),
            ModelProperty(
                name='fieldSchemas',
                type='array',
                description='The array of objects wherein each object describes a catalog field.',
                required=True,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='typeSchemas',
                type='array',
                description='The array of objects wherein each object describes an item type.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=['fieldSchemas', 'name'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}'],
        used_in_request_endpoints=['PUT /rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='partscatalog',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "catalogItem": ModelInfo(
        name='catalogItem',
        description='The item of a catalog.',
        properties=[
            ModelProperty(
                name='type',
                type='string',
                description='The parameter that allows you to define the type of data in your catalog.',
                required=True,
            ),
            ModelProperty(
                name='weight',
                type='integer',
                description='Default 1. Item weight used for sorting during cache loading. Items with weight=0 will not be cahced for offline usage. May be used to reduce the size of the catalog cache in user devices (too many items may exceed available memory).',
                required=False,
            ),
            ModelProperty(
                name='fields',
                type='array',
                description='The list of catalog item fields that allow you to filter the catalog data.',
                required=True,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='tags',
                type='array',
                description='The list of tags associated with the catalog item.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='linkedItems',
                type='array',
                description='The list of linked items associated with the catalog item.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='images',
                type='array',
                description='The list of images of the catalog item.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=['type', 'fields'],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}/{itemLabel}'],
        used_in_request_endpoints=['PUT /rest/ofscPartsCatalog/v1/catalogs/{catalog}/{language}/{itemLabel}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='partscatalog',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "AddressBookList": ModelInfo(
        name='AddressBookList',
        description='The list of contacts from address book.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of contacts retrieved.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of items containing the contact details.',
                required=False,
                items={'type': 'unknown', '$ref': 'Contact'},
            ),
            ModelProperty(
                name='links',
                type='array',
                description='The array of pagination items.',
                required=False,
                items={'type': 'unknown', '$ref': 'PaginationLink'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCollaboration/v1/addressBook'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCollaboration/v1/addressBook'],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=['PaginationLink', 'Contact'],
        parent_models=[],
    ),
    "Contact": ModelInfo(
        name='Contact',
        description='Contact object',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='contact name',
                required=False,
            ),
            ModelProperty(
                name='online',
                type='boolean',
                description='online status of the user',
                required=False,
            ),
            ModelProperty(
                name='contactId',
                type='string',
                description='contact id or login id of the user',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='type of user',
                required=False,
                enum=['user', 'helpdesk'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AddressBookList'],
    ),
    "ParticipantList": ModelInfo(
        name='ParticipantList',
        description='The list of participants of the chat.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of participants retrieved.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of items containing the participant details.',
                required=False,
                items={'type': 'unknown', '$ref': 'Participant'},
            ),
            ModelProperty(
                name='links',
                type='array',
                description='The array of pagination items.',
                required=False,
                items={'type': 'unknown', '$ref': 'PaginationLink'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCollaboration/v1/chats/{chatId}/participants'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCollaboration/v1/chats/{chatId}/participants'],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=['Participant', 'PaginationLink'],
        parent_models=[],
    ),
    "Message": ModelInfo(
        name='Message',
        description='Chat message details',
        properties=[
            ModelProperty(
                name='messageId',
                type='integer',
                description='The identifier of the message in the collaboration server (long).',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='sequenceNumber',
                type='integer',
                description='The sequence number of the message in the chat or broadcast (long).',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='text',
                type='string',
                description='The text content of the message (string).',
                required=False,
            ),
            ModelProperty(
                name='attachment',
                type='ref:Attachment',
                description='',
                required=False,
                ref='Attachment',
            ),
            ModelProperty(
                name='author',
                type='string',
                description='The user login of the user who created this message',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The time the message was sent in UTC time standard (string). The time format is YYYY-MM-DD HH:MM:SS.',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='Type of message whether its user generated(message) or system generated(notification).',
                required=False,
                enum=['message', 'notification'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Attachment'],
        parent_models=['GetMessageResponse'],
    ),
    "SendMessageRequest": ModelInfo(
        name='SendMessageRequest',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='text',
                type='string',
                description='The content of the message.',
                required=False,
                min_length=1,
                max_length=1000,
            ),
            ModelProperty(
                name='attachment',
                type='ref:Attachment',
                description='',
                required=False,
                ref='Attachment',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCollaboration/v1/chats/{chatId}/messages'],
        used_in_request_endpoints=['POST /rest/ofscCollaboration/v1/chats/{chatId}/messages'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=['Attachment'],
        parent_models=[],
    ),
    "SendMessageResponse": ModelInfo(
        name='SendMessageResponse',
        description='The response body object for this operation.',
        properties=[
            ModelProperty(
                name='chatId',
                type='integer',
                description='The unique identifier of the chat in Oracle Field Service.',
                required=False,
                format='int64',
            ),
            ModelProperty(
                name='text',
                type='string',
                description='The content of the message.',
                required=False,
            ),
            ModelProperty(
                name='author',
                type='string',
                description='The login of the user who created this message.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description="The time (in UTC time zone) when the message was sent. The time is in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='sequenceNumber',
                type='integer',
                description='The sequence number of the message in the chat.<b>Note:</b> This number may not be unique.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='messageId',
                type='integer',
                description='The unique identifier of the message in Oracle Field Service.',
                required=False,
                format='int32',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "GetMessageResponse": ModelInfo(
        name='GetMessageResponse',
        description='The list of messages of the chat.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of messages retrieved.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
                format='int32',
            ),
            ModelProperty(
                name='direction',
                type='string',
                description='order of response retrieved. default: desc',
                required=False,
                enum=['asc', 'desc'],
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of items containing the message details.',
                required=False,
                items={'type': 'unknown', '$ref': 'Message'},
            ),
            ModelProperty(
                name='links',
                type='array',
                description='The array of pagination items.',
                required=False,
                items={'type': 'unknown', '$ref': 'PaginationLink'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCollaboration/v1/chats/{chatId}/messages'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCollaboration/v1/chats/{chatId}/messages'],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=['PaginationLink', 'Message'],
        parent_models=[],
    ),
    "InviteChatRequest": ModelInfo(
        name='InviteChatRequest',
        description='',
        properties=[
            ModelProperty(
                name='login',
                type='string',
                description='',
                required=True,
                min_length=1,
            ),
        ],
        required_properties=['login'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCollaboration/v1/chats/{chatId}/participants/invite'],
        used_in_request_endpoints=['POST /rest/ofscCollaboration/v1/chats/{chatId}/participants/invite'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "StartChatRequest": ModelInfo(
        name='StartChatRequest',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='text',
                type='string',
                description='The content of the message.',
                required=False,
                min_length=1,
                max_length=1000,
            ),
            ModelProperty(
                name='attachment',
                type='ref:Attachment',
                description='',
                required=False,
                ref='Attachment',
            ),
            ModelProperty(
                name='recipients',
                type='array',
                description='The login of the message recipients in the chat.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='helpdesk',
                type='integer',
                description='helpdesk id',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCollaboration/v1/chats'],
        used_in_request_endpoints=['POST /rest/ofscCollaboration/v1/chats'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='collaboration',
        schema_type='object',
        examples=[],
        nested_models=['Attachment'],
        parent_models=[],
    ),
    "Participant": ModelInfo(
        name='Participant',
        description='The details of the participant.',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='The name of the participant.',
                required=False,
            ),
            ModelProperty(
                name='login',
                type='string',
                description='The login of the participant.',
                required=False,
            ),
            ModelProperty(
                name='present',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the participant is present in the chat. If false, then then the participant is not present in the chat.',
                required=False,
            ),
            ModelProperty(
                name='online',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then the participant is online. If false, then then the participant is not online.',
                required=False,
            ),
            ModelProperty(
                name='invitedBy',
                type='string',
                description='The login of the user who invited the participant to the chat or conference. This field is present only for the chats started by a user.',
                required=False,
            ),
            ModelProperty(
                name='invitedTime',
                type='string',
                description="The time (in UTC time zone) when the participant was invited to a chat or conference. The time is specified in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='leftTime',
                type='string',
                description="The time (in UTC time zone) when the participant left the chat. The time is specified in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['ParticipantList'],
    ),
    "StartChatResponse": ModelInfo(
        name='StartChatResponse',
        description='The details of the new chat.',
        properties=[
            ModelProperty(
                name='chatId',
                type='integer',
                description='The unique identifier of the chat in Oracle Field Service.',
                required=False,
                format='int64',
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the chat. The possible values of this field are:<ul><li>normal - A chat between two participants</li><li>conference - A chat with more than two participants</li></ul>',
                required=False,
                enum=['normal', 'conference'],
            ),
            ModelProperty(
                name='startedTime',
                type='string',
                description="The time (in UTC time zone) when the chat started. The time is in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='startedBy',
                type='string',
                description='The login of the user who started the chat. This field is present only for the chats started by a user.',
                required=False,
            ),
            ModelProperty(
                name='participants',
                type='array',
                description='Link to participant of the chat',
                required=False,
                items={'type': 'unknown', '$ref': 'PaginationLink'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['PaginationLink'],
        parent_models=[],
    ),
    "Attachment": ModelInfo(
        name='Attachment',
        description='',
        properties=[
            ModelProperty(
                name='type',
                type='string',
                description='type of attachment',
                required=True,
                enum=['activity', 'resource', 'inventory', 'image'],
            ),
            ModelProperty(
                name='id',
                type='string',
                description='attachment entity ID. activity, resource or inventory ID. no ID field required for image type',
                required=False,
            ),
            ModelProperty(
                name='content',
                type='ref:ImageContent',
                description='',
                required=False,
                ref='ImageContent',
            ),
        ],
        required_properties=['type'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['ImageContent'],
        parent_models=['Message', 'SendMessageRequest', 'StartChatRequest'],
    ),
    "ImageContent": ModelInfo(
        name='ImageContent',
        description='',
        properties=[
            ModelProperty(
                name='filename',
                type='string',
                description='image file name',
                required=True,
            ),
            ModelProperty(
                name='mediaType',
                type='string',
                description='media type',
                required=True,
            ),
            ModelProperty(
                name='imageData',
                type='string',
                description='base64 value of the image content',
                required=True,
            ),
        ],
        required_properties=['filename', 'mediaType', 'imageData'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['Attachment'],
    ),
    "PaginationLink": ModelInfo(
        name='PaginationLink',
        description='The pagination links.',
        properties=[
            ModelProperty(
                name='rel',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='href',
                type='string',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['AddressBookList', 'ParticipantList', 'GetMessageResponse', 'StartChatResponse'],
    ),
    "activities": ModelInfo(
        name='activities',
        description='The collection of activities retrieved based on the search criteria.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The list of activities retrieved based on the search criteria.',
                required=False,
                items={'type': 'unknown', '$ref': 'activity'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of activity records in the response.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/multidaySegments', 'GET /rest/ofscCore/v1/activities/custom-actions/search'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/multidaySegments', 'GET /rest/ofscCore/v1/activities/custom-actions/search'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activity'],
        parent_models=[],
    ),
    "activity": ModelInfo(
        name='activity',
        description='The array of activity property objects.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description='The name of the customer\'s time zone. For example, Eastern. By default, the time zone of the resource to which the activity is assigned is used.For a list of supported time zones, see <a href="OFSC_Supported_Time_Zones.html">Supported Time Zones</a>.',
                required=False,
            ),
            ModelProperty(
                name='timeZoneIANA',
                type='string',
                description="The IANA name of the time zone. For more information, visit https://www.iana.org/time-zones. For example, America/New_York. This field is read-only, but when creating or updating an activity, the field 'timeZone' accepts both IANA names and Oracle Field Service specific names.",
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZone',
                type='string',
                description='The time zone of the resource to which this activity is assigned (for example, Eastern). This is a read-only field and may change when the activity is reassigned to another resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZoneIANA',
                type='string',
                description="The IANA name of the resource's time zone (for example, America/New_York). This field is read-only and may change when the activity is reassigned to another resource.",
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZoneDiff',
                type='integer',
                description="The difference between UTC and the resource's local time, displayed in minutes. For example, -180 means that the resource time is 3 hours behind UTC. This field is read-only and may change when the activity is reassigned to another resource.",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartOutput',
                description='',
                required=False,
                ref='serviceWindowStartOutput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndOutput',
                description='',
                required=False,
                ref='serviceWindowEndOutput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartOutput',
                description='',
                required=False,
                ref='slaWindowStartOutput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndOutput',
                description='',
                required=False,
                ref='slaWindowEndOutput',
            ),
            ModelProperty(
                name='startTime',
                type='string',
                description="The estimated time of arrival for the activities in 'pending' status and the actual start time for the activities in 'started' and 'completed' status. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format in the time zone of the resource to which the activity is assigned.",
                required=False,
            ),
            ModelProperty(
                name='endTime',
                type='string',
                description='The predicted or the actual end time of the activity. The time is displayed in the time zone of the resource to which the activity is assigned and is in YYYY-MM-DD HH:MM:SS format.',
                required=False,
            ),
            ModelProperty(
                name='firstManualOperation',
                type='string',
                description='The name of the first manual operation on the activity.',
                required=False,
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description="The work zone in which the activity occurs. It is a read-only field that is automatically assigned to an activity, based on the company setting 'work zone key' and the activity properties. For example, if 'work zone key' is the first 4 symbols of the 'city' field, then the activity with city=Belfast will have a work zone assigned which has 'BELF' as one of its keys.",
                required=False,
            ),
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The estimated time taken to travel to this activity. For activities that were started (status is \'started\', \'completed\', \'notdone\') this parameter indicates reported travelling time, which is calculated based on the actual times.Notice that reported travelling time keeps the paid part of the travelling time and may be different from the value shown in UI, depending on the "Travel Allowance" configuration of resource type.(Exception : the "activityChanges" object of activity events always brings the full value of the travelling time).',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowStart',
                type='string',
                description='The time when the activity delivery window starts. The time is displayed in the time zone of the resource to which the activity is assigned and is in HH:MM:SS format.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer where the activity is scheduled. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic longitude coordinate that specifies the location of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationOutput',
                description='',
                required=False,
                ref='durationOutput',
            ),
            ModelProperty(
                name='timeOfAssignment',
                type='string',
                description='The time when the activity is assigned to the technician. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This field is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='ref:timeDeliveredStartInput',
                description='',
                required=False,
                ref='timeDeliveredStartInput',
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which this activity is assigned. This field is not returned if the resource ID is empty. <b>Note:</b> Do not use empty strings in requests.',
                required=False,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time when the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied while processing an activity. Predefined company-specific rules cover the following:\n<ul><li>The resources to which the activity is assigned.</li>\n<li>The activity processing details.</li>\n<li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='This field may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='masterActivityId',
                type='integer',
                description="The identifier of a segmentable activity. It is available for individual segments which have the record type set to 'multiday_activity_segment'. This field is not set for regular activities.",
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowEnd',
                type='string',
                description='The time when the activity delivery window ends. The time is displayed in the time zone of the resource to which the activity is assigned and is in HH:MM:SS format.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the activity. As a technician works through the activity, the status changes. The actions that are available for an activity are based on this status. A newly created activity has the status as 'pending', but it can then be changed to 'cancelled' or 'started'. The status of an activity can be changed to 'complete', 'notdone', or 'suspended' only if it has the status as 'started'.",
                required=False,
                enum=['cancelled', 'completed', 'suspended', 'started', 'enroute', 'pending', 'notdone'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='positionInRoute',
                type='integer',
                description='The position of the activity in the route. For not-ordered activities, this field is not present in the response. For ordered activities, a 1-based number is returned.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='ref:timeDeliveredEndInput',
                description='',
                required=False,
                ref='timeDeliveredEndInput',
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. The time slot also indicates the service window for the activity.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic latitude coordinate that specifies the location of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description="The type of the activity record. The following values are allowed:<ul><li>regular: This is the default record type for most new activities.</li><li>prework: This type of record is created if a technician has to perform some work before the actual activity starts.</li><li>reopened: A record of this type is created when an activity is reopened for some reason.</li><li>multiday_activity: This record type is created when the 'activityType' indicates that it is a segmentable activity.</li><li>multiday_activity_segment: A number of records of this type are created for segmentable activities, based on their duration and time slot settings.</li></ul>",
                required=False,
                enum=['regular', 'reopened', 'prework', 'multiday_activity', 'multiday_activity_segment'],
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The cell phone number of the customer. From version 17.2.1, the phone number is saved with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='firstManualOperationUser',
                type='string',
                description='The user who performed the first manual operation on the activity.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity.',
                required=False,
            ),
            ModelProperty(
                name='autoRoutedToDate',
                type='string',
                description='The date to which the activity was moved automatically by routing. Rescheduling the activity does not change this value. It is a read-only field.',
                required=False,
            ),
            ModelProperty(
                name='autoRoutedToResource',
                type='string',
                description='The external ID of resource to which the activity was last assigned by routing. Reassigning the activity does not change this value. It is a read-only field. If the field has no value, it means that the routing assigned the activity to a resource with empty external ID.',
                required=False,
            ),
            ModelProperty(
                name='travelEstimationMethod',
                type='string',
                description='The travel estimation method. It is a read-only field. The following values are returned:<ul><li>Airline Distance</li><li>Airline Distance and Statistics</li><li>External Adjustment</li><li>Manual Adjustment</li><li>Not Estimated</li><li>Point to Point</li><li>Same Location</li><li>Statistics</li><li>Street Level Routing</li><li>Travel key based Airline Distance</li><li>Using Defaults</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='coordinateAccuracy',
                type='string',
                description='The coordinate accuracy of the activity. It is a read-only field. The following values are returned:<ul><li>Low</li><li>Medium</li><li>High</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='activityFlow',
                type='string',
                description='Activity flow label',
                required=False,
            ),
            ModelProperty(
                name='ibAssetId',
                type='integer',
                description='The identifier of the installed based asset the activity is linked to. Optional field. Foreign key to CSE_ASSETS_B.ASSET_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectElementId',
                type='integer',
                description='The identifier of the project task the activity is linked to. Optional field. Foreign key to PJF_PROJ_ELEMENTS_B.PROJ_ELEMENT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectId',
                type='integer',
                description='The identifier of the project the activity is linked to. Optional field. Foreign key to PJF_PROJECTS_ALL_B.PROJECT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='svcWorkOrderId',
                type='integer',
                description='The identifier of the fusion service work order the activity is linked to. Optional field. Foreign key to SVC_WORK_ORDERS.WO_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderId',
                type='integer',
                description='The identifier of the maintenance work order the activity is linked to. Optional field. Foreign key to WIE_WORK_ORDERS_B.WORK_ORDER_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderOperationId',
                type='integer',
                description='The identifier of the maintenance work order operation the activity is linked to. Optional field. Foreign key to WIE_WO_OPERATIONS_B.WO_OPERATION_ID in Fusion.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartOutput', 'serviceWindowEndOutput', 'timeDeliveredEndInput', 'slaWindowStartOutput', 'durationOutput', 'slaWindowEndOutput', 'timeDeliveredStartInput'],
        parent_models=['activities', 'getActivitiesResponse', 'findNearbyActivitiesItem', 'route'],
    ),
    "createActivitySchema": ModelInfo(
        name='createActivitySchema',
        description='The properties of the new activity.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. By default, the time zone of the resource (to which the activity is assigned) is used.This parameter accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. For a list of supported time zones, see <a href= http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartInput',
                description='',
                required=False,
                ref='serviceWindowStartInput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndInput',
                description='',
                required=False,
                ref='serviceWindowEndInput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartInput',
                description='',
                required=False,
                ref='slaWindowStartInput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndInput',
                description='',
                required=False,
                ref='slaWindowEndInput',
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationInput',
                description='',
                required=False,
                ref='durationInput',
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This field is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which this activity is assigned. This field is not returned if the resource ID is empty.<b>Note:</b> Do not use empty strings in requests.',
                required=True,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied when processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources that the activity can be assigned to.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=True,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='The apptNumber parameter may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. Time Slot also indicates the service window for the activity. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The cell phone number of the customer. The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='ref:timeDeliveredStartInput',
                description='',
                required=False,
                ref='timeDeliveredStartInput',
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='ref:timeDeliveredEndInput',
                description='',
                required=False,
                ref='timeDeliveredEndInput',
            ),
            ModelProperty(
                name='setPositionInRoute',
                type='ref:setPositionInRouteRequestField',
                description='',
                required=False,
                ref='setPositionInRouteRequestField',
            ),
            ModelProperty(
                name='setTravelTime',
                type='ref:setTravelTimeRequestField',
                description='',
                required=False,
                ref='setTravelTimeRequestField',
            ),
            ModelProperty(
                name='activityFlow',
                type='string',
                description='Activity flow label',
                required=False,
            ),
            ModelProperty(
                name='ibAssetId',
                type='integer',
                description='The identifier of the installed based asset the activity is linked to. Optional field. Foreign key to CSE_ASSETS_B.ASSET_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectElementId',
                type='integer',
                description='The identifier of the project task the activity is linked to. Optional field. Foreign key to PJF_PROJ_ELEMENTS_B.PROJ_ELEMENT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectId',
                type='integer',
                description='The identifier of the project the activity is linked to. Optional field. Foreign key to PJF_PROJECTS_ALL_B.PROJECT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='svcWorkOrderId',
                type='integer',
                description='The identifier of the fusion service work order the activity is linked to. Optional field. Foreign key to SVC_WORK_ORDERS.WO_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderId',
                type='integer',
                description='The identifier of the maintenance work order the activity is linked to. Optional field. Foreign key to WIE_WORK_ORDERS_B.WORK_ORDER_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderOperationId',
                type='integer',
                description='The identifier of the maintenance work order operation the activity is linked to. Optional field. Foreign key to WIE_WO_OPERATIONS_B.WO_OPERATION_ID in Fusion.',
                required=False,
            ),
        ],
        required_properties=['activityType', 'resourceId'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartInput', 'slaWindowStartInput', 'serviceWindowEndInput', 'setTravelTimeRequestField', 'slaWindowEndInput', 'timeDeliveredEndInput', 'setPositionInRouteRequestField', 'timeDeliveredStartInput', 'durationInput'],
        parent_models=[],
    ),
    "activityFMRSchema": ModelInfo(
        name='activityFMRSchema',
        description='The properties of the new activity.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. By default, the time zone of the resource (to which the activity is assigned) is used.This parameter accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. For a list of supported time zones, see <a href= http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartInput',
                description='',
                required=False,
                ref='serviceWindowStartInput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndInput',
                description='',
                required=False,
                ref='serviceWindowEndInput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartInput',
                description='',
                required=False,
                ref='slaWindowStartInput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndInput',
                description='',
                required=False,
                ref='slaWindowEndInput',
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowStart',
                type='string',
                description="The time when the activity delivery window starts. The time is displayed in the time zone of the resource to which the activity is assigned, and is in 'HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationInput',
                description='',
                required=False,
                ref='durationInput',
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This field is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which this activity is assigned. This field is not returned if the resource ID is empty.<b>Note:</b> Do not use empty strings in requests.',
                required=False,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied when processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources that the activity can be assigned to.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='The apptNumber parameter may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowEnd',
                type='string',
                description="The time when the activity delivery window ends. The time is displayed in the time zone of the resource to which the activity is assigned, and is in 'HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. Time Slot also indicates the service window for the activity. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The cell phone number of the customer. The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240.",
                required=False,
            ),
            ModelProperty(
                name='setPositionInRoute',
                type='ref:setPositionInRouteRequestField',
                description='',
                required=False,
                ref='setPositionInRouteRequestField',
            ),
            ModelProperty(
                name='setTravelTime',
                type='ref:setTravelTimeRequestField',
                description='',
                required=False,
                ref='setTravelTimeRequestField',
            ),
            ModelProperty(
                name='requiredInventories',
                type='array',
                description='List of inventories required by activity. Max 100 items.',
                required=False,
                items={'type': 'unknown', '$ref': 'requiredInventory'},
            ),
            ModelProperty(
                name='resourcePreferences',
                type='array',
                description='List of resource preferences for the activity. Max 100 items.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourcePreference'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartInput', 'resourcePreference', 'slaWindowStartInput', 'serviceWindowEndInput', 'setTravelTimeRequestField', 'slaWindowEndInput', 'setPositionInRouteRequestField', 'requiredInventory', 'durationInput'],
        parent_models=['findMatchingResourcesRequestSchema', 'findResourcesForUrgentAssignmentRequestSchema'],
    ),
    "getActivitySchema": ModelInfo(
        name='getActivitySchema',
        description='The properties of the activity.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. For example, Eastern. For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='timeZoneIANA',
                type='string',
                description="The IANA name of the time zone. (https://www.iana.org/time-zones). For example, America/New_York.This field is read-only, but when creating or updating an activity, the field 'timeZone' accepts both IANA names and Oracle Field Service specific names.",
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZone',
                type='string',
                description='The time zone of the resource to which this activity is assigned (for example, Eastern). This is a read-only field and may change when the activity is reassigned to another resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZoneIANA',
                type='string',
                description="The IANA name of the resource's time zone (For example, America/New_York).This field is read-only and may change when the activity is reassigned to another resource.",
                required=False,
            ),
            ModelProperty(
                name='resourceTimeZoneDiff',
                type='integer',
                description="The difference between UTC and the resource's local time, displayed in minutes. For example, -180 means that the resource time is 3 hours behind UTC.This field is read-only and may change when the activity is reassigned to another resource.",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartOutput',
                description='',
                required=False,
                ref='serviceWindowStartOutput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndOutput',
                description='',
                required=False,
                ref='serviceWindowEndOutput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartOutput',
                description='',
                required=False,
                ref='slaWindowStartOutput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndOutput',
                description='',
                required=False,
                ref='slaWindowEndOutput',
            ),
            ModelProperty(
                name='startTime',
                type='string',
                description="The estimated time of arrival for the activities in 'pending' status, and the actual start time for the activities in 'started' and 'completed' status. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format, in the time zone of the resource to which the activity is assigned.",
                required=False,
            ),
            ModelProperty(
                name='endTime',
                type='string',
                description="The predicted or the actual end time of the activity. The time is displayed in the time zone of the resource to which the activity is assigned, and is in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='firstManualOperation',
                type='string',
                description='The name of the first manual operation on the activity.',
                required=False,
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description="The work zone in which the activity occurs. It is a read-only field that is automatically assigned to an activity, based on the company setting 'work zone key' and the activity properties. For example, if 'work zone key' is the first 4 symbols of the 'city' field, then the activity with city='Belfast' will have a work zone assigned which has 'BELF' as one of its keys.",
                required=False,
            ),
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The estimated time taken to travel to this activity. For activities that were started (status is \'started\', \'completed\', \'notdone\') this parameter indicates reported travelling time, which is calculated based on the actual times.Notice that reported travelling time keeps the paid part of the travelling time and may be different from the value shown in UI, depending on the "Travel Allowance" configuration of resource type.(Exception : the "activityChanges" object of activity events always brings the full value of the travelling time).',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowStart',
                type='string',
                description='The time when the activity delivery window starts. The time is displayed in the time zone of the resource to which the activity is assigned, and is in HH:MM:SS format.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer where the activity is scheduled. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationOutput',
                description='',
                required=False,
                ref='durationOutput',
            ),
            ModelProperty(
                name='timeOfAssignment',
                type='string',
                description='The time when the activity is assigned to the technician. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This field is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='ref:timeDeliveredStartInput',
                description='',
                required=False,
                ref='timeDeliveredStartInput',
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which this activity is assigned. This field is not returned if the resource ID is empty.<b>Note:</b> Do not use empty strings in requests.',
                required=False,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied when processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources that the activity can be assigned to.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='This field may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='masterActivityId',
                type='integer',
                description='The identifier of a segmentable activity. It is available for activities that are segments of a segmentable activity which has the recordType=multiday_activity_segment. This field is not set for regular activities.',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowEnd',
                type='string',
                description="The time when the activity delivery window ends. The time is displayed in the time zone of the resource to which the activity is assigned, and is in 'HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the activity. As a technician works through the activity, the status changes. The actions that are available for an activity are based on this status.A newly created activity has the status as 'pending', it can then be changed to 'cancelled' or 'started'. The status of an activity can be changed to 'complete', 'notdone', or 'suspended' only if it has the status as 'started'.",
                required=False,
                enum=['cancelled', 'completed', 'suspended', 'started', 'enroute', 'pending', 'notdone'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='positionInRoute',
                type='integer',
                description='The position of the activity in the route. For not-ordered activities, this field is not present in the response. For ordered activities, a 1-based number is returned.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60.',
                required=False,
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='ref:timeDeliveredEndInput',
                description='',
                required=False,
                ref='timeDeliveredEndInput',
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. The time slot also indicates the service window for the activity. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description="The type of the activity record. The following values are allowed:<ul><li>regular -  this is the default record type for most new activities.</li><li>prework - this type of record is created if a technician has to perform some work before the actual activity starts.</li><li>reopened - this type of record is created when an activity is reopened for some reason.</li><li>multiday_activity - this record type is created when the 'activityType' indicates that this is a segmentable activity.</li><li>multiday_activity_segment - a number of these record types are created for segmentable activities, based on their duration and time slot settings.</li></ul>",
                required=False,
                enum=['regular', 'reopened', 'prework', 'multiday_activity', 'multiday_activity_segment'],
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The cell phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='firstManualOperationUser',
                type='string',
                description='The user who performed the first manual operation on the activity.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240.",
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='autoRoutedToDate',
                type='string',
                description='The date to which the activity was moved automatically by routing. Rescheduling the activity does not change this value. It is a read-only field.',
                required=False,
            ),
            ModelProperty(
                name='autoRoutedToResource',
                type='string',
                description='The external ID of resource to which the activity was last assigned by routing. Reassigning the activity does not change this value. It is a read-only field. If the field has no value, it means that the routing assigned the activity to a resource with empty external ID.',
                required=False,
            ),
            ModelProperty(
                name='travelEstimationMethod',
                type='string',
                description='The travel estimation method. It is a read-only field. The following values are returned:<ul><li>Airline Distance</li><li>Airline Distance and Statistics</li><li>External Adjustment</li><li>Manual Adjustment</li><li>Not Estimated</li><li>Point to Point</li><li>Same Location</li><li>Statistics</li><li>Street Level Routing</li><li>Travel key based Airline Distance</li><li>Using Defaults</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='coordinateAccuracy',
                type='string',
                description='The coordinate accuracy of the activity. It is a read-only field. The following values are returned:<ul><li>Low</li><li>Medium</li><li>High</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='activityFlow',
                type='string',
                description='Activity flow label',
                required=False,
            ),
            ModelProperty(
                name='ibAssetId',
                type='integer',
                description='The identifier of the installed based asset the activity is linked to. Optional field. Foreign key to CSE_ASSETS_B.ASSET_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectElementId',
                type='integer',
                description='The identifier of the project task the activity is linked to. Optional field. Foreign key to PJF_PROJ_ELEMENTS_B.PROJ_ELEMENT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectId',
                type='integer',
                description='The identifier of the project the activity is linked to. Optional field. Foreign key to PJF_PROJECTS_ALL_B.PROJECT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='svcWorkOrderId',
                type='integer',
                description='The identifier of the fusion service work order the activity is linked to. Optional field. Foreign key to SVC_WORK_ORDERS.WO_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderId',
                type='integer',
                description='The identifier of the maintenance work order the activity is linked to. Optional field. Foreign key to WIE_WORK_ORDERS_B.WORK_ORDER_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderOperationId',
                type='integer',
                description='The identifier of the maintenance work order operation the activity is linked to. Optional field. Foreign key to WIE_WO_OPERATIONS_B.WO_OPERATION_ID in Fusion.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/activities/{activityId}', 'GET /rest/ofscCore/v1/activities/{activityId}', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/startPrework', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/delay', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/start', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/enroute', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/stopTravel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/complete', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscCore/v1/activities/{activityId}', 'GET /rest/ofscCore/v1/activities/{activityId}', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/startPrework', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/delay', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/start', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/enroute', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/stopTravel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/complete', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartOutput', 'serviceWindowEndOutput', 'timeDeliveredEndInput', 'slaWindowStartOutput', 'durationOutput', 'slaWindowEndOutput', 'timeDeliveredStartInput'],
        parent_models=[],
    ),
    "updateActivitySchema": ModelInfo(
        name='updateActivitySchema',
        description='The list of activity properties.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. For example, Eastern. By default, the time zone of the resource (to which the activity is assigned) is used. For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartInput',
                description='',
                required=False,
                ref='serviceWindowStartInput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndInput',
                description='',
                required=False,
                ref='serviceWindowEndInput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartInput',
                description='',
                required=False,
                ref='slaWindowStartInput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndInput',
                description='',
                required=False,
                ref='slaWindowEndInput',
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer where the activity is scheduled. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The longitude coordinate (in degrees) of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationInput',
                description='',
                required=False,
                ref='durationInput',
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This parameter is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied while processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources to which the activities can be assigned.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='The field may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the activity. As a technician works through the activity, the status changes. The actions that are available for an activity are based on this status.A newly created activity has the status as 'pending', but it can then be changed to 'cancelled' or 'started'. The status of an activity can be changed to 'complete', 'notdone', or 'suspended' only if it has the status as 'started'.",
                required=False,
                enum=['cancelled', 'completed', 'suspended', 'started', 'enroute', 'pending', 'notdone'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. The time slot also indicates the service window for the activity.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The latitude coordinate (in degrees) of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='multidayTimeToComplete',
                type='integer',
                description='The total duration of the segmentable activity. Maximum value is 599995.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='ref:timeDeliveredStartInput',
                description='',
                required=False,
                ref='timeDeliveredStartInput',
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='ref:timeDeliveredEndInput',
                description='',
                required=False,
                ref='timeDeliveredEndInput',
            ),
            ModelProperty(
                name='setTravelTime',
                type='ref:setTravelTimeRequestField',
                description='',
                required=False,
                ref='setTravelTimeRequestField',
            ),
            ModelProperty(
                name='activityFlow',
                type='string',
                description='Activity flow label',
                required=False,
            ),
            ModelProperty(
                name='ibAssetId',
                type='integer',
                description='The identifier of the installed based asset the activity is linked to. Optional field. Foreign key to CSE_ASSETS_B.ASSET_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectElementId',
                type='integer',
                description='The identifier of the project task the activity is linked to. Optional field. Foreign key to PJF_PROJ_ELEMENTS_B.PROJ_ELEMENT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectId',
                type='integer',
                description='The identifier of the project the activity is linked to. Optional field. Foreign key to PJF_PROJECTS_ALL_B.PROJECT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='svcWorkOrderId',
                type='integer',
                description='The identifier of the fusion service work order the activity is linked to. Optional field. Foreign key to SVC_WORK_ORDERS.WO_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderId',
                type='integer',
                description='The identifier of the maintenance work order the activity is linked to. Optional field. Foreign key to WIE_WORK_ORDERS_B.WORK_ORDER_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderOperationId',
                type='integer',
                description='The identifier of the maintenance work order operation the activity is linked to. Optional field. Foreign key to WIE_WO_OPERATIONS_B.WO_OPERATION_ID in Fusion.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/activities/{activityId}'],
        used_in_request_endpoints=['PATCH /rest/ofscCore/v1/activities/{activityId}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartInput', 'slaWindowStartInput', 'serviceWindowEndInput', 'setTravelTimeRequestField', 'slaWindowEndInput', 'timeDeliveredEndInput', 'timeDeliveredStartInput', 'durationInput'],
        parent_models=[],
    ),
    "bulkUpdateActivitySchema": ModelInfo(
        name='bulkUpdateActivitySchema',
        description='The properties of the specified activity.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer. Maximum field length is 320. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='accessSchedule',
                type='ref:activityAccessSchedule',
                description='',
                required=False,
                ref='activityAccessSchedule',
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. This parameter accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.This parameter is optional and defaults to the time zone of the resource to which the activity is assigned.Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='ref:serviceWindowStartInput',
                description='',
                required=False,
                ref='serviceWindowStartInput',
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='ref:serviceWindowEndInput',
                description='',
                required=False,
                ref='serviceWindowEndInput',
            ),
            ModelProperty(
                name='slaWindowStart',
                type='ref:slaWindowStartInput',
                description='',
                required=False,
                ref='slaWindowStartInput',
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='ref:slaWindowEndInput',
                description='',
                required=False,
                ref='slaWindowEndInput',
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='ref:timeDeliveredStartInput',
                description='',
                required=False,
                ref='timeDeliveredStartInput',
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='ref:timeDeliveredEndInput',
                description='',
                required=False,
                ref='timeDeliveredEndInput',
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer where the activity is scheduled. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer. Maximum field length is 420. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is displayed in the time zone of the customer.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 240. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationInput',
                description='',
                required=False,
                ref='durationInput',
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This parameter is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type. Based on the activity type, predefined company-specific rules are applied while processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources to which the activities can be assigned.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='This field may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and may be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the activity. As a technician works through the activity, the status changes. The actions that are available for an activity are based on this status.A newly created activity has the status as 'pending', it can then be changed to 'cancelled' or 'started'. The status of an activity can be changed to 'complete', 'notdone', or 'suspended' only if it has the status as 'started'.",
                required=False,
                enum=['cancelled', 'completed', 'suspended', 'started', 'pending', 'notdone'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter returns two-character code (e.g. "en") in API responses. To obtain ISO code of the language (e.g. "en-US") read the "languageISO" parameter. In the requests this parameter accepts both formats (e.g. "en" or "en-US"). It is recommended to use ISO format. The language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='languageISO',
                type='string',
                description='The preferred language of the customer. This parameter is only present in the responses and will be ignored if it is present in a request. To update language use the parameter "language". The language codes listed on:  <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address. Maximum field length is 60. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. Time Slot also indicates the service window for the activity. This time is displayed in the time zone of the resource to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates that specify the location of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The customer's cell phone number. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This parameter is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='multidayActivityStatus',
                type='string',
                description='The status of the segmentable activity. Considered only if passed along with segment data, otherwise ignored.',
                required=False,
            ),
            ModelProperty(
                name='multidayTimeToComplete',
                type='integer',
                description='The total duration of the segmentable activity. This parameter is ignored for non-segmentable activities. When master activity gets a final status (multidayActivityStatus is set to completed, notdone or cancelled) the parameter multidayTimeToComplete is also ignored and the remaining time is set to 0. Maximum value is 599995.',
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342. In versions before 17.2.1, the phone number is saved as 12342342342. Maximum field length is 240. If a longer value is sent it will be truncated.",
                required=False,
            ),
            ModelProperty(
                name='setPositionInRoute',
                type='ref:setPositionInRouteRequestField',
                description='',
                required=False,
                ref='setPositionInRouteRequestField',
            ),
            ModelProperty(
                name='setTravelTime',
                type='ref:setTravelTimeRequestField',
                description='',
                required=False,
                ref='setTravelTimeRequestField',
            ),
            ModelProperty(
                name='activityFlow',
                type='string',
                description='Activity flow label',
                required=False,
            ),
            ModelProperty(
                name='ibAssetId',
                type='integer',
                description='The identifier of the installed based asset the activity is linked to. Optional field. Foreign key to CSE_ASSETS_B.ASSET_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectElementId',
                type='integer',
                description='The identifier of the project task the activity is linked to. Optional field. Foreign key to PJF_PROJ_ELEMENTS_B.PROJ_ELEMENT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='pjfProjectId',
                type='integer',
                description='The identifier of the project the activity is linked to. Optional field. Foreign key to PJF_PROJECTS_ALL_B.PROJECT_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='svcWorkOrderId',
                type='integer',
                description='The identifier of the fusion service work order the activity is linked to. Optional field. Foreign key to SVC_WORK_ORDERS.WO_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderId',
                type='integer',
                description='The identifier of the maintenance work order the activity is linked to. Optional field. Foreign key to WIE_WORK_ORDERS_B.WORK_ORDER_ID in Fusion.',
                required=False,
            ),
            ModelProperty(
                name='wieWorkOrderOperationId',
                type='integer',
                description='The identifier of the maintenance work order operation the activity is linked to. Optional field. Foreign key to WIE_WO_OPERATIONS_B.WO_OPERATION_ID in Fusion.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityAccessSchedule', 'serviceWindowStartInput', 'slaWindowStartInput', 'serviceWindowEndInput', 'setTravelTimeRequestField', 'slaWindowEndInput', 'timeDeliveredEndInput', 'setPositionInRouteRequestField', 'timeDeliveredStartInput', 'durationInput'],
        parent_models=['bulkUpdateActivityItemSchema'],
    ),
    "getActivitiesResponse": ModelInfo(
        name='getActivitiesResponse',
        description='The collection of activities.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description="The array of activity elements. The structure of this array is same as the array returned by the 'GET activities/{activityId}' operation.",
                required=False,
                items={'type': 'unknown', '$ref': 'activity'},
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='expression',
                type='string',
                description="The value of the 'q' request parameter parsed by Oracle Field Service.",
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then there are more results that can be retrieved with successive paging requests. If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/activities'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activity'],
        parent_models=[],
    ),
    "submittedForms": ModelInfo(
        name='submittedForms',
        description='The collection of associated submitted forms that are registered for the activity. ',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of associated submitted forms that are registered for the activity.',
                required=False,
                items={'type': 'unknown', '$ref': 'submittedForm'},
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request (May be different form specified in the request parameter).',
                required=False,
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='Total number of submitted forms that match the request.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then there are more results that can be retrieved with successive paging requests. If false or if the value is not present, then there are no more results or this is the final page. The default value is true.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/submittedForms'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/submittedForms'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['submittedForm'],
        parent_models=[],
    ),
    "submittedForm": ModelInfo(
        name='submittedForm',
        description='Associated submitted form to the activity.',
        properties=[
            ModelProperty(
                name='formIdentifier',
                type='object',
                description='Label of the form and unique id of the submitted form.',
                required=False,
            ),
            ModelProperty(
                name='user',
                type='string',
                description='The user identifier (login) of the user who submitted the form.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The datetime in UTC when the form was submitted. For example, 2016-04-25 12:36:11.',
                required=False,
            ),
            ModelProperty(
                name='bundles',
                type='array',
                description='List of the labels of the configured bundles to which the submitted form is related. This value is not present if the request parameter "scope" is "activity"',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='formDetails',
                type='ref:formDetails',
                description='',
                required=False,
                ref='formDetails',
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:formActivityDetails',
                description='',
                required=False,
                ref='formActivityDetails',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['formActivityDetails', 'formDetails'],
        parent_models=['submittedForms'],
    ),
    "resourcePreferences": ModelInfo(
        name='resourcePreferences',
        description='The collection of resource preferences that can be assigned to an activity. ',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The array of required preferences for the specified activity.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourcePreference'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscCore/v1/activities/{activityId}/resourcePreferences', 'GET /rest/ofscCore/v1/activities/{activityId}/resourcePreferences'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/activities/{activityId}/resourcePreferences'],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/resourcePreferences'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourcePreference'],
        parent_models=['bulkUpdateActivityItemSchema'],
    ),
    "resourcePreference": ModelInfo(
        name='resourcePreference',
        description='The resource preference of an activity.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The unique identifier of the resource in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='preferenceType',
                type='string',
                description='The type of resource preference for the activity.<ul><li>preferred - the resource is preferred while routing.</li><li>required - the activity can only be assigned to a required resource.</li><li>forbidden - the activity cannot be assigned to the specified resource.</li><li>warehouse - inventory may be installed from the specified resource</li></ul>',
                required=True,
                enum=['required', 'preferred', 'forbidden', 'warehouse'],
            ),
        ],
        required_properties=['preferenceType'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityFMRSchema', 'resourcePreferences'],
    ),
    "createCustomerInventory": ModelInfo(
        name='createCustomerInventory',
        description='',
        properties=[
            ModelProperty(
                name='serialNumber',
                type='string',
                description='The unique serial number of the inventory.',
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of the inventory.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The type of the inventory as defined in Oracle Field Service. The inventory type can be serialized or non-serialized. If serialized, then it has a serial number. If non-serialized, then it does not have a serial number.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/customerInventories'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/customerInventories'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['createResourceInventory'],
    ),
    "requiredInventories": ModelInfo(
        name='requiredInventories',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of required inventories for the specified activity.',
                required=False,
                items={'type': 'unknown', '$ref': 'requiredInventory'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscCore/v1/activities/{activityId}/requiredInventories', 'GET /rest/ofscCore/v1/activities/{activityId}/requiredInventories'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/activities/{activityId}/requiredInventories'],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/requiredInventories'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['requiredInventory'],
        parent_models=['bulkUpdateActivityItemSchema'],
    ),
    "requiredInventory": ModelInfo(
        name='requiredInventory',
        description='The array of required inventory item objects assigned to the specified activity.',
        properties=[
            ModelProperty(
                name='quantity',
                type='number',
                description='The required quantity of inventory for the specified activity.',
                required=True,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The required inventory type for the specified activity.',
                required=True,
            ),
            ModelProperty(
                name='model',
                type='string',
                description='The required inventory model for the specified activity.',
                required=True,
            ),
        ],
        required_properties=['inventoryType', 'model', 'quantity'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityFMRSchema', 'requiredInventories'],
    ),
    "linkedActivities": ModelInfo(
        name='linkedActivities',
        description='The collection of activity-to-activity relations.',
        properties=[
            ModelProperty(
                name='linkType',
                type='string',
                description='The link type specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='linkedActivityId',
                type='string',
                description='The identifier of the linked activity.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='string',
                description='The identifier of the activity linked to the processed activity.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of activity links for the specified activity.',
                required=False,
                items={'type': 'unknown', '$ref': 'linkedActivity'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/linkedActivities'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/linkedActivities'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['linkedActivity'],
        parent_models=[],
    ),
    "linkedActivity": ModelInfo(
        name='linkedActivity',
        description='The link represents the relation between two activities.',
        properties=[
            ModelProperty(
                name='toActivityId',
                type='integer',
                description='The identifier of the second linked activity.',
                required=True,
            ),
            ModelProperty(
                name='minIntervalValue',
                type='integer',
                description='The minimum time interval (in minutes) between subsequent linked activities, for the links that define the relative order of the activities. This parameter can only be sent if it is configured as "Adjustable" in the link template configuration. If the parameter is missing in the request, the value from the template wil be used.',
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='fromActivityId',
                type='integer',
                description='The identifier of the first linked activity.',
                required=True,
            ),
            ModelProperty(
                name='linkType',
                type='string',
                description='The link type specified in the request.',
                required=True,
            ),
            ModelProperty(
                name='alerts',
                type='integer',
                description="The bitmask of alert flags for the activity link. If the value returned is '0', then there are no alerts for the activity link.",
                required=False,
            ),
            ModelProperty(
                name='maxIntervalValue',
                type='integer',
                description='The maximum time interval (in minutes) between subsequent linked activities, for the links that define the relative order of the activities. This parameter can only be sent if it is configured as "Adjustable" in the link template configuration. If the parameter is missing in the request, the value from the template wil be used.',
                required=False,
                minimum=0,
                maximum=65535,
            ),
        ],
        required_properties=['fromActivityId', 'toActivityId', 'linkType'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/linkedActivities', 'PUT /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}', 'GET /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}', 'PUT /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/linkedActivities', 'PUT /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}'],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}', 'PUT /rest/ofscCore/v1/activities/{activityId}/linkedActivities/{linkedActivityId}/linkTypes/{linkType}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['linkedActivities'],
    ),
    "setTravelTimeRequestField": ModelInfo(
        name='setTravelTimeRequestField',
        description='The objects used to set the travel time of the activity. The travel time is set only if the specified previousActivity/previousActivityId is ordered before the activity for which the travel time is set.',
        properties=[
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The travel time for the specified activity.',
                required=True,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='position',
                type='string',
                description='The expected position of the activity in a route.To adjust the travel time of an activity, specify the location from where the travel is starting. The location can be the start of the route or another activity. This information is used when activities are reordered or moved while performing a sequence of operations.',
                required=True,
                enum=['first', 'afterActivity'],
            ),
            ModelProperty(
                name='source',
                type='string',
                description='The origin of the travel time data. The following are the allowed values:<ul><li>manual - indicates that the travel time value is entered manually by a user.</li><li>external - indicates that the travel time value is estimated based on the statistics or street-level routing service results.</li>',
                required=False,
                enum=['manual', 'external'],
            ),
            ModelProperty(
                name='previousActivityId',
                type='integer',
                description="The identifier of a previous activity that requires travel time calculation.If an activity doesn't require traveling (for example, calling your manager), then the identifier of the activity cannot be used as the 'Travel previous activity ID'. In such case, it is assigned to an ID of a previous activity that required travel. This parameter is mandatory when the value of the parameter 'position' is 'afterActivity'.<b>Note:</b> The operation does not return any error if the adjustment cannot be made because the specified 'previousActivityId' doesn't correspond to a real-time activity. This can be detected by verifying the 'travelTime' value returned.",
                required=False,
            ),
            ModelProperty(
                name='previousActivity',
                type='object',
                description="The objects in this array are used instead of the 'previousActivityId' parameter to find activities when internal IDs cannot be used. For example, it is used for the bulkUpdate operation.The 'previousActivity' activity array contains two items: 'apptNumber' and 'customerNumber'. The parameter 'apptNumber' is mandatory. The parameter 'customerNumber' is only required when the 'bulkUpdate/identifyActivityBy' option is set to 'apptNumberPlusCustomerNumber'.The operation returns an error if the system is unable to find any activity using the specified 'apptNumber' and 'customerNumber' values.",
                required=False,
            ),
        ],
        required_properties=['position', 'travelTime'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "serviceWindowStartInput": ModelInfo(
        name='serviceWindowStartInput',
        description="The time when the service window starts for the activity. The time is displayed in 'HH:MM:SS' format.<p>If the activity type feature 'SLA and Service window use customer time zone' is enabled, then the service window is accepted in the time zone of the customer. If it is not enabled, then the Service Window is accepted in the time zone of the resource to which the activity is currently assigned.</p><p>If the activity is later assigned to another resource and the activity type feature 'SLA and Service window use customer time zone' is enabled, then the Service Window is recalculated so that the fields are not changed in the customer's time zone, but they are changed in the time zone of the new resource.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "serviceWindowStartOutput": ModelInfo(
        name='serviceWindowStartOutput',
        description="The time when the service window starts for the activity. The time is displayed in 'HH:MM:SS' format.<p>Service window is returned in the time zone of the resource to which the activity is currently assigned.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'getActivitySchema'],
    ),
    "serviceWindowEndInput": ModelInfo(
        name='serviceWindowEndInput',
        description="The time when the service window ends for the activity. The time is displayed in 'HH:MM:SS' format.<p>If the activity type feature 'SLA and Service window use customer time zone' is enabled, then the service window is accepted in the time zone of the customer. If it is not enabled, then the Service Window is accepted in the time zone of the resource to which the activity is currently assigned.</p><p>If the activity is later assigned to another resource and the activity type feature 'SLA and Service window use customer time zone' is enabled, then the Service Window is recalculated so that the fields are not changed in the customer's time zone, but they are changed in the time zone of the new resource.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "serviceWindowEndOutput": ModelInfo(
        name='serviceWindowEndOutput',
        description="The time when the service window ends for the activity. The time is displayed in 'HH:MM:SS' format.<p>Service window is returned in the time zone of the resource to which the activity is currently assigned.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'getActivitySchema'],
    ),
    "slaWindowStartInput": ModelInfo(
        name='slaWindowStartInput',
        description="<p>The time when the service level agreement (SLA) window starts. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.<p>If the activity type feature 'SLA and Service window use customer time zone' is enabled, then the SLA is accepted in the time zone of the customer. If it is not enabled, then the SLA is accepted in the time zone of the resource to which the activity is currently assigned.</p><p>If the activity is later assigned to another resource and the activity type feature 'SLA and Service window use customer time zone' is enabled, then the SLA is recalculated so that the fields are not changed in the customer's time zone, but they are changed in the time zone of the new resource.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "slaWindowStartOutput": ModelInfo(
        name='slaWindowStartOutput',
        description="The time when the service level agreement (SLA) window starts. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.<p>SLA window is returned in the time zone of the resource to which the activity is currently assigned.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'getActivitySchema'],
    ),
    "slaWindowEndInput": ModelInfo(
        name='slaWindowEndInput',
        description="<p>The time when the service level agreement (SLA) window ends. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.<p>If the activity type feature 'SLA and Service window use customer time zone' is enabled, then the SLA is accepted in the time zone of the customer. If it is not enabled, then the SLA is accepted in the time zone of the resource to which the activity is currently assigned.</p><p>If the activity is later assigned to another resource and the activity type feature 'SLA and Service window use customer time zone' is enabled, then the SLA is recalculated so that the fields are not changed in the customer's time zone, but they are changed in the time zone of the new resource.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "slaWindowEndOutput": ModelInfo(
        name='slaWindowEndOutput',
        description="The time when the service level agreement (SLA) window ends. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.<p>SLA window is returned in the time zone of the resource to which the activity is currently assigned.</p>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'getActivitySchema'],
    ),
    "timeDeliveredStartInput": ModelInfo(
        name='timeDeliveredStartInput',
        description="The start time of the technician's arrival interval as communicated to the customer. The value is used by routing optimization engine to reduce changes to arrival time, so it is important to keep the value actual. This time is displayed in 'YYYY-MM-DD HH:MM:SS' format in the time zone of the resource to which the activity is assigned.",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'createActivitySchema', 'getActivitySchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "timeDeliveredEndInput": ModelInfo(
        name='timeDeliveredEndInput',
        description="The end time of the technician's arrival interval as communicated to the customer. The value is used by routing optimization engine to reduce changes to arrival time, so it is important to keep the value actual. This time is displayed in 'YYYY-MM-DD HH:MM:SS' format in the time zone of the resource to which the activity is assigned.",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'createActivitySchema', 'getActivitySchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "durationInput": ModelInfo(
        name='durationInput',
        description='Estimated activity duration in minutes. The duration specified in request will only be applied if the \'Calculate activity duration using statistics\' checkbox is unchecked for the Activity Type of the activity being created/updated.\nFor segmentable activities this field is only used when a new activity is created. To change the length of the segmentable activities use the field "multidayTimeToComplete" instead.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='integer',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "durationOutput": ModelInfo(
        name='durationOutput',
        description='The estimated duration of the activity in minutes.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='integer',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'getActivitySchema', 'activityChanges'],
    ),
    "activityAccessSchedule": ModelInfo(
        name='activityAccessSchedule',
        description='The schedule (that is, the set of time intervals or access hours, two intervals per week day) when the asset or the activity location is accessible. Work must start and complete during this interval. It is generally not possible to work beyond the access hours. Maximum field length is 1020. <p><b>Access Schedule Field Format</b><br>This field is a string, which contains an inner json object (encoded as a string). For example, <span style=\'font-family:monospace\'>"accessSchedule": "{\\"schedule\\":[{\\"daysOfWeek\\":[\\"Mon\\",\\"Tue\\"],\\"hours\\":[[\\"07:00\\",\\"12:00\\"]]}]}"</span> <p>The inner json object has the following schema:<div style=\'font-family:monospace;white-space:pre\'>{<br>    "type": "object",<br>    "properties": {<br>        "schedule": {<br>            "type": "array",<br>            "items": {<br>                "type": "object",<br>                "properties": {<br>                    "daysOfWeek": {<br>                        "type": "array",<br>                        "items": {<br>                            "type": "string",<br>                            "enum": [ "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" ]<br>                        }<br>                    },<br>                    "hours": {<br>                        "type": "array",<br>                        "items": {<br>                            "type": "array",<br>                            "items": { "type": "string" }<br>                        }<br>                    }<br>                }<br>            }<br>        },<br>        "exceptDates": {<br>            "type": "array",<br>            "items": { "type": "string" }<br>        }<br>    }<br>}</div>',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['activity', 'createActivitySchema', 'activityFMRSchema', 'getActivitySchema', 'updateActivitySchema', 'bulkUpdateActivitySchema'],
    ),
    "getCapacityCategoriesSchema": ModelInfo(
        name='getCapacityCategoriesSchema',
        description='The collection of capacity categories. It is not returned for an empty collection.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of capacity categories.',
                required=False,
                items={'type': 'unknown', '$ref': 'ActivityCapacityCategory'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of capacity categories records in the collection.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/capacityCategories'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/activities/{activityId}/capacityCategories'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['ActivityCapacityCategory'],
        parent_models=[],
    ),
    "ActivityCapacityCategory": ModelInfo(
        name='ActivityCapacityCategory',
        description='The capacity category of activity.',
        properties=[
            ModelProperty(
                name='capacityCategory',
                type='string',
                description='The label of the capacity category.',
                required=False,
                min_length=1,
                max_length=40,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class='ActivityCapacityCategory',
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['getCapacityCategoriesSchema'],
    ),
    "bulkUpdateLinkedActivity": ModelInfo(
        name='bulkUpdateLinkedActivity',
        description='The link between the activity key fields and the link properties.',
        properties=[
            ModelProperty(
                name='activityId',
                type='integer',
                description='',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='linkType',
                type='string',
                description='The type of the link between activities. The link types must be configured in the Oracle Field Service Manage application. The label (but not the "reverseLabel") of a link template to be used to link the activities. \nIt is referred as "Link to the second activity" in the Link templates configuration in the Oracle Field Service application.',
                required=False,
            ),
            ModelProperty(
                name='minIntervalValue',
                type='integer',
                description='The minimum time interval (in minutes) between subsequent linked activities, for the links that define the relative order of the activities. This parameter can only be sent if it is configured as "Adjustable" in the link template configuration. If the parameter is missing in the request, the value from the template wil be used.',
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='maxIntervalValue',
                type='integer',
                description='The maximum time interval (in minutes) between subsequent linked activities, for the links that define the relative order of the activities. This parameter can only be sent if it is configured as "Adjustable" in the link template configuration. If the parameter is missing in the request, the value from the template wil be used.',
                required=False,
                minimum=0,
                maximum=65535,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bulkUpdateLinkedActivities'],
    ),
    "bulkUpdateLinkedActivities": ModelInfo(
        name='bulkUpdateLinkedActivities',
        description='The array of linked activity objects which contain the link direction keys for the linked activity key fields and are defined in the identifyActivityBy and link type parameters. Note that activities in the past may only be used in links if "activityId" is specified for the identifyActivityBy.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The list of linked activity objects for the linked activity key fields.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['bulkUpdateLinkedActivity'],
        parent_models=['bulkUpdateActivityItemSchema'],
    ),
    "bulkUpdateActivityItemSchema": ModelInfo(
        name='bulkUpdateActivityItemSchema',
        description='',
        properties=[
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID to which the activity is assigned.',
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date for which the activity is scheduled. If a Null value is specified, then it means that the activity is not scheduled for any date.',
                required=False,
            ),
            ModelProperty(
                name='resourcePreferences',
                type='ref:resourcePreferences',
                description='',
                required=False,
                ref='resourcePreferences',
            ),
            ModelProperty(
                name='requiredInventories',
                type='ref:requiredInventories',
                description='',
                required=False,
                ref='requiredInventories',
            ),
            ModelProperty(
                name='inventories',
                type='object',
                description='The collection of customer inventories assigned to the activity.',
                required=False,
            ),
            ModelProperty(
                name='linkedActivities',
                type='ref:bulkUpdateLinkedActivities',
                description='',
                required=False,
                ref='bulkUpdateLinkedActivities',
            ),
        ],
        required_properties=[],
        inheritance=['bulkUpdateActivitySchema'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['resourcePreferences', 'inventoryWithCustomProperties', 'bulkUpdateLinkedActivities', 'requiredInventories', 'bulkUpdateActivitySchema'],
        parent_models=['customActionActivityBulkUpdateSchema'],
    ),
    "customActionActivityMoveSchema": ModelInfo(
        name='customActionActivityMoveSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='setDate',
                type='object',
                description="The activity is scheduled to the date specified in the 'date' parameter only if this object is available.",
                required=False,
            ),
            ModelProperty(
                name='setPositionInRoute',
                type='ref:setPositionInRouteRequestField',
                description='',
                required=False,
                ref='setPositionInRouteRequestField',
            ),
            ModelProperty(
                name='setResource',
                type='object',
                description='The activity is reassigned to the specified resource only if this object is available.',
                required=False,
            ),
            ModelProperty(
                name='moveMultidayActivitySegments',
                type='string',
                description="The parameter is used to specify how a segmentable activity should be moved to another date:<ul><li>onlyThisSegment(default): Move only this activity segment.</li><li>allSegmentsInRoute. Move all segments of this segmentable activity that are present in the same route (resource and date).</li><li>allFollowingSegments. Move this segment and all segments of this segmentable activity that follow it.</li></ul>This parameter is optional. It may be set only for multi-day activity segments. If it is not set, the default value is 'onlyThisSegment'.",
                required=False,
                enum=['onlyThisSegment', 'allSegmentsInRoute', 'allFollowingSegments'],
            ),
            ModelProperty(
                name='protectTimeDelivered',
                type='boolean',
                description="Contains one of the following values: true or false. If true, then the operation fails with the HTTP status '409 Conflict' error in case if move result causes Communicated Window violation of any activity in the route. If false, then any Communicated Window violation is ignored.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/move'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/move'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['setPositionInRouteRequestField'],
        parent_models=[],
    ),
    "reopenActivityRequest": ModelInfo(
        name='reopenActivityRequest',
        description='',
        properties=[
            ModelProperty(
                name='setPositionInRoute',
                type='ref:setPositionInRouteRequestField',
                description='',
                required=True,
                ref='setPositionInRouteRequestField',
            ),
        ],
        required_properties=['setPositionInRoute'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/reopen'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['setPositionInRouteRequestField'],
        parent_models=[],
    ),
    "setPositionInRouteRequestField": ModelInfo(
        name='setPositionInRouteRequestField',
        description='The value of this element determines the position of the activity in the route. If this element is present then activity will be put to specified position in route. The parameter is optional, if it is absent then the value "position: byServiceWindow" is used.',
        properties=[
            ModelProperty(
                name='position',
                type='string',
                description='The position of the activity in the route.',
                required=True,
                enum=['first', 'last', 'notOrdered', 'byServiceWindow', 'afterActivity'],
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description="The unique identifier of some pending ordered activity in the target route. It is used along with the 'afterActivity' value of the 'position' parameter so that to put one activity in the position after another.",
                required=False,
            ),
        ],
        required_properties=['position'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['createActivitySchema', 'activityFMRSchema', 'bulkUpdateActivitySchema', 'customActionActivityMoveSchema', 'reopenActivityRequest'],
    ),
    "customActionActivityStatusEnrouteChangeSchema": ModelInfo(
        name='customActionActivityStatusEnrouteChangeSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='time',
                type='string',
                description="The time when the action is registered. Specify the time in 'YYYY-MM-DD HH:MM:SS' format. The time must be in the time zone of the resource to which the activity is assigned. The default value is the current time. Note that the time of a custom action cannot be less then the time of the previous action. (e.g. activity cannot be suspended earlier then when it was started etc.)",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/start'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/start'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "customActionActivityStatusChangeSchema": ModelInfo(
        name='customActionActivityStatusChangeSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='time',
                type='string',
                description="The time when the action is registered. Specify the time in 'YYYY-MM-DD HH:MM:SS' format. The time must be in the time zone of the resource to which the activity is assigned. The default value is the current time. Note that the time of a custom action cannot be less then the time of the previous action. (e.g. activity cannot be suspended earlier then when it was started etc.)",
                required=False,
            ),
            ModelProperty(
                name='multidayTimeToComplete',
                type='integer',
                description='The duration of the segmentable activity. If the value of this parameter is specified when updating an individual segment, then the duration of the segmentable activity is changed to the specified value. If the value of this parameter is set to zero, then the segmentable activity ends. Maximum value is 599995.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='multidayActivityStatus',
                type='string',
                description='The status of the segmentable activity. If a value is specified for this parameter while updating an individual segment, then the status of the segmentable activity is changed to the specified value. This parameter is generally used to complete a segmentable activity.',
                required=False,
                enum=['cancelled', 'completed', 'notdone'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/complete', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/cancel', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/suspend', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/complete', 'POST /rest/ofscCore/v1/activities/{activityId}/custom-actions/notDone'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "customActionActivityBulkUpdateSchema": ModelInfo(
        name='customActionActivityBulkUpdateSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='updateParameters',
                type='object',
                description='The parameters that determine the action to be performed on an existing activity in Oracle Field Service.',
                required=True,
            ),
            ModelProperty(
                name='activities',
                type='array',
                description='The list of activity properties.',
                required=True,
                items={'type': 'unknown', '$ref': 'bulkUpdateActivityItemSchema'},
            ),
        ],
        required_properties=['updateParameters', 'activities'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/custom-actions/bulkUpdate'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/activities/custom-actions/bulkUpdate'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['bulkUpdateActivityItemSchema', 'inventoryPropertiesUpdateMode'],
        parent_models=[],
    ),
    "customActionActivityBulkUpdateSchemaResponse": ModelInfo(
        name='customActionActivityBulkUpdateSchemaResponse',
        description='The schema of the response body object for this operation.',
        properties=[
            ModelProperty(
                name='results',
                type='array',
                description='The list of results in the order of the activity items in the request.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/activities/custom-actions/bulkUpdate'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/activities/custom-actions/bulkUpdate'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "whereIsMyTechResponse": ModelInfo(
        name='whereIsMyTechResponse',
        description='The data structure containing information about the activity and technician.',
        properties=[
            ModelProperty(
                name='status',
                type='string',
                description="The status of the technician or the activity.<ul><li>The value is 'notAssigned' when the activity is not assigned to the technician and the activity status is 'pending'. The technician details and the geographic coordinates of the technician's location are not returned. In the activity details, the fields requested in the activityFields parameter are returned but the start time and the time zone information is not returned.</li><li>The value is 'assigned' when the activity has been assigned to a technician, but the technician may have other work to finish first. The technician details are returned but the geographic coordinates of the technician's location are not returned. In the activity details, the fields requested in the activityFields parameter along with the start time are returned.</li><li>The value is 'onTheWay' when there is a new activity in the technician's route and the previous activity (if exists) is in a final status. The technician details along with the geographic coordinates of the technician's location are returned. In the activity details, the fields requested in the activityFields parameter along with the start time are returned.</li><li>The value is 'started' when the technician has started the activity. The technician details along with the geographic coordinates of the technician's location are returned. In the activity details, the fields requested in the activityFields parameter along with the start time are returned.</li><li>The value is 'notDone' when the activity status is 'notdone'. The technician details are returned but the geographic coordinates of the technician's location are not returned. In the activity details, the fields requested in the activityFields parameter along with the start time are returned.</li><li>The value is 'complete' when the activity status is 'complete'. The technician details are returned but the geographic coordinates of the technician's location are not returned. In the activity details, the fields requested in the activityFields parameter along with the start time are returned.</li><li>The value is 'cancelled' when the activity status is 'cancelled'. The technician details are returned but the geographic coordinates of the technician's location are not returned. In the activity details, the fields requested in the activityFields parameter are returned while the start time is not returned.</li>",
                required=False,
                enum=['notAssigned', 'assigned', 'onTheWay', 'started', 'notdone', 'cancelled', 'completed'],
            ),
            ModelProperty(
                name='resourceDetails',
                type='object',
                description='The data structure that contains the resource information.',
                required=False,
            ),
            ModelProperty(
                name='coordinates',
                type='object',
                description="The data structure containing the geographic coordinates of the technician's location. This field is present only when the value of the 'status' parameter is either 'onTheWay' or 'started'. The field values are specified as floating point numbers with a maximum of five digits after the decimal point.",
                required=False,
            ),
            ModelProperty(
                name='activityDetails',
                type='object',
                description='The data structure containing the activity details.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/whereIsMyTech'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/whereIsMyTech'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "dailyExtractFilename": ModelInfo(
        name='dailyExtractFilename',
        description='Daily extract filename',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "dailyExtractDate": ModelInfo(
        name='dailyExtractDate',
        description='Daily extract date of form: YYYY-MM-DD',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "dailyExtractDateFiles": ModelInfo(
        name='dailyExtractDateFiles',
        description='The list of daily extract files available for the specified date.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The list of daily extract files.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/folders/dailyExtract/folders/{dailyExtractDate}/files'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "dailyExtractSubfolders": ModelInfo(
        name='dailyExtractSubfolders',
        description="The list of subfolders with daily extract files. Each subfolder is named in the 'YYYY-MM-DD' format.",
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The list of subfolders with daily extract files.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/folders/dailyExtract/folders'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/folders/dailyExtract/folders'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "dailyExtract": ModelInfo(
        name='dailyExtract',
        description='Daily extract',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "requiredInventoryEvent": ModelInfo(
        name='requiredInventoryEvent',
        description='Required Inventory Event',
        properties=[
            ModelProperty(
                name='requiredInventoryChanges',
                type='string',
                description='Required Inventory Changes',
                required=False,
            ),
            ModelProperty(
                name='requiredInventoryDetails',
                type='string',
                description='Required Inventory Details',
                required=False,
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:activityDetails',
                description='Activity Details',
                required=False,
                ref='activityDetails',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityDetails', 'eventGenericFields'],
        parent_models=[],
    ),
    "eventType": ModelInfo(
        name='eventType',
        description='The type of the event.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['subscriptionEventList', 'eventGenericFields'],
    ),
    "activityChanges": ModelInfo(
        name='activityChanges',
        description='The object containing the activity changes.',
        properties=[
            ModelProperty(
                name='customerEmail',
                type='string',
                description='The email address of the customer.',
                required=False,
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the customer's time zone. For example, Eastern. By default, the time zone of the resource (to which the activity is assigned) is used.For a list of supported time zones, see <a href= http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='slaWindowStart',
                type='string',
                description="The time when the service level agreement (SLA) window starts. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.SLA window is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='startTime',
                type='string',
                description="The estimated time of arrival for the activities in 'pending' status and the actual start time for the activities in 'started' and 'completed' status. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format. The time is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='serviceWindowStart',
                type='string',
                description="The time when the service window starts for the activity. The time is displayed in 'HH:MM:SS' format.Service window is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='firstManualOperation',
                type='string',
                description='The name of the first manual operation performed on the activity.',
                required=False,
            ),
            ModelProperty(
                name='teamResourceId',
                type='string',
                description='The identifier of the team resource for a teamwork activity.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description="The work zone in which the activity occurs. It is a read-only field that is automatically assigned to an activity, based on the company setting 'work zone key' and the activity properties. For example, if 'work zone key' is the first 4 symbols of the 'city' field, then the activity with city=Belfast will have a work zone assigned which has 'BELF' as one of its keys.",
                required=False,
            ),
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The estimated time taken to travel to this activity. The estimate is based on the previous activity in route.',
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowStart',
                type='string',
                description='The time when the activity delivery window starts. The time is in HH:MM:SS format. The time is returned in UTC time zone.',
                required=False,
            ),
            ModelProperty(
                name='endTime',
                type='string',
                description="The estimated or the actual end time of the activity. The time is in 'YYYY-MM-DD HH:MM:SS' format. The time is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='slaWindowEnd',
                type='string',
                description="The time when the service level agreement (SLA) window ends. The time is displayed in 'YYYY-MM-DD HH:MM:SS' format.SLA window is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city of the customer where the activity is scheduled. This field is used for geocoding and must contain a valid address.',
                required=False,
            ),
            ModelProperty(
                name='customerName',
                type='string',
                description='The name of the customer.',
                required=False,
            ),
            ModelProperty(
                name='timeOfBooking',
                type='string',
                description='The time when the customer booked the activity. The time is returned in UTC time zone.',
                required=False,
            ),
            ModelProperty(
                name='stateProvince',
                type='string',
                description='The state or province of the customer. This field is used for geocoding and must contain a valid address.',
                required=False,
            ),
            ModelProperty(
                name='streetAddress',
                type='string',
                description='The street address of the customer. This field is used for geocoding and must contain a valid address.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The longitude coordinate (in degrees) of the activity.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='duration',
                type='ref:durationOutput',
                description='',
                required=False,
                ref='durationOutput',
            ),
            ModelProperty(
                name='timeOfAssignment',
                type='string',
                description='The time when the activity is assigned to the technician. The time is returned in UTC time zone.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description="The cost of the activity in 'points'. This parameter is intended for use by the Routing module.",
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='timeDeliveredStart',
                type='string',
                description="The start time of the technician's arrival interval as communicated to the customer. The value is used by routing optimization engine to reduce changes to arrival time, so it is important to keep the value actual. This time is displayed in 'YYYY-MM-DD HH:MM:SS' format in the time zone of the resource to which the activity is assigned.",
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which this activity is assigned. This field is not returned if the resource ID is empty. <b>Note:</b> Do not use empty strings in requests.',
                required=True,
            ),
            ModelProperty(
                name='reminderTime',
                type='integer',
                description='The number of minutes before the activity start time the customer must be notified of the activity.',
                required=False,
            ),
            ModelProperty(
                name='country_code',
                type='string',
                description='The code of the country where the activity is scheduled.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The type of the activity. Based on the activity type, predefined company-specific rules are applied while processing an activity. Predefined company-specific rules cover the following:<ul><li>The resources to which the activities can be assigned.</li><li>The activity processing details.</li><li>The interaction of the activity with different modules of Oracle Field Service.</li></ul>',
                required=True,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='The parameter that may be used by integrations to store the identifier of the activity in the origin system. This parameter has no business significance in Oracle Field Service and may be left empty.',
                required=False,
            ),
            ModelProperty(
                name='masterActivityId',
                type='integer',
                description="The identifier of a segmentable activity. It is available for individual segments which have the record type set to 'multiday_activity_segment'. This field is not set for regular activities.",
                required=False,
            ),
            ModelProperty(
                name='deliveryWindowEnd',
                type='string',
                description="The time when the activity delivery window ends. The time is in 'HH:MM:SS' format. The time is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the activity. As a technician works through the activity, the status changes. The actions that are available for an activity are based on this status. A newly created activity has the status as 'pending', but it can then be changed to 'cancelled' or 'started'. The status of an activity can be changed to 'complete', 'notdone', or 'suspended' only if it has the status as 'started'.",
                required=False,
                enum=['cancelled', 'complete', 'suspended', 'started', 'enroute', 'pending', 'notdone'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the customer. This parameter is optional and its value defaults to the language set for the Login screen.The accepted language codes are listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='positionInRoute',
                type='integer',
                description='The position of the activity in the route. For not-ordered activities, this parameter is not present in the response. For ordered activities, a 1-based number is returned.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the customer. This field is used for geocoding and must contain a valid address.',
                required=False,
            ),
            ModelProperty(
                name='timeDeliveredEnd',
                type='string',
                description="The end time of the technician's arrival interval as communicated to the customer. The value is used by routing optimization engine to reduce changes to arrival time, so it is important to keep the value actual. This time is displayed in 'YYYY-MM-DD HH:MM:SS' format in the time zone of the resource to which the activity is assigned.",
                required=False,
            ),
            ModelProperty(
                name='timeSlot',
                type='string',
                description='The time slot during which the activity is completed. The time slot also indicates the service window for the activity.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The latitude coordinate (in degrees) of the activity.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description="The type of the activity record. The following values are allowed:<ul><li>regular - this is the default record type for most new activities.</li><li>prework - this type of record is created if a technician has to perform some work before the actual activity starts.</li><li>reopened - a record of this type is created when an activity is reopened for some reason.</li><li>multiday_activity - this record type is created when the 'activityType' indicates that this is a segmentable activity.</li><li>multiday_activity_segment - the records of this type are created for segmentable activities, based on their duration and time slot settings.</li>",
                required=False,
                enum=['regular', 'reopened', 'prework', 'multiday_activity', 'multiday_activity_segment'],
            ),
            ModelProperty(
                name='customerCell',
                type='string',
                description="The customer's cell phone number. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This parameter is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty.',
                required=False,
            ),
            ModelProperty(
                name='multidayTimeToComplete',
                type='string',
                description="The total duration of the segmentable activity in 'HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='firstManualOperationUser',
                type='string',
                description='The user who performed the first manual operation on the activity.',
                required=False,
            ),
            ModelProperty(
                name='multidayActivityStatus',
                type='string',
                description='The status of the segmentable activity.',
                required=False,
            ),
            ModelProperty(
                name='serviceWindowEnd',
                type='string',
                description="The time when the service window ends for the activity. The time is displayed in 'HH:MM:SS' format.Service window is returned in UTC time zone.",
                required=False,
            ),
            ModelProperty(
                name='customerPhone',
                type='string',
                description="The regular (land) phone number of the customer. From version 17.2.1, the phone number is saved in Oracle Field Service with the '+' symbol. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
        ],
        required_properties=['resourceId', 'activityType'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['durationOutput'],
        parent_models=['activityLinkEvent', 'activityEvent'],
    ),
    "activityDetails": ModelInfo(
        name='activityDetails',
        description='The object containing the activity details.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The unique identifier of the resource in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the activity is scheduled. This field is not present in the response, if the activity is not scheduled for any particular date.',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='The parameter may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and may be left empty.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['requiredInventoryEvent', 'requestEvent', 'activityLinkEvent', 'activityEvent', 'resourcePreferenceEvent', 'inventoryEvent'],
    ),
    "moveDetails": ModelInfo(
        name='moveDetails',
        description='The object containing the move details.',
        properties=[
            ModelProperty(
                name='moveReason',
                type='string',
                description='The unique identifier of the move reason.',
                required=False,
            ),
            ModelProperty(
                name='workZoneMismatch',
                type='boolean',
                description='Status of Work Zone Mismatch violation.',
                required=False,
            ),
            ModelProperty(
                name='workSkillMismatch',
                type='boolean',
                description='Status of Work Skill Mismatch violation.',
                required=False,
            ),
            ModelProperty(
                name='moveCondition',
                type='string',
                description='Name of move reason condition of the move action.',
                required=False,
                enum=['bucketToResource', 'resourceToResource', 'resourceToBucket', 'bucketToBucket'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['activityEvent'],
    ),
    "inventoryDetails": ModelInfo(
        name='inventoryDetails',
        description='The object containing the inventory details.',
        properties=[
            ModelProperty(
                name='serialNumber',
                type='string',
                description='The unique serial number of the inventory.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The type of the inventory as defined in Oracle Field Service. The inventory type can be serialized or non-serialized. If serialized, then it has a serial number. If non-serialized, then it does not have a serial number.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the inventory. For example, if 'customer' is returned, then it indicates that the inventory is at the customer's site.",
                required=False,
            ),
            ModelProperty(
                name='inventoryId',
                type='integer',
                description='The unique identifier of the inventory in Oracle Field Service.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['requestEvent', 'inventoryEvent'],
    ),
    "subscriptionEventList": ModelInfo(
        name='subscriptionEventList',
        description='The list of subscribed events.<p>The following events are supported: activityCreated, activityUpdated, activityStarted, activityTravelStarted, activityTravelStopped, activitySuspended, activityCompleted, activityNotDone, activityCanceled, activityDeleted, activityDelayed, activityReopened, activityPreworkCreated, activityLinkCreated, activityLinkDeleted, resourcePreferenceCreated, resourcePreferenceDeleted, requiredInventoryCreated, requiredInventoryUpdated, requiredInventoryDeleted, inventoryInstalled, inventoryDeinstalled, customerInventoryCreated, customerInventoryUpdated, customerInventoryDeleted, inventoryUndoInstall, inventoryUndoDeinstall, activityMoved, routeCreated, routeUpdated, routeActivated, routeDeactivated, routeReactivated, customerRequestCreated, inventoryRequestCreated, resourceRequestCreated, chatMessageSent, chatUpdated, broadcastStatusUpdate, transactionUpdated, userCreated, userUpdated, userDeleted, resourceCreated, resourceUpdated, routingRun, formSubmitted.</p>',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=['eventType'],
        parent_models=['subscriptionConfigItem'],
    ),
    "subscriptionMonitorChanges": ModelInfo(
        name='subscriptionMonitorChanges',
        description='The list of fields for which the changes need to be tracked. If the \'monitorChanges\' parameter is specified, then the event is only published to the subscription, if any of the fields listed in the parameter are changed. The valid values for the field depend on the value specified in the \'events\' field.<ul><li>If the activity events are specified in the \'events\' field, then only the field names of the Activity object are returned.</li> <li>If the inventory events are specified in the \'events\' field, then only the field names of the Inventory object are returned.</li><li>If the resource events are specified in the \'events\' field, then only the field names of the Resource object are returned.</li><li>If the user events are specified in the \'events\' field, then only the field names of the User object are returned.</li><li>Custom property labels can also be specified along with the field names. Note that events API doesn\'t support file properties and has a limitation 5 kb for the maximum length of a custom property text. If some value exceeds this size and it should be present in the event, it will be truncated down to 5 kb and a warning message will be added at the end of the truncated value "TRUNCATED: Property value was > 5KB - too long to be published in full".</li> </ul><p>The following events are supported:</p><ul><li>Activity events</li><li>Inventory events </li><li>Resource events</li><li>User events</li></ul>',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=[],
        parent_models=['subscriptionConfigItem'],
    ),
    "subscriptionFieldList": ModelInfo(
        name='subscriptionFieldList',
        description='The list of fields and custom properties included in the event. The fields are added to the \'activityDetails\' element for activity events, \'inventoryDetails\' element for inventory events, and to the \'resourceDetails\' element for the resource events.<ul><li>The field names of the activity events are same as the field names retrieved from the \'Get activity\' operation.</li><li>The field names of the inventory events are the same as the field names retrieved from the \'Get inventory\' operation.</li><li>The field names of the resource events are the same as the field names retrieved from the \'Get resource\' operation.</li><li>The field names of the user events are the same as the field names retrieved from the \'Get user\' operation.</li></ul><p>Also, custom property labels can be specified along with the field names. Note that events API doesn\'t support file properties and has a limitation 5 kb for the maximum length of a custom property text. If some value exceeds this size and it should be present in the event, it will be truncated down to 5 kb and a warning message will be added at the end of the truncated value "TRUNCATED: Property value was > 5KB - too long to be published in full". Therefore, if no specific fields are specified, then by default only the changed and key fields are returned.</p><p>The following events are supported:</p><ul><li>Activity events</li><li>Inventory events </li><li>Resource events</li><li>User events</li></ul><p>The \'activityDeleted\' event will not contain the specified \'country_code\' field and the specified custom activity properties.</p><p> Note: Please note that some events that are generated at the moment of the subscription creation (or up to a second after that) may be received for that subscription without the requested fields, as they might be generated just before the subscription configuration information is applied.</p>',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=[],
        parent_models=['subscriptionConfigItem'],
    ),
    "subscriptionConfigItem": ModelInfo(
        name='subscriptionConfigItem',
        description='The array of subscription config item used to filter the events. For example, a config item can be used to filter activity events whereas another config item can be used to filter inventory events through the same subscription.',
        properties=[
            ModelProperty(
                name='events',
                type='ref:subscriptionEventList',
                description='',
                required=True,
                ref='subscriptionEventList',
            ),
            ModelProperty(
                name='fields',
                type='ref:subscriptionFieldList',
                description='',
                required=False,
                ref='subscriptionFieldList',
            ),
            ModelProperty(
                name='monitorChanges',
                type='ref:subscriptionMonitorChanges',
                description='',
                required=False,
                ref='subscriptionMonitorChanges',
            ),
            ModelProperty(
                name='filterExpression',
                type='string',
                description='The filter expression applied to the events. Only events matching the specified filter expression are added to the subscription.The following events are supported:<ul><li>All activity events</li><li>All inventory events </li><li>All resource events</li><li>All user events</li></ul><b>Filter Expression Rules</b>\n<ul>\n  <li>Filter expression is specified as a single string.</li>\n  <li>It should evaluate to a boolean expression.</li>\n  <li>It should contain 1 or more comparison statements.</li>\n  <li>Syntax of comparison statements: field operator value, for example,<em>activityDetails.activityType == \'Install\'</em>.\n    <ul>\n      <li>The order cannot be changed. Therefore, (<em>\'Install\' == <em>activityDetails.</em>activityType</em>) is not valid. </li>\n      <li>The comparison between fields, <em>(A == B)</em> or between values, <em>(1 == 1)</em> is also not valid.</li>\n      <li>The field has to be an alphanumeric identifier with no spaces or special characters, except underscore. Subfields are separated by dot (.) Examples:<ul>\n          <li><em>activityDetails.activityType</em></li>\n          <li><em>activityDetails.X_MYPROP_10</em></li>\n          <li><em>user</em></li>\n          <li><em>field.subField</em></li>\n        </ul>\n      </li>\n      <li>Comparison operators:<ul>\n          <li><em>&lt;</em></li>\n          <li><em>&gt;</em></li>\n          <li><em>&lt;=</em></li>\n          <li><em>&gt;=</em></li>\n          <li><em>==</em></li>\n          <li><em>!=</em></li>\n          <li><em>in</em></li>\n        </ul>\n      </li>\n      <li>Value can either be a string literal, an integer literal, or an array literal of strings and integers. <ul>\n          <li>String literals are delimited by single quotes, with escape character ~, for example:<ul>\n              <li><em>str == \'My String\'</em></li>\n              <li><em>str == \'My string with ~\' a quote inside\'</em></li>\n          </ul></li>\n          <li>Integer literals are without quotes, may not contain dot, or leading zeroes. For example:<ul>\n              <li><em>num == 0</em></li>\n              <li><em>num == 12345</em></li>\n              <li><em>num == -67</em>/li>\n          </ul></li>\n          <li>Array literals should only contain strings or integers and should have square brackets. Empty arrays are not allowed. Arrays are only allowed after the "in" operator.<ul>\n              <li><em>enum in [1,2,3]</em></li>\n              <li><em>enum in [\'Abc\',\'Def\',\'Ghi\']</em></li>\n          </ul></li>\n        </ul>\n      </li>\n      <li>String comparisons are valid:<ul>\n          <li><em>date > \'2015-06-02\'</em></li>\n      </ul></li>\n      <li>String comparisons are case-insensitive:<ul>\n          <li><em>name == \'john.smith\'</em> is the same as <em>name == \'JOHN.SMITH\'</em></li>\n        </ul></li>\n      <li>String to integer coercion is valid:<ul>\n            <li><em>num == -123</em> is the same as <em>num == \'-123\'</em></li>\n      </ul></li>\n    </ul>\n  </li>\n  <li>Multiple comparison statements have to be separated by logical operator and/or. <ul>\n      <li><em>A == 1 and  B == 2 or C == 3</em></li>\n      <li><em>A == \'xx\' or  A == \'yy\'</em></li>\n  </ul></li>\n  <li>Operator precedence:<ol>\n      <li>comparison operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, in</li>\n      <li>\'not\'</li>\n      <li>\'and\', \'or\'</li>\n    </ol>\n  </li>\n  <li>Logical operators  (\'and\' / \'or\') have the same precedence, so parentheses can be used to achieve precedence.<ul>\n      <li><em>A == 1 and (B == 2 or C == 3)</em></li>\n    </ul>\n  </li>\n  <li>Operators are also case-insensitive:<ul>\n      <li><em>(num IN [1,2,3])  OR  (num &lt; 0)</em></li>\n    </ul>\n  </li>\n  <li>Any statement can be preceded by "not" operator to negate it.<ul>\n      <li><em>not (activityType in [\'IN\',\'TC\',\'BR\'])</em></li>\n      <li><em>A == 1 and not ( B == 2 or B == 3 )</em></li>\n    </ul>\n  </li>\n  <li>\n    Whitespace outside strings is ignored.\n  </li>\n  <li>When the field being compared does not exist in the event or is null, then it evaluates to empty string. For example, expressions <em>(non_existent_field == \'\'), (null_field == \'\')</em>.</li>\n</ul>',
                required=False,
            ),
        ],
        required_properties=['events'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['subscriptionMonitorChanges', 'subscriptionEventList', 'subscriptionFieldList'],
        parent_models=['subscriptionConfig'],
    ),
    "subscriptionConfig": ModelInfo(
        name='subscriptionConfig',
        description='The list of subscription config elements used to filter the required events.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=['subscriptionConfigItem'],
        parent_models=['createSubscriptionRequest'],
    ),
    "createSubscriptionRequest": ModelInfo(
        name='createSubscriptionRequest',
        description='The schema of the response body object for this operation.',
        properties=[
            ModelProperty(
                name='subscriptionConfig',
                type='ref:subscriptionConfig',
                description='',
                required=False,
                ref='subscriptionConfig',
            ),
            ModelProperty(
                name='subscriptionTitle',
                type='string',
                description='The title of the subscription. It can be used to distinguish a specific subscription from the other subscriptions. The field is optional and need not be unique.',
                required=False,
                min_length=1,
                max_length=255,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/events/subscriptions'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/events/subscriptions'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['subscriptionConfig'],
        parent_models=['subscriptionInfoResponse'],
    ),
    "requestEvent": ModelInfo(
        name='requestEvent',
        description='The object containing details of the request event.',
        properties=[
            ModelProperty(
                name='inventoryDetails',
                type='ref:inventoryDetails',
                description='Inventory Details',
                required=False,
                ref='inventoryDetails',
            ),
            ModelProperty(
                name='requestDetails',
                type='string',
                description='The details of the request.',
                required=False,
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:activityDetails',
                description='Activity Details',
                required=False,
                ref='activityDetails',
            ),
            ModelProperty(
                name='requestChanges',
                type='object',
                description='The object containing the request changes.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['inventoryDetails', 'activityDetails', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "eventGenericFields": ModelInfo(
        name='eventGenericFields',
        description='The list of generic fields of the event.',
        properties=[
            ModelProperty(
                name='eventType',
                type='ref:eventType',
                description='Event Type',
                required=False,
                ref='eventType',
            ),
            ModelProperty(
                name='user',
                type='string',
                description='The login name of the user who performed the action that triggered the event.<b>Note:</b> Some actions are performed by the Oracle Field Service application. Therefore, the parameter is not returned, if the action is not performed by the user.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description="The event time is in the UTC time zone and in the 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['eventType'],
        parent_models=['requiredInventoryEvent', 'requestEvent', 'activityLinkEvent', 'resourceEvent', 'userEvent', 'activityEvent', 'formSubmitted', 'routingRun', 'routeEvent', 'chatMessageSent', 'chatUpdated', 'broadcastStatusUpdate', 'transactionUpdated', 'resourcePreferenceEvent', 'inventoryEvent'],
    ),
    "events": ModelInfo(
        name='events',
        description='collection of events',
        properties=[
            ModelProperty(
                name='subscriptionId',
                type='string',
                description='Subscription Id',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='Items',
                required=False,
                items={'type': 'unknown', '$ref': 'event'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['event'],
        parent_models=[],
    ),
    "activityLinkEvent": ModelInfo(
        name='activityLinkEvent',
        description='The object containing details of the activity link event.',
        properties=[
            ModelProperty(
                name='activityLinkDetails',
                type='string',
                description='The details of the activity link event.',
                required=False,
            ),
            ModelProperty(
                name='toActivityDetails',
                type='ref:activityChanges',
                description='To Activity Details',
                required=False,
                ref='activityChanges',
            ),
            ModelProperty(
                name='fromActivityDetails',
                type='ref:activityDetails',
                description='From Activity Details',
                required=False,
                ref='activityDetails',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityDetails', 'activityChanges', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "chat": ModelInfo(
        name='chat',
        description='The object containing details about the chat.',
        properties=[
            ModelProperty(
                name='startedTime',
                type='string',
                description='The time when the chat was started (ISO-8601).',
                required=False,
            ),
            ModelProperty(
                name='endedTime',
                type='string',
                description="Time (in UTC time standard) when the chat or broadcast was ended (string). The time format is YYYY-MM-DD HH:MM:SS. The field isn't available if the chat has not ended.",
                required=False,
            ),
            ModelProperty(
                name='chatId',
                type='integer',
                description='The identifier of the chat.',
                required=False,
            ),
            ModelProperty(
                name='startedBy',
                type='string',
                description='The address of the user who started the chat.',
                required=False,
            ),
            ModelProperty(
                name='chatName',
                type='string',
                description='The name of the chat.',
                required=False,
            ),
            ModelProperty(
                name='helpdeskName',
                type='string',
                description='The name of the helpdesk and is applicable only for helpdesk chats.',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the broadcast.',
                required=False,
                enum=['group-broadcast', 'location-broadcast', 'activity-broadcast'],
            ),
            ModelProperty(
                name='expireTime',
                type='string',
                description="The time at which the broadcast will expire in  'YYYY-MM-DD HH:MM:SS' format. Only applicable for broadcasts with expiry time.",
                required=False,
            ),
            ModelProperty(
                name='updateType',
                type='string',
                description='The updated details in the chat. Only applicable for the ChatUpdated event.',
                required=False,
                enum=['UserInvitedToChat', 'UserLeftChat', 'ChatFinished', 'UserJoinedChat', 'ChatMoved', 'UserLeftBroadcast', 'BroadcastFinished', 'NameChanged'],
            ),
            ModelProperty(
                name='updateInfo',
                type='object',
                description='The object contains the updated information of a chat.',
                required=False,
            ),
            ModelProperty(
                name='broadcastInfo',
                type='object',
                description='The object containing details about the broadcast chat.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['chatMessageSent', 'chatUpdated', 'transactionUpdated'],
    ),
    "resourceEvent": ModelInfo(
        name='resourceEvent',
        description='',
        properties=[
            ModelProperty(
                name='resourceDetails',
                type='ref:resourceDetails',
                description='',
                required=False,
                ref='resourceDetails',
            ),
            ModelProperty(
                name='resourceChanges',
                type='ref:resource',
                description='',
                required=False,
                ref='resource',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['resourceDetails', 'resource', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "userEvent": ModelInfo(
        name='userEvent',
        description='',
        properties=[
            ModelProperty(
                name='userDetails',
                type='ref:userDetails',
                description='',
                required=False,
                ref='userDetails',
            ),
            ModelProperty(
                name='userChanges',
                type='ref:userResponse',
                description='',
                required=False,
                ref='userResponse',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['userResponse', 'userDetails', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "resourceDetails": ModelInfo(
        name='resourceDetails',
        description='',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource in the external system. The identifier of the resource is always returned in resourceDetails array.',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceType',
                type='string',
                description='The specified resource type of a resource.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceEvent', 'findResourcesForUrgentAssignmentResponseSchema'],
    ),
    "userDetails": ModelInfo(
        name='userDetails',
        description='',
        properties=[
            ModelProperty(
                name='login',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='mainResourceId',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='userType',
                type='string',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['userEvent'],
    ),
    "activityEvent": ModelInfo(
        name='activityEvent',
        description='The object containing details of the activity event.',
        properties=[
            ModelProperty(
                name='activityChanges',
                type='ref:activityChanges',
                description='Activity Changes',
                required=False,
                ref='activityChanges',
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:activityDetails',
                description='Activity Details',
                required=False,
                ref='activityDetails',
            ),
            ModelProperty(
                name='moveDetails',
                type='ref:moveDetails',
                description='Move Details',
                required=False,
                ref='moveDetails',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityDetails', 'moveDetails', 'activityChanges', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "event": ModelInfo(
        name='event',
        description='The array of events.',
        properties=[
        ],
        required_properties=[],
        inheritance=['requestEvent', 'inventoryEvent', 'routeEvent', 'activityEvent', 'userEvent', 'resourceEvent', 'chatUpdated', 'chatMessageSent', 'broadcastStatusUpdate', 'transactionUpdated', 'activityLinkEvent', 'resourcePreferenceEvent', 'routingRun'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['routeEvent', 'resourcePreferenceEvent', 'transactionUpdated', 'userEvent', 'broadcastStatusUpdate', 'activityEvent', 'chatMessageSent', 'requestEvent', 'inventoryEvent', 'resourceEvent', 'chatUpdated', 'routingRun', 'activityLinkEvent'],
        parent_models=['events'],
    ),
    "subscriptionInfoResponse": ModelInfo(
        name='subscriptionInfoResponse',
        description='The array of subscriptions.',
        properties=[
            ModelProperty(
                name='subscriptionId',
                type='string',
                description='The identifier of the subscription.',
                required=False,
            ),
            ModelProperty(
                name='createdTime',
                type='string',
                description="The time when the subscription was created in 'YYYY-MM-DD HH:MM:SS' (UTC) format.",
                required=False,
            ),
            ModelProperty(
                name='expirationTime',
                type='string',
                description="The expiration time of the subscription in 'YYYY-MM-DD HH:MM:SS' (UTC) format.",
                required=False,
            ),
            ModelProperty(
                name='applicationId',
                type='string',
                description='The identifier of the application that has created the subscription.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['createSubscriptionRequest'],
        used_in_endpoints=['GET /rest/ofscCore/v1/events/subscriptions/{subscriptionId}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/events/subscriptions/{subscriptionId}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['createSubscriptionRequest'],
        parent_models=[],
    ),
    "formDetails": ModelInfo(
        name='formDetails',
        description='This object will contain the fields that can be submitted with a particular form.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['submittedForm', 'formSubmitted'],
    ),
    "formActivityDetails": ModelInfo(
        name='formActivityDetails',
        description='This object will contain activity fields that can be submitted with a particular form.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['submittedForm', 'formSubmitted'],
    ),
    "formInventoryDetails": ModelInfo(
        name='formInventoryDetails',
        description='This object will contain inventory fields that can be submitted with a particular form.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['formSubmitted'],
    ),
    "formResourceDetails": ModelInfo(
        name='formResourceDetails',
        description='This object will contain resource fields that can be submitted with a particular form.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['formSubmitted'],
    ),
    "formUserDetails": ModelInfo(
        name='formUserDetails',
        description='This object will contain user fields that can be submitted with a particular form.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['formSubmitted'],
    ),
    "formSubmitted": ModelInfo(
        name='formSubmitted',
        description='',
        properties=[
            ModelProperty(
                name='formIdentifier',
                type='object',
                description='Form  identifier',
                required=False,
            ),
            ModelProperty(
                name='formDetails',
                type='ref:formDetails',
                description='',
                required=False,
                ref='formDetails',
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:formActivityDetails',
                description='',
                required=False,
                ref='formActivityDetails',
            ),
            ModelProperty(
                name='inventoryDetails',
                type='ref:formInventoryDetails',
                description='',
                required=False,
                ref='formInventoryDetails',
            ),
            ModelProperty(
                name='resourceDetails',
                type='ref:formResourceDetails',
                description='',
                required=False,
                ref='formResourceDetails',
            ),
            ModelProperty(
                name='userDetails',
                type='ref:formUserDetails',
                description='',
                required=False,
                ref='formUserDetails',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['formResourceDetails', 'formInventoryDetails', 'eventGenericFields', 'formDetails', 'formActivityDetails', 'formUserDetails'],
        parent_models=[],
    ),
    "routingRun": ModelInfo(
        name='routingRun',
        description='The object containing details of the routing run event.',
        properties=[
            ModelProperty(
                name='routingRunDetails',
                type='object',
                description='The object containing the routing run changes.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['eventGenericFields'],
        parent_models=['event'],
    ),
    "routeEvent": ModelInfo(
        name='routeEvent',
        description='The object containing details of the route event.',
        properties=[
            ModelProperty(
                name='routeDetails',
                type='string',
                description='The details of the route.',
                required=False,
            ),
            ModelProperty(
                name='routeChanges',
                type='object',
                description='The object containing the route changes.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['eventGenericFields'],
        parent_models=['event'],
    ),
    "chatMessageSent": ModelInfo(
        name='chatMessageSent',
        description='The object containing details of the Chat Message Sent event.',
        properties=[
            ModelProperty(
                name='chat',
                type='ref:chat',
                description='Chat',
                required=False,
                ref='chat',
            ),
            ModelProperty(
                name='message',
                type='ref:message',
                description='Message',
                required=False,
                ref='message',
            ),
            ModelProperty(
                name='participants',
                type='array',
                description='A record containing the details of the participants in the chat or broadcast. This field is available only when the message is the first message of a chat or a broadcast.',
                required=False,
                items={'type': 'unknown', '$ref': 'participantInMessageSent'},
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['chat', 'participantInMessageSent', 'message', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "chatUpdated": ModelInfo(
        name='chatUpdated',
        description='The object containing details of the chat updated event.',
        properties=[
            ModelProperty(
                name='chat',
                type='ref:chat',
                description='Chat',
                required=False,
                ref='chat',
            ),
            ModelProperty(
                name='participant',
                type='ref:participant',
                description='Details of participant which changed',
                required=False,
                ref='participant',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['participant', 'chat', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "broadcastStatusUpdate": ModelInfo(
        name='broadcastStatusUpdate',
        description='The event occurs when the broadcast status of a participant is changed.',
        properties=[
            ModelProperty(
                name='statusChanges',
                type='ref:statusChanges',
                description='Status Changes',
                required=False,
                ref='statusChanges',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['eventGenericFields', 'statusChanges'],
        parent_models=['event'],
    ),
    "statusChanges": ModelInfo(
        name='statusChanges',
        description='A record containing an array of status update records. Each status update record is a map with the following fields',
        properties=[
            ModelProperty(
                name='login',
                type='string',
                description='Login of the user whose status is changed (string).',
                required=False,
            ),
            ModelProperty(
                name='chatId',
                type='integer',
                description='The unique identifier of the broadcast in the collaboration server (integer).',
                required=False,
            ),
            ModelProperty(
                name='messageId',
                type='integer',
                description='The identifier of this message for which the status is changed (long).',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status change (string).',
                required=False,
                enum=['UNDELIVERED', 'DELIVERED', 'READ', 'ACKNOWLEDGED', 'ACCEPTED', 'REJECTED'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['broadcastStatusUpdate'],
    ),
    "transactionUpdated": ModelInfo(
        name='transactionUpdated',
        description='The event occurs whenever an operation is done on a transaction through Collaboration. A transaction through Collaboration is the transfer of an inventory or activity through chat.',
        properties=[
            ModelProperty(
                name='chat',
                type='ref:chat',
                description='Chat',
                required=False,
                ref='chat',
            ),
            ModelProperty(
                name='message',
                type='ref:message',
                description='Message',
                required=False,
                ref='message',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['chat', 'message', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "resourcePreferenceEvent": ModelInfo(
        name='resourcePreferenceEvent',
        description='The object containing the details of the resource preference event.',
        properties=[
            ModelProperty(
                name='activityDetails',
                type='ref:activityDetails',
                description='Activity Details',
                required=False,
                ref='activityDetails',
            ),
            ModelProperty(
                name='resourcePreference',
                type='string',
                description='The resource preference defined for the activity.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activityDetails', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "inventoryEvent": ModelInfo(
        name='inventoryEvent',
        description='The object containing details of the inventory event.',
        properties=[
            ModelProperty(
                name='inventoryDetails',
                type='ref:inventoryDetails',
                description='Inventory Details',
                required=False,
                ref='inventoryDetails',
            ),
            ModelProperty(
                name='inventoryChanges',
                type='object',
                description='The object containing the inventory changes.',
                required=False,
            ),
            ModelProperty(
                name='activityDetails',
                type='ref:activityDetails',
                description='Activity Details',
                required=False,
                ref='activityDetails',
            ),
        ],
        required_properties=[],
        inheritance=['eventGenericFields'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['inventoryDetails', 'activityDetails', 'eventGenericFields'],
        parent_models=['event'],
    ),
    "message": ModelInfo(
        name='message',
        description='The object containing the details of a message.',
        properties=[
            ModelProperty(
                name='attachment',
                type='object',
                description='The object containing the attachment details.',
                required=False,
            ),
            ModelProperty(
                name='messageId',
                type='integer',
                description='The unique identifier of the message.',
                required=False,
            ),
            ModelProperty(
                name='sequenceNumber',
                type='integer',
                description='The sequence number of the message.',
                required=False,
            ),
            ModelProperty(
                name='text',
                type='string',
                description='The message sent by the system.',
                required=False,
            ),
            ModelProperty(
                name='subject',
                type='string',
                description='The subject configured in the message step of the message scenario. Only applicable for the chat triggered from the message scenario.',
                required=False,
            ),
            ModelProperty(
                name='needAcknowledgement',
                type='boolean',
                description='The parameter indicates whether the acknowledgement is enabled for the message. Only applicable for broadcast with acknowledgement.',
                required=False,
            ),
            ModelProperty(
                name='systemMessage',
                type='string',
                description='The type of message generated by the system.',
                required=False,
                enum=['video_chat_started', 'video_chat_finished', 'video_chat_feedback'],
            ),
            ModelProperty(
                name='videoChatInfo',
                type='object',
                description='The object containing the details of the video chat.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['chatMessageSent', 'transactionUpdated'],
    ),
    "participant": ModelInfo(
        name='participant',
        description='The participant object contains details about the participant.',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='The name of the participant.',
                required=False,
            ),
            ModelProperty(
                name='login',
                type='string',
                description='The login name of the user.',
                required=False,
            ),
            ModelProperty(
                name='invitedBy',
                type='string',
                description='The login name of the user who invited another user for chat.',
                required=False,
            ),
            ModelProperty(
                name='invitedTime',
                type='string',
                description="The time at which the user was invited to chat in 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
            ModelProperty(
                name='leftTime',
                type='string',
                description="The time at which the user left the chat in 'YYYY-MM-DD HH:MM:SS' format or '-1' is displayed, if the user is present in the chat.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['chatUpdated'],
    ),
    "participantInMessageSent": ModelInfo(
        name='participantInMessageSent',
        description='A record containing the details of the participants in the chat or broadcast. This field is available only when the message is the first message of a chat or a broadcast.',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='Indicates the name of the participant.',
                required=False,
            ),
            ModelProperty(
                name='login',
                type='string',
                description='Login of the user or group id of chat bot in case of bot chats',
                required=False,
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of participant (possible values: bot). Present only in case of bot chats',
                required=False,
            ),
            ModelProperty(
                name='invitedBy',
                type='string',
                description='Indicates the login of the user who invited this user to chat.This field will be present only when another user invites a user.',
                required=False,
            ),
            ModelProperty(
                name='invitedTime',
                type='string',
                description="Indicates the time at which the user was invited to chat. Format is 'YYYY-MM-DD HH:MM:SS'",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['chatMessageSent'],
    ),
    "CreateSubscriptionResponse": ModelInfo(
        name='CreateSubscriptionResponse',
        description='The subscription.',
        properties=[
            ModelProperty(
                name='subscriptionId',
                type='string',
                description='The identifier of the subscription.',
                required=False,
            ),
            ModelProperty(
                name='nextPage',
                type='string',
                description='The next page identifier passed to the next request for obtaining the next series of events.There is no specification for the value format - it may be any string not longer than 48 characters.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/events/subscriptions'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/events/subscriptions'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "inventoryWithCustomProperties": ModelInfo(
        name='inventoryWithCustomProperties',
        description="The inventory that is installed or deinstalled at the customer's site during an activity, including custom properties",
        properties=[
        ],
        required_properties=[],
        inheritance=['inventoryWithoutStatus'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['inventoryWithoutStatus'],
        parent_models=['bulkUpdateActivityItemSchema'],
    ),
    "inventories": ModelInfo(
        name='inventories',
        description='Collection of inventories',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='Items',
                required=False,
                items={'type': 'unknown', '$ref': 'inventory'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['inventory'],
        parent_models=[],
    ),
    "inventoryWithoutStatus": ModelInfo(
        name='inventoryWithoutStatus',
        description="The inventory that is installed or deinstalled at the customer's site during an activity.",
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID to which the inventory is assigned or the resource ID to which the activity (that has the inventory assigned to it) is assigned.',
                required=False,
            ),
            ModelProperty(
                name='serialNumber',
                type='string',
                description='The serial number specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='exchangedInventoryId',
                type='integer',
                description='The inventory ID that is returned when the resource exchanges an inventory with another resource.',
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of inventory specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The inventory type specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='inventoryId',
                type='integer',
                description='The unique identifier of the inventory in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The activity ID to which the inventory is assigned. If the status for the inventory is set to resource, then the activity ID is not returned.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['inventoryWithCustomProperties', 'inventory'],
    ),
    "inventory": ModelInfo(
        name='inventory',
        description='',
        properties=[
            ModelProperty(
                name='status',
                type='string',
                description="The status of the specified inventory. For example, if 'customer' is returned, then it indicates that the inventory is at the customer's site.",
                required=False,
                enum=['customer', 'resource', 'installed', 'deinstalled'],
            ),
        ],
        required_properties=[],
        inheritance=['inventoryWithoutStatus'],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/inventories/{inventoryId}', 'PATCH /rest/ofscCore/v1/inventories/{inventoryId}', 'GET /rest/ofscCore/v1/inventories/{inventoryId}'],
        used_in_request_endpoints=['PATCH /rest/ofscCore/v1/inventories/{inventoryId}'],
        used_in_response_endpoints=['PATCH /rest/ofscCore/v1/inventories/{inventoryId}', 'GET /rest/ofscCore/v1/inventories/{inventoryId}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['inventoryWithoutStatus'],
        parent_models=['inventories'],
    ),
    "createInventory": ModelInfo(
        name='createInventory',
        description='The schema of the request body parameters.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The unique identifier of the resource in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The status of the inventory. For example, if 'customer' is returned, then it indicates that the inventory is at the customer's site.",
                required=False,
                enum=['customer', 'resource', 'installed', 'deinstalled'],
            ),
            ModelProperty(
                name='serialNumber',
                type='string',
                description='The unique serial number of the inventory.',
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of the inventory.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The type of the inventory as defined in Oracle Field Service. The inventory type can be serialized or non-serialized. If serialized, then it has a serial number. If non-serialized, then it does not have a serial number.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/inventories'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/inventories'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "inventoryCustomActionSchema": ModelInfo(
        name='inventoryCustomActionSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of the inventory.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoInstall', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoDeinstall', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/install', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/deinstall', 'POST /rest/ofscCore/v1/resources/{resourceId}/inventories/{inventoryId}/custom-actions/install'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoInstall', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/undoDeinstall', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/install', 'POST /rest/ofscCore/v1/inventories/{inventoryId}/custom-actions/deinstall', 'POST /rest/ofscCore/v1/resources/{resourceId}/inventories/{inventoryId}/custom-actions/install'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "resources": ModelInfo(
        name='resources',
        description='The collection of resources.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of resources returned.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of resource items.',
                required=False,
                items={'type': 'unknown', '$ref': 'resource'},
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources', 'GET /rest/ofscCore/v1/resources/{resourceId}/children', 'GET /rest/ofscCore/v1/resources/{resourceId}/descendants'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources', 'GET /rest/ofscCore/v1/resources/{resourceId}/children', 'GET /rest/ofscCore/v1/resources/{resourceId}/descendants'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resource'],
        parent_models=[],
    ),
    "resourcesAssistants": ModelInfo(
        name='resourcesAssistants',
        description='The collection of resources.',
        properties=[
            ModelProperty(
                name='items',
                type='object',
                description='List of assistants and the assisting activities.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/assistants'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/assistants'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceAssist'],
        parent_models=[],
    ),
    "resourceAssist": ModelInfo(
        name='resourceAssist',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description="The date in 'YYYY-MM-DD' format for which the assistants and the teamwork activities are returned.",
                required=False,
            ),
            ModelProperty(
                name='assistants',
                type='ref:assistants',
                description='',
                required=False,
                ref='assistants',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=['assistants'],
        parent_models=['resourcesAssistants'],
    ),
    "assistants": ModelInfo(
        name='assistants',
        description='List of assistants.',
        properties=[
            ModelProperty(
                name='resourceDetails',
                type='object',
                description='The values of resource fields related to the assistant.',
                required=False,
            ),
            ModelProperty(
                name='teamWorkActivities',
                type='ref:teamWork',
                description='',
                required=False,
                ref='teamWork',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=['teamWork', 'linksAssist', 'itemWorkSkill'],
        parent_models=['resourceAssist'],
    ),
    "teamWork": ModelInfo(
        name='teamWork',
        description='List of teamwork activities for the date which link the assistant to the team holder.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['assistants'],
    ),
    "itemWorkSkill": ModelInfo(
        name='itemWorkSkill',
        description='The list of work sill items of the resource actual for the date. Note that this list will not be returned if the number of items is greater then 500, in which case the skills should be returned by a separate call.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=[],
        parent_models=['assistants'],
    ),
    "linksAssist": ModelInfo(
        name='linksAssist',
        description='The canonical link of resource work skills for the specified date. This structure is returned instead of the "items" array when totalResults is greater then 500. This object may be only provided for resources with not empty resourceId.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='array',
        examples=[],
        nested_models=[],
        parent_models=['assistants'],
    ),
    "resource": ModelInfo(
        name='resource',
        description='The resource used for an activity. For example, a resource can be a technician, a truck, or a bucket. <p><b>Note</b>: This resource is not the same as a REST resource.</p>',
        properties=[
            ModelProperty(
                name='timeZone',
                type='string',
                description='The name of the resource\'s time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. In the response, this field contains the Oracle Field Service time zone name, while the field \'timeZoneIANA\' contains the IANA time zone name. For a list of supported time zones, see <a href="OFSC_Supported_Time_Zones.html">Supported Time Zones</a>.',
                required=True,
            ),
            ModelProperty(
                name='timeZoneIANA',
                type='string',
                description="The IANA name of the resource's time zone (for example, America/New_York). For the list of IANA time zone names, see <a href=https://www.iana.org/time-zones>IANA Time Zones</a>This is a read-only field and is only returned in responses.",
                required=False,
            ),
            ModelProperty(
                name='email',
                type='string',
                description='The email ID of the resource. The maximum character length of this field is 255 characters. If more than 255 characters are specified, then only the first 255 characters are saved and the rest are ignored.',
                required=False,
            ),
            ModelProperty(
                name='phone',
                type='string',
                description="The phone number of the resource. The maximum character length of this field is 16 characters. If more than 16 characters are specified, then only the first 16 characters are saved and the rest are ignored.<i>Note</i>: The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the resource. The maximum character length of this field is 40 characters. If more than 40 characters are specified, then only the first 40 characters are saved and the rest are ignored.',
                required=True,
                min_length=1,
            ),
            ModelProperty(
                name='resourceType',
                type='string',
                description='The type of the resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource in the external system. The maximum character length of this field is 32 characters. If more than 32 characters are specified, the operation fails with HTTP status 400 error.',
                required=False,
            ),
            ModelProperty(
                name='resourceInternalId',
                type='integer',
                description='The unique identifier of the resource in Oracle Field Service. This is a read-only field.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format for the resource. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the resource.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the resource. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=True,
            ),
            ModelProperty(
                name='parentResourceId',
                type='string',
                description='The unique identifier of the parent resource.',
                required=False,
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the resource. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='timeZoneDiff',
                type='integer',
                description="The difference between UTC and the resource's local time, displayed in minutes. For example, -180 means that the resource time is 3 hours behind UTC.",
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialRatio',
                type='number',
                description="The ratio applied over the company estimations if the user hasn't performed any activity. All modifications to the personal profile ratio are done using this value as the starting point. The default value is 1.",
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialPeriod',
                type='integer',
                description="The number of days the initial ratio is used after a new resource is created. After the specified number of days, the reported duration starts impacting the company estimations. This field is used only if the 'Use durations reported to enhance company-wide estimations' option is selected in the Manage application screen 'Configuration -> Resource Types'. The default value is 5.",
                required=False,
            ),
            ModelProperty(
                name='organization',
                type='string',
                description='The label of an organization of the resource.',
                required=False,
            ),
            ModelProperty(
                name='avatar',
                type='object',
                description='The profile picture of the user.If an Oracle Field Service user has a profile picture uploaded (into the \'user.avatar\' field) and the specified resource is the user\'s main resource, then the profile picture can be obtained directly from the resource. This helps to avoid multiple API calls that are otherwise required to find the appropriate user and retrieve the user\'s profile picture from the \'avatar\' field. In order to upload the picture it is necessary to use the "Set a file property" function for appropriate user (using \'avatar\' property label).',
                required=False,
            ),
        ],
        required_properties=['language', 'name', 'timeZone'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}', 'PUT /rest/ofscCore/v1/resources/{resourceId}', 'PATCH /rest/ofscCore/v1/resources/{resourceId}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}', 'PUT /rest/ofscCore/v1/resources/{resourceId}', 'PATCH /rest/ofscCore/v1/resources/{resourceId}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceEvent', 'resources', 'findMatchingResourcesResponseSchema'],
    ),
    "resourceWorkZones": ModelInfo(
        name='resourceWorkZones',
        description='The list of the existing work zones.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of objects containing the details of the work zones assigned to the resource.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourceWorkZone'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['resourceWorkZone'],
        parent_models=[],
    ),
    "getResourceWorkZones": ModelInfo(
        name='getResourceWorkZones',
        description='The list of the existing work zones.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of objects containing the details of the work zones assigned to the resource.',
                required=False,
                items={'type': 'unknown', '$ref': 'getResourceWorkZoneObject'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workZones'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workZones'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['getResourceWorkZoneObject'],
        parent_models=[],
    ),
    "getResourceWorkZoneObject": ModelInfo(
        name='getResourceWorkZoneObject',
        description='',
        properties=[
            ModelProperty(
                name='workZone',
                type='string',
                description='The identifier of the work zone.',
                required=True,
                max_length=255,
            ),
            ModelProperty(
                name='ratio',
                type='integer',
                description='The work zone ratio of the resource. The default value is 100.',
                required=False,
                minimum=1,
                maximum=100,
            ),
            ModelProperty(
                name='recurrence',
                type='string',
                description="The value of this parameter along with the 'Recur Every' parameter defines the time between each recurrence of the work zone assignment. For example, if you specify 'daily' as the value of this parameter and '4' as the value of the 'recurEvery' parameter, then the time between each recurrence is four days.",
                required=False,
                enum=['weekly', 'daily'],
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the work zone assignment.',
                required=False,
                enum=['regular', 'override'],
            ),
            ModelProperty(
                name='weekdays',
                type='array',
                description='The weekdays on which the work zone is assigned to the resources. This parameter is mandatory when the recurrence is weekly.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='recurEvery',
                type='integer',
                description="The time between each recurrence of the work zone assignment. Depending on the value selected for 'recurrence', the  value of the parameter indicates the time between recurrence in days or weeks. For example, if '4' is the value of this parameter, and the 'recurrence' is 'daily', it indicates that the time between each recurrence is four days.",
                required=False,
                minimum=1,
                maximum=10000,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when the work zone assignment takes effect. Specify the date in 'YYYY-MM-DD' format.",
                required=True,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date until when the work zone assignment is effective. Specify the date in 'YYYY-MM-DD' format.",
                required=False,
            ),
            ModelProperty(
                name='workZoneItemId',
                type='integer',
                description='The identifier of the work zone assignment.',
                required=False,
            ),
            ModelProperty(
                name='workZoneStatus',
                type='string',
                description='Status of the work zone. Note that this is not a status of this workzone assignment to a resource. To modify this parameter use "Work Zones" functions in Metadata API.',
                required=True,
                enum=['active', 'inactive'],
            ),
        ],
        required_properties=['startDate', 'workZone', 'workZoneStatus'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['getResourceWorkZones'],
    ),
    "resourceWorkZone": ModelInfo(
        name='resourceWorkZone',
        description='',
        properties=[
            ModelProperty(
                name='workZone',
                type='string',
                description='The identifier of the work zone.',
                required=True,
                max_length=255,
            ),
            ModelProperty(
                name='ratio',
                type='integer',
                description='The work zone ratio of the resource. The default value is 100.',
                required=False,
                minimum=1,
                maximum=100,
            ),
            ModelProperty(
                name='recurrence',
                type='string',
                description="The value of this parameter along with the 'Recur Every' parameter defines the time between each recurrence of the work zone assignment. For example, if you specify 'daily' as the value of this parameter and '4' as the value of the 'recurEvery' parameter, then the time between each recurrence is four days.",
                required=False,
                enum=['weekly', 'daily'],
            ),
            ModelProperty(
                name='type',
                type='string',
                description='The type of the work zone assignment.',
                required=False,
                enum=['regular', 'override'],
            ),
            ModelProperty(
                name='weekdays',
                type='array',
                description='The weekdays on which the work zone is assigned to the resources. This parameter is mandatory when the recurrence is weekly.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='recurEvery',
                type='integer',
                description="The time between each recurrence of the work zone assignment. Depending on the value selected for 'recurrence', the  value of the parameter indicates the time between recurrence in days or weeks. For example, if '4' is the value of this parameter, and the 'recurrence' is 'daily', it indicates that the time between each recurrence is four days.",
                required=False,
                minimum=1,
                maximum=10000,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when the work zone assignment takes effect. Specify the date in 'YYYY-MM-DD' format.",
                required=True,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date until when the work zone assignment is effective. Specify the date in 'YYYY-MM-DD' format.",
                required=False,
            ),
            ModelProperty(
                name='workZoneItemId',
                type='integer',
                description='The identifier of the work zone assignment.',
                required=False,
            ),
        ],
        required_properties=['startDate', 'workZone'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workZones'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workZones'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceWorkZones', 'bulkUpdateWorkZonesRequestSchema'],
    ),
    "workZone": ModelInfo(
        name='workZone',
        description='Create new work zone',
        properties=[
            ModelProperty(
                name='shapes',
                type='array',
                description='Shapes',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='keys',
                type='array',
                description='Keys',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='travelArea',
                type='string',
                description='Work Zone Label',
                required=True,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='Status',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='workZoneLabel',
                type='string',
                description='Work Zone Label',
                required=True,
                min_length=1,
                max_length=255,
            ),
        ],
        required_properties=['workZoneLabel', 'travelArea'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "resourceWorkSkill": ModelInfo(
        name='resourceWorkSkill',
        description='',
        properties=[
            ModelProperty(
                name='workSkill',
                type='string',
                description='The label of the work skill.',
                required=True,
                max_length=40,
            ),
            ModelProperty(
                name='ratio',
                type='integer',
                description='The skill level of the resource.',
                required=True,
                minimum=0,
                maximum=100,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when the work skill takes effect. Specify the date in 'YYYY-MM-DD' format.",
                required=False,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date until when the work skill is effective. Specify the date in 'YYYY-MM-DD' format.",
                required=False,
            ),
        ],
        required_properties=['workSkill', 'ratio'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['workSkills', 'setWorkSkillsRequest', 'bulkUpdateWorkSkillsSchema'],
    ),
    "workSkills": ModelInfo(
        name='workSkills',
        description='The collection of resource work skill items.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of objects containing the details of the work skills of the resource.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourceWorkSkill'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of resources work skills returned.',
                required=True,
            ),
            ModelProperty(
                name='links',
                type='array',
                description='',
                required=True,
                items={'type': 'unknown', '$ref': None},
            ),
        ],
        required_properties=['totalResults', 'links'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSkills', 'GET /rest/ofscCore/v1/resources/{resourceId}/workSkills'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSkills', 'GET /rest/ofscCore/v1/resources/{resourceId}/workSkills'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceWorkSkill'],
        parent_models=[],
    ),
    "workSchedules": ModelInfo(
        name='workSchedules',
        description='The collection of work schedule items.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of work schedule items.',
                required=False,
                items={'type': 'unknown', '$ref': 'workScheduleItem'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workSchedules', 'POST /rest/ofscCore/v1/resources/{resourceId}/workSchedules'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workSchedules', 'POST /rest/ofscCore/v1/resources/{resourceId}/workSchedules'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['workScheduleItem'],
        parent_models=[],
    ),
    "workScheduleItem": ModelInfo(
        name='workScheduleItem',
        description='The array of work schedule item of the resource.',
        properties=[
            ModelProperty(
                name='workTimeStart',
                type='string',
                description="The start time of the working day when this schedule is in effect. The format is 'HH:MM'. This property is not available if the value of the isWorking parameter is false.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='scheduleLabel',
                type='string',
                description='The label of the work schedule in Oracle Field Service. This property is only available if the record type is schedule.',
                required=False,
            ),
            ModelProperty(
                name='scheduleShifts',
                type='array',
                description='The list of work shifts present in this work schedule. The properties of the work shifts are for information purpose only and cannot be modified using this operation.',
                required=False,
                items={'type': 'unknown', '$ref': 'shiftItem'},
            ),
            ModelProperty(
                name='comments',
                type='string',
                description='The description of the schedule in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when this schedule takes effect. The format is 'YYYY-MM-DD'.",
                required=True,
                format='date',
            ),
            ModelProperty(
                name='shiftLabel',
                type='string',
                description='The label of the work shift in Oracle Field Service. This property is only available if the value of recordType is either shift or extra_shift.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='The units of labor per day when this schedule is in effect. This property may be empty because all the customers may not use it.',
                required=False,
            ),
            ModelProperty(
                name='isWorking',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then it is a working day. If false, then it is a non-working day.This is a read-only field calculated based on the record type or the shift settings.',
                required=False,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date when this schedule ends. The date is in 'YYYY-MM-DD' format.",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='nonWorkingReason',
                type='string',
                description='The reason for the non-working day (for example, holiday, vacation). These reasons are preconfigured in the Oracle Field Service UI.',
                required=False,
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description="The end time of the working day when this schedule is in effect. The format is 'HH:MM'. This property is not available if the value of the isWorking parameter is false.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='recurrence',
                type='object',
                description='An array containing recurring work schedule items. This object is optional when the recordType is schedule. And it is mandatory when the recordType is shift, extra_shift, working, extra_working or non-working',
                required=False,
            ),
            ModelProperty(
                name='scheduleItemId',
                type='integer',
                description='The identifier of the work schedule item in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description='The type of work schedule record.',
                required=True,
                enum=['schedule', 'shift', 'extra_shift', 'working', 'extra_working', 'non-working'],
            ),
            ModelProperty(
                name='shiftType',
                type='string',
                description='The type of the work shift.',
                required=False,
                enum=['regular', 'on-call'],
            ),
        ],
        required_properties=['recordType', 'startDate'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSchedules'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSchedules'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['shiftItem'],
        parent_models=['workSchedules', 'bulkUpdateWorkSchedulesSchema'],
    ),
    "workSchedulesCalendarView": ModelInfo(
        name='workSchedulesCalendarView',
        description="The work schedule items of a resource in a calendar view. Each property name is date in 'YYYY-MM-DD' form.",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workSchedules/calendarView'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/workSchedules/calendarView'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['calendarViewItem'],
        parent_models=[],
    ),
    "calendarViewItem": ModelInfo(
        name='calendarViewItem',
        description="An object containing one calendar item. This calendar item is a data structure that contains information about the resource's work schedule.",
        properties=[
            ModelProperty(
                name='recordType',
                type='string',
                description="The type of the work schedule item. The value 'error' is returned if the resource calendar is misconfigured for the particular date.",
                required=False,
                enum=['schedule', 'shift', 'extra_shift', 'working', 'extra_working', 'non-working', 'error'],
            ),
            ModelProperty(
                name='comments',
                type='string',
                description='The description of the work schedule item in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='workTimeStart',
                type='string',
                description="The start time of a work day when this work schedule is in effect. The format is HH:MM. This property is not available if recordType='non-working'.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description="The end time of a work day when this work schedule is in effect. The format is HH:MM. This property is not available if recordType='non-working'.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='nonWorkingReason',
                type='string',
                description='The reason for the non-working day (for example, holiday, vacation). These reasons are preconfigured in the Oracle Field Service UI.',
                required=False,
            ),
            ModelProperty(
                name='shiftLabel',
                type='string',
                description="A work shift previously set up on Oracle Field Service UI. This property is only available if recordType is either 'shift' or 'extra_shift'.",
                required=False,
            ),
            ModelProperty(
                name='scheduleLabel',
                type='string',
                description="A work schedule previously set up on Oracle Field Service UI. This property is only available if recordType= 'schedule'.",
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='The units of labor per day when this schedule is in effect. This property may be empty because all the customers may not use it.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['workSchedulesCalendarView'],
    ),
    "findNearbyActivitiesResponse": ModelInfo(
        name='findNearbyActivitiesResponse',
        description='',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='A collection of nearby activities items.',
                required=False,
                items={'type': 'unknown', '$ref': 'findNearbyActivitiesItem'},
            ),
            ModelProperty(
                name='coordinates',
                type='object',
                description='The coordinates of a point to which appointments were found.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/findNearbyActivities'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/findNearbyActivities'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['findNearbyActivitiesItem'],
        parent_models=[],
    ),
    "findNearbyActivitiesItem": ModelInfo(
        name='findNearbyActivitiesItem',
        description="The properties of the activity. If no fields are specified in the 'fields' parameter in the request, just 'activityId', 'resourceId', 'longitude', 'latitude' and 'date' are returned in the response. For non-scheduled activities the 'data' parameter is not be returned. Also, the 'resourceId' parameter is not returned if the property is not defined.",
        properties=[
        ],
        required_properties=[],
        inheritance=['activity'],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['activity'],
        parent_models=['findNearbyActivitiesResponse'],
    ),
    "getCalendarsResponse": ModelInfo(
        name='getCalendarsResponse',
        description='',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='A collection of calendar items.',
                required=False,
                items={'type': 'unknown', '$ref': 'getCalendarsResponseItem'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/calendars'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/calendars'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['getCalendarsResponseItem'],
        parent_models=[],
    ),
    "getCalendarsResponseItem": ModelInfo(
        name='getCalendarsResponseItem',
        description='An array of resource calendar items.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The unique identifier of the resource in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date when this work schedule takes effect. The format is YYYY-MM-DD.',
                required=False,
            ),
            ModelProperty(
                name='regular',
                type='ref:calendarItem',
                description='',
                required=False,
                ref='calendarItem',
            ),
            ModelProperty(
                name='on-call',
                type='ref:calendarItem',
                description='',
                required=False,
                ref='calendarItem',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['calendarItem'],
        parent_models=['getCalendarsResponse'],
    ),
    "calendarItem": ModelInfo(
        name='calendarItem',
        description="An object containing one calendar item. This calendar item is a data structure that contains information about the resource's regular and on-call shifts.",
        properties=[
            ModelProperty(
                name='recordType',
                type='string',
                description='The type of this work schedule item.',
                required=False,
                enum=['schedule', 'shift', 'extra_shift', 'working', 'extra_working', 'non-working'],
            ),
            ModelProperty(
                name='comments',
                type='string',
                description='The description of this work schedule item in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='workTimeStart',
                type='string',
                description="The start time of a work day when this work schedule is in effect. The format is HH:MM. This property is not available if recordType='non-working'.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description="The end time of a work day when this work schedule is in effect. The format is HH:MM. This property is not available if recordType='non-working'.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='nonWorkingReason',
                type='string',
                description='The reason for a non-working day (for example, holiday, vacation). These reasons are preconfigured in the Oracle Field Service UI.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['getCalendarsResponseItem'],
    ),
    "shiftItem": ModelInfo(
        name='shiftItem',
        description='An object containing the resource shift item.',
        properties=[
            ModelProperty(
                name='workTimeStart',
                type='string',
                description='The start time of a working day when this work shift is in effect. The format is HH:MM. This property is not available if the value of the isWorking parameter is false.',
                required=False,
                format='time',
            ),
            ModelProperty(
                name='scheduleLabel',
                type='string',
                description='The label of the work schedule in Oracle Field Service. This property is only available for the record type schedule.',
                required=False,
            ),
            ModelProperty(
                name='comments',
                type='string',
                description='The description of this shift in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when this shift takes effect. The date is in 'YYYY-MM-DD'.",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='shiftLabel',
                type='string',
                description='The label of the work shift in Oracle Field Service. This property is only available if the record type is either shift or extra_shift.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='The units of labor per day when this schedule is in effect. This property may be empty because all the customers may not use it.',
                required=False,
            ),
            ModelProperty(
                name='isWorking',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then it is a working day. If false, then it is a non-working day.This is a read-only field calculated based on the record type or the shift settings.',
                required=False,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date when this shift ends. The date is in 'YYYY-MM-DD' format.",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='nonWorkingReason',
                type='string',
                description='The reason for the non-working day (for example, holiday, vacation). These reasons are preconfigured in the Oracle Field Service UI.',
                required=False,
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description='The end time of a working day when this work shift is in effect. The format is HH:MM. This property is not available if the value of the isWorking parameter is false.',
                required=False,
                format='time',
            ),
            ModelProperty(
                name='recurrence',
                type='object',
                description='An array containing recurring work schedule items. For repeating shifts this property contains a description of how the shift repeats over time.',
                required=False,
            ),
            ModelProperty(
                name='scheduleItemId',
                type='integer',
                description='The identifier of the work schedule item in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description='The type of the work shift record.',
                required=False,
                enum=['shift', 'extra_shift'],
            ),
            ModelProperty(
                name='shiftType',
                type='string',
                description='The type of the work shift.',
                required=False,
                enum=['regular', 'on-call'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['workScheduleItem', 'fmrWorkScheduleItem'],
    ),
    "routes": ModelInfo(
        name='routes',
        description='Collection of routes of a resource',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='Resource Id',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='Items',
                required=False,
                items={'type': 'unknown', '$ref': 'route'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['route'],
        parent_models=[],
    ),
    "route": ModelInfo(
        name='route',
        description='The route of the specified resource.',
        properties=[
            ModelProperty(
                name='routeReactivationTime',
                type='string',
                description='The reactivation time of the route.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='The list of activity fields.',
                required=False,
                items={'type': 'unknown', '$ref': 'activity'},
            ),
            ModelProperty(
                name='routeStartTime',
                type='string',
                description='The start time of the route.',
                required=False,
            ),
            ModelProperty(
                name='routeEndTime',
                type='string',
                description='The end time of the route.',
                required=False,
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of activities in the response.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The specified date of the route.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/routes/{date}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/routes/{date}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activity'],
        parent_models=['routes'],
    ),
    "resourceInventory": ModelInfo(
        name='resourceInventory',
        description='The inventory that can be installed or deinstalled during an activity.',
        properties=[
            ModelProperty(
                name='inventoryId',
                type='integer',
                description='The unique identifier of inventory in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity to which the inventory is assigned. If the status of the inventory is set to resource, then the activity ID is not returned.',
                required=False,
            ),
            ModelProperty(
                name='exchangedInventoryId',
                type='integer',
                description='The identifier of the inventory that is returned when the resource exchanges the inventory with another resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The identifier of the resource to which the inventory is assigned.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description="The current status of the specified inventory. It indicates the location of the inventory, for example, at customer's site, or in technician's truck.",
                required=False,
                enum=['customer', 'resource', 'installed', 'deinstalled'],
            ),
            ModelProperty(
                name='serialNumber',
                type='string',
                description='The serial number specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The inventory type specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of inventory specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceInventories'],
    ),
    "resourceInventories": ModelInfo(
        name='resourceInventories',
        description='The collection of resource inventories.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of resource inventories.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourceInventory'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/inventories'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/inventories'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceInventory'],
        parent_models=[],
    ),
    "createResourceInventory": ModelInfo(
        name='createResourceInventory',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/inventories'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/inventories'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['createCustomerInventory'],
        parent_models=[],
    ),
    "resourceUsers": ModelInfo(
        name='resourceUsers',
        description='The list of users assigned to the resource.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The array of objects containing information about the users assigned to the resource.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourceUser'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}/users', 'GET /rest/ofscCore/v1/resources/{resourceId}/users', 'PUT /rest/ofscCore/v1/resources/{resourceId}/users'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}/users'],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/users', 'PUT /rest/ofscCore/v1/resources/{resourceId}/users'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceUser'],
        parent_models=[],
    ),
    "plans": ModelInfo(
        name='plans',
        description='The collection of work plans assigned to the resource.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of results returned.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='The array of items containing the details of the work plans assigned to the resource.',
                required=False,
                items={'type': 'unknown', '$ref': 'plan'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['plan'],
        parent_models=[],
    ),
    "resourceLocationRequestBody": ModelInfo(
        name='resourceLocationRequestBody',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='address',
                type='string',
                description='The address of the resource.',
                required=False,
            ),
            ModelProperty(
                name='country',
                type='string',
                description='The country in which the address is located. Note that modification of this filed only without changes in other address fields will not trigger coordinates resolution',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city in which the address is located.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates of the resource location.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='state',
                type='string',
                description='The state in which the address is located.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the resource location. If request doesn\'t contain "status", but coordinates are present, "status" will be sent as "manual"',
                required=False,
            ),
            ModelProperty(
                name='label',
                type='string',
                description='The unique label of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates of the resource location.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/locations', 'PATCH /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/locations', 'PATCH /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "resourceLocation": ModelInfo(
        name='resourceLocation',
        description='The schema of the response body object for this operation.',
        properties=[
            ModelProperty(
                name='address',
                type='string',
                description='The address of the resource.',
                required=False,
            ),
            ModelProperty(
                name='locationId',
                type='integer',
                description='The unique identifier of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='country',
                type='string',
                description='The country in which the address is located.',
                required=False,
            ),
            ModelProperty(
                name='city',
                type='string',
                description='The city in which the address is located.',
                required=False,
            ),
            ModelProperty(
                name='longitude',
                type='number',
                description='The geographic coordinates of the resource location.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='state',
                type='string',
                description='The state in which the address is located.',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='label',
                type='string',
                description='The unique label of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='postalCode',
                type='string',
                description='The postal code of the resource location.',
                required=False,
            ),
            ModelProperty(
                name='latitude',
                type='number',
                description='The geographic coordinates of the resource location.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}', 'PATCH /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}', 'PATCH /rest/ofscCore/v1/resources/{resourceId}/locations/{locationId}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceLocations'],
    ),
    "resourceAssignedLocationsWeek": ModelInfo(
        name='resourceAssignedLocationsWeek',
        description='The locations assigned to the resource for a week.',
        properties=[
            ModelProperty(
                name='wed',
                type='ref:resourceAssignedLocationsDay',
                description='Wed',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='sun',
                type='ref:resourceAssignedLocationsDay',
                description='Sun',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='thu',
                type='ref:resourceAssignedLocationsDay',
                description='Thu',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='tue',
                type='ref:resourceAssignedLocationsDay',
                description='Tue',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='sat',
                type='ref:resourceAssignedLocationsDay',
                description='Sat',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='fri',
                type='ref:resourceAssignedLocationsDay',
                description='Fri',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
            ModelProperty(
                name='mon',
                type='ref:resourceAssignedLocationsDay',
                description='Mon',
                required=False,
                ref='resourceAssignedLocationsDay',
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}/assignedLocations', 'PUT /rest/ofscCore/v1/resources/{resourceId}/assignedLocations', 'GET /rest/ofscCore/v1/resources/{resourceId}/assignedLocations'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}/assignedLocations'],
        used_in_response_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}/assignedLocations', 'GET /rest/ofscCore/v1/resources/{resourceId}/assignedLocations'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceAssignedLocationsDay'],
        parent_models=[],
    ),
    "resourceTemporaryAssignedLocationsWeek": ModelInfo(
        name='resourceTemporaryAssignedLocationsWeek',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/resources/{resourceId}/assignedLocations'],
        used_in_request_endpoints=['PATCH /rest/ofscCore/v1/resources/{resourceId}/assignedLocations'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceAssignedLocationsDay'],
        parent_models=[],
    ),
    "createResource": ModelInfo(
        name='createResource',
        description='The resource used for an activity. For example, a resource can be a technician, a truck, or a bucket.<p><b>Note</b>: This resource is not the same as a REST resource.</p>',
        properties=[
            ModelProperty(
                name='timeZone',
                type='string',
                description='The name of the resource\'s time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. In the response, this field contains the Oracle Field Service time zone name, while the field \'timeZoneIANA\' contains the IANA time zone name. For a list of supported time zones, see <a href="OFSC_Supported_Time_Zones.html">Supported Time Zones</a>.',
                required=False,
            ),
            ModelProperty(
                name='email',
                type='string',
                description='The email ID of the resource. The maximum character length of this field is 255 characters. If more than 255 characters are specified, then only the first 255 characters are saved and the rest are ignored.',
                required=False,
            ),
            ModelProperty(
                name='phone',
                type='string',
                description="The phone number of the resource. The maximum character length of this field is 16 characters. If more than 16 characters are specified, then only the first 16 characters are saved and the rest are ignored.<i>Note</i>: The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the resource. The maximum character length of this field is 40 characters. If more than 40 characters are specified, then only the first 40 characters are saved and the rest are ignored.',
                required=False,
                min_length=1,
            ),
            ModelProperty(
                name='resourceType',
                type='string',
                description='The type of the resource.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format for the resource. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the resource.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the resource. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='parentResourceId',
                type='string',
                description='The unique identifier of the parent resource.',
                required=False,
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the resource. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialRatio',
                type='number',
                description="The ratio applied over the company estimations if the user hasn't performed any activity. All modifications to the personal profile ratio are done using this value as the starting point. The default value is 1.",
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialPeriod',
                type='integer',
                description="The number of days the initial ratio is used after a new resource is created. After the specified number of days, the reported duration starts impacting the company estimations. This field is used only if the 'Use durations reported to enhance company-wide estimations' option is selected in the Manage application screen 'Configuration -> Resource Types'. The default value is 5.",
                required=False,
            ),
            ModelProperty(
                name='organization',
                type='string',
                description='The label of an organization of the resource.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/resources/{resourceId}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "updateResource": ModelInfo(
        name='updateResource',
        description='The resource used for an activity. For example, a resource can be a technician, a truck, or a bucket.<p><b>Note</b>: This resource is not the same as a REST resource.</p>',
        properties=[
            ModelProperty(
                name='timeZone',
                type='string',
                description='The name of the resource\'s time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that you specify IANA names. In the response, this field contains the Oracle Field Service time zone name, while the field \'timeZoneIANA\' contains the IANA time zone name. For a list of supported time zones, see <a href="OFSC_Supported_Time_Zones.html">Supported Time Zones</a>.',
                required=False,
            ),
            ModelProperty(
                name='email',
                type='string',
                description='The email ID of the resource. The maximum character length of this field is 255 characters. If more than 255 characters are specified, then only the first 255 characters are saved and the rest are ignored.',
                required=False,
            ),
            ModelProperty(
                name='phone',
                type='string',
                description="The phone number of the resource. The maximum character length of this field is 16 characters. If more than 16 characters are specified, then only the first 16 characters are saved and the rest are ignored.<i>Note</i>: The phone number is saved in Oracle Field Service with the '+' symbol and all other non-digit characters are removed. For example, if you enter the phone number as +1(234)234-23_42, it is saved in Oracle Field Service as +12342342342.",
                required=False,
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The name of the resource. The maximum character length of this field is 40 characters. If more than 40 characters are specified, then only the first 40 characters are saved and the rest are ignored.',
                required=False,
                min_length=1,
            ),
            ModelProperty(
                name='resourceType',
                type='string',
                description='The type of the resource.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format for the resource. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the resource.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the resource. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='parentResourceId',
                type='string',
                description='The unique identifier of the parent resource.',
                required=False,
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the resource. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialRatio',
                type='number',
                description="The ratio applied over the company estimations if the user hasn't performed any activity. All modifications to the personal profile ratio are done using this value as the starting point. The default value is 1.",
                required=False,
            ),
            ModelProperty(
                name='durationStatisticsInitialPeriod',
                type='integer',
                description="The number of days the initial ratio is used after a new resource is created. After the specified number of days, the reported duration starts impacting the company estimations. This field is used only if the 'Use durations reported to enhance company-wide estimations' option is selected in the Manage application screen 'Configuration -> Resource Types'. The default value is 5.",
                required=False,
            ),
            ModelProperty(
                name='organization',
                type='string',
                description='The label of an organization of the resource.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The unique identifier of the resource. The maximum length of this field is 32 characters.Note that this parameter cannot be changed and will be ignored in the update request if the resource is identified by its resourceId in the URL. This parameter can be modified only with the identifyResourceBy=resourceInternalId query parameter.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/resources/{resourceId}'],
        used_in_request_endpoints=['PATCH /rest/ofscCore/v1/resources/{resourceId}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "resourceUser": ModelInfo(
        name='resourceUser',
        description='The user assigned to the resource.',
        properties=[
            ModelProperty(
                name='login',
                type='string',
                description='The login details of the assigned user.',
                required=True,
            ),
        ],
        required_properties=['login'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceUsers'],
    ),
    "resourceLocations": ModelInfo(
        name='resourceLocations',
        description='The collection of resource locations.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of objects containing the resource location details.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourceLocation'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/locations'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/locations'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceLocation'],
        parent_models=[],
    ),
    "resourcePositions": ModelInfo(
        name='resourcePositions',
        description='The collection of historical positions of the specified resource for the specified date.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description="The array of items containing the resource's position history for the specified date.",
                required=False,
                items={'type': 'unknown', '$ref': 'resourcePosition'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of resource position items returned by the operation.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/positionHistory'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/{resourceId}/positionHistory'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourcePosition'],
        parent_models=[],
    ),
    "resourcePosition": ModelInfo(
        name='resourcePosition',
        description='The array of objects that contain position information of the resource.',
        properties=[
            ModelProperty(
                name='time',
                type='string',
                description='The date in the Internet Date-Time format. For example, 2018-06-27T06:06:05+0000.',
                required=True,
                format='timestamp-date-time-iso8601',
            ),
            ModelProperty(
                name='lat',
                type='number',
                description='The latitude coordinate of the position.  A maximum of five digits after the decimal point are returned.',
                required=True,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='lng',
                type='number',
                description='The longitude coordinate of the position.  A maximum of five digits after the decimal point are returned.',
                required=True,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='alt',
                type='number',
                description='The altitude of the position (in meters) above the World Geodetic System (WGS) 84 reference ellipsoid.  The altitude is not retrieved, if it is not set for the position.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='dir',
                type='number',
                description='The direction (in degrees) in which the vehicle is headed.  The direction is not retrieved, if it is not set for the position.',
                required=False,
                minimum=0,
                maximum=360,
            ),
            ModelProperty(
                name='spd',
                type='number',
                description='The vehicle speed in meters per second.  The speed is not retrieved, if it is not set for the position.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='acc',
                type='number',
                description='The accuracy of the position in meters. The accuracy is not retrieved, if it is not set for the position.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='s',
                type='string',
                description='The status of the position. Possible values:<ul><li>earlyStart: The activity was started far from its location (red color on map)</li><li>lateFinish: The activity was completed far from its location (red color on map)</li><li>leftLocation: The resource left the activity location during work time (red color on map)</li><li>idle: The resource was idle (yellow color on map)</li></ul>The status is not returned when the status is normal (blue color on map).',
                required=False,
                enum=['earlyStart', 'lateFinish', 'leftLocation', 'idle'],
            ),
            ModelProperty(
                name='i',
                type='number',
                description='The duration of the position in minutes. A position has a duration when several positions in close proximity are grouped into one. The duration is not returned when the duration is zero.',
                required=False,
            ),
        ],
        required_properties=['time', 'lat', 'lng'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourcePositions'],
    ),
    "resourceAssignedLocationsDay": ModelInfo(
        name='resourceAssignedLocationsDay',
        description='The locations assigned to the resource for this weekday.',
        properties=[
            ModelProperty(
                name='start',
                type='integer',
                description='The identifier of the start location for this weekday.',
                required=False,
            ),
            ModelProperty(
                name='homeZoneCenter',
                type='integer',
                description='The identifier of the home zone center location for this weekday.',
                required=False,
            ),
            ModelProperty(
                name='end',
                type='integer',
                description='The identifier of the end location for this weekday.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourceAssignedLocationsWeek', 'resourceTemporaryAssignedLocationsWeek'],
    ),
    "plan": ModelInfo(
        name='plan',
        description='The work plan for the resource.',
        properties=[
            ModelProperty(
                name='measure',
                type='string',
                description='The type of measure used for the work plan.',
                required=False,
                enum=['man_hours', 'points', 'scheduled', 'FTE'],
            ),
            ModelProperty(
                name='value',
                type='number',
                description='The value of the measure.',
                required=False,
                minimum=0,
                maximum=65535,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date when the work plan is assigned to the resource. Specify the date in YYYY-MM-DD format.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/plans'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/plans'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['plans'],
    ),
    "setWorkSkillsRequest": ModelInfo(
        name='setWorkSkillsRequest',
        description='An array of objects containing the work skills of the resource.',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSkills'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/{resourceId}/workSkills'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='array',
        examples=[],
        nested_models=['resourceWorkSkill'],
        parent_models=[],
    ),
    "bulkUpdateWorkSchedulesResponseSchema": ModelInfo(
        name='bulkUpdateWorkSchedulesResponseSchema',
        description='',
        properties=[
            ModelProperty(
                name='resourcesUpdated',
                type='integer',
                description='The number of resources for which the work schedules are updated.',
                required=False,
            ),
            ModelProperty(
                name='results',
                type='array',
                description='An array containing the results of the operation.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['Error'],
        parent_models=[],
    ),
    "bulkUpdateWorkSchedulesSchema": ModelInfo(
        name='bulkUpdateWorkSchedulesSchema',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSchedules'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='array',
        examples=[],
        nested_models=['workScheduleItem'],
        parent_models=[],
    ),
    "bulkUpdateWorkSkillsResponseSchema": ModelInfo(
        name='bulkUpdateWorkSkillsResponseSchema',
        description='',
        properties=[
            ModelProperty(
                name='resourcesUpdated',
                type='integer',
                description='The number of resources for which the work skills are updated.',
                required=False,
            ),
            ModelProperty(
                name='results',
                type='array',
                description='An array containing the results of the operation. The items in this array are in the same order as the items in the resources array. Each item in the resources array of the request has a corresponding item in the results array.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['Error'],
        parent_models=[],
    ),
    "bulkUpdateWorkSkillsSchema": ModelInfo(
        name='bulkUpdateWorkSkillsSchema',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkSkills'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='array',
        examples=[],
        nested_models=['resourceWorkSkill'],
        parent_models=[],
    ),
    "bulkUpdateWorkZonesResponseSchema": ModelInfo(
        name='bulkUpdateWorkZonesResponseSchema',
        description='',
        properties=[
            ModelProperty(
                name='resourcesUpdated',
                type='integer',
                description='The number of resources for which the work zones are updated.',
                required=False,
            ),
            ModelProperty(
                name='results',
                type='array',
                description='An array containing the results of the operation. The items in this array are in the same order as the items in the resources array. Each item in the resources array of the request has a corresponding item in the results array.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['Error'],
        parent_models=[],
    ),
    "bulkUpdateWorkZonesRequestSchema": ModelInfo(
        name='bulkUpdateWorkZonesRequestSchema',
        description='',
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateWorkZones'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='array',
        examples=[],
        nested_models=['resourceWorkZone'],
        parent_models=[],
    ),
    "bulkUpdateResourceInventoriesRequestInventorySchema": ModelInfo(
        name='bulkUpdateResourceInventoriesRequestInventorySchema',
        description='',
        properties=[
            ModelProperty(
                name='serialNumber',
                type='string',
                description="The serial number of the inventory.<ul><li>For serialized inventories, this is the unique key (or a part of the unique key along with 'inventoryType') of an inventory for a particular resource. This key is determined by the value of the 'identifySerializedInventoryBy' parameter.</li><li>For non-serialized inventories, the value of this parameter can be specified but it does not hold any meaning.</li></ul>",
                required=False,
            ),
            ModelProperty(
                name='quantity',
                type='number',
                description='The quantity of the non-serialized inventory.<ul><li>For serialized inventories, the value of this parameter is set to 1.</li><li>For non-serialized inventories, this parameter is saved. The value can be positive, negative, or zero.</li></ul> The default value is 1.',
                required=False,
            ),
            ModelProperty(
                name='inventoryType',
                type='string',
                description='The label of the inventory type as defined in Oracle Field Service.<ul><li>For serialized inventories, the value of this parameter is not specified.</li><li>For non-serialized inventories, this parameter along with the model is used as the key to determine the existing inventory that is replaced.</li></ul>',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bulkUpdateResourceInventoriesRequestResourceSchema'],
    ),
    "bulkUpdateResourceInventoriesRequestResourceSchema": ModelInfo(
        name='bulkUpdateResourceInventoriesRequestResourceSchema',
        description='',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID in the external system.',
                required=True,
                min_length=1,
            ),
            ModelProperty(
                name='operationType',
                type='string',
                description='The type of the operation. The possible values of this parameter are:<ul><li>replace - Existing inventories that are not specified in the request are deleted. Inventories that are specified in the request and exist in Oracle Field Service  are updated. Inventories that are specified in the request but do not exist in Oracle Field Service are added. This is the default value.</li><li>update - Existing inventories that are not specified in the request are not deleted. Inventories that are specified in the request and exist in Oracle Field Service are updated. Inventories that are specified in the request but do not exist in Oracle Field Service are added.</li></ul>',
                required=False,
                enum=['update', 'replace'],
            ),
            ModelProperty(
                name='identifySerializedInventoryBy',
                type='string',
                description='This field determines the key for identifying serialized inventory within a resource pool. The possible values of this field are:<ul><li> serialNumber - When serialNumber is the only field required for identifying serialized inventories for a particular resource. This is the default value.</li><li> typeAndSerial -  When two fields (inventoryType + serialNumber) are used as the key for identifying serialized inventories for a particular resource.</li></ul>',
                required=False,
                enum=['serialNumber', 'typeAndSerial'],
            ),
            ModelProperty(
                name='inventoryPropertiesUpdateMode',
                type='ref:inventoryPropertiesUpdateMode',
                description='',
                required=False,
                ref='inventoryPropertiesUpdateMode',
            ),
            ModelProperty(
                name='inventories',
                type='array',
                description="An array containing inventory objects. If this array is empty and the 'operationType' is 'replace', then all the existing inventories for the specified resource are erased.",
                required=True,
                items={'type': 'unknown', '$ref': 'bulkUpdateResourceInventoriesRequestInventorySchema'},
            ),
        ],
        required_properties=['resourceId', 'inventories'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['bulkUpdateResourceInventoriesRequestInventorySchema', 'inventoryPropertiesUpdateMode'],
        parent_models=['bulkUpdateResourceInventoriesRequestSchema'],
    ),
    "bulkUpdateResourceInventoriesRequestSchema": ModelInfo(
        name='bulkUpdateResourceInventoriesRequestSchema',
        description='',
        properties=[
            ModelProperty(
                name='resources',
                type='array',
                description='An array of resource IDs and their related inventory information.',
                required=True,
                items={'type': 'unknown', '$ref': 'bulkUpdateResourceInventoriesRequestResourceSchema'},
            ),
        ],
        required_properties=['resources'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['bulkUpdateResourceInventoriesRequestResourceSchema'],
        parent_models=[],
    ),
    "bulkUpdateResourceInventoriesResponseResultSchema": ModelInfo(
        name='bulkUpdateResourceInventoriesResponseResultSchema',
        description='',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID for which the inventories were updated, created, or deleted.',
                required=False,
            ),
            ModelProperty(
                name='created',
                type='integer',
                description='The number of inventories created for the specific resource.',
                required=False,
            ),
            ModelProperty(
                name='updated',
                type='integer',
                description='The number of inventories updated for the specific resource.',
                required=False,
            ),
            ModelProperty(
                name='deleted',
                type='integer',
                description='The number of inventories deleted for the specific resource.',
                required=False,
            ),
            ModelProperty(
                name='errors',
                type='array',
                description='This field is returned only if any item fails. It contains human-readable description of the error such as type, title, HTTP status, and so on.',
                required=False,
                items={'type': 'unknown', '$ref': 'Error'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['Error'],
        parent_models=['bulkUpdateResourceInventoriesResponseSchema'],
    ),
    "bulkUpdateResourceInventoriesResponseSchema": ModelInfo(
        name='bulkUpdateResourceInventoriesResponseSchema',
        description='',
        properties=[
            ModelProperty(
                name='created',
                type='integer',
                description='The number of inventories created by the API call.',
                required=False,
            ),
            ModelProperty(
                name='updated',
                type='integer',
                description='The number of inventories updated by the API call.',
                required=False,
            ),
            ModelProperty(
                name='deleted',
                type='integer',
                description='The number of inventories deleted by the API call.',
                required=False,
            ),
            ModelProperty(
                name='itemsFailed',
                type='integer',
                description="The number of items of the 'resources' array in the request that failed.",
                required=False,
            ),
            ModelProperty(
                name='results',
                type='array',
                description="The array of results. Each item in the 'resources' array in the request has a corresponding item in the 'results' array. The 'results' array items are in the same order as the 'resources' array items.",
                required=False,
                items={'type': 'unknown', '$ref': 'bulkUpdateResourceInventoriesResponseResultSchema'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/bulkUpdateInventories'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['bulkUpdateResourceInventoriesResponseResultSchema'],
        parent_models=[],
    ),
    "findMatchingResourcesResponseSchema": ModelInfo(
        name='findMatchingResourcesResponseSchema',
        description='The list of matching resources.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of resources returned. Not returned if requested activity is segmentable.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request. Not returned if requested activity is segmentable.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. Not returned if requested activity is segmentable.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='The resources matching the criteria specified in the request.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findMatchingResources'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findMatchingResources'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['fmrFitnessRecord', 'resource', 'fmrWorkScheduleItem'],
        parent_models=[],
    ),
    "findResourcesForUrgentAssignmentResponseSchema": ModelInfo(
        name='findResourcesForUrgentAssignmentResponseSchema',
        description='The list of resources that match the criteria for urgent assignment.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The resources that match the specified request criteria for urgent assignment.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourceDetails'],
        parent_models=[],
    ),
    "findMatchingResourcesRequestSchema": ModelInfo(
        name='findMatchingResourcesRequestSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description="The date for which the operation calculates the fitness formula. Specify the date in 'YYYY-MM-DD' format. For regular activity type this field can be omitted if schedulesToReturn parameter is specified.",
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The number of items to be skipped in the response. It is ignored for request with segmentable activity types.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description="The unique identifier of the activity in Oracle Field Service. If the Activity ID is specified, then the API uses the properties of the specified activity to find matching resources. Only one of the following parameters can be specified in a same request: 'activity', 'activityId' or 'activitySearchFields'.",
                required=False,
            ),
            ModelProperty(
                name='fields',
                type='array',
                description="The array of resource fields that are returned in the response. The specified fields are returned in the response.<ul><li>If the parameter 'fields' is not present, then the default fields 'resourceId', 'status', 'language', and 'languageISO' are returned.</li><li>If the fields are specified, then the default fields and requested fields are returned.</li><li>If incorrect fields are specified then, then a 400 error is returned.</li><li>If the array is empty, then only the default fields are returned.</li></ul>",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The maximum number of resources to be returned in the response. The maximum value that can be specified is 100. If you specify a value greater than 100, it defaults to 100. It is ignored for request with segmentable activity types.',
                required=False,
            ),
            ModelProperty(
                name='schedulesToReturn',
                type='array',
                description='The array of dates for which additional schedules information is returned. It is ignored for request with segmentable activity types.In case of Date parameter is passed the fitness functions will only be compared against the date provided in the Date field and not against each date in the schedulesToReturn array. If the resources could have different work skills or work zones over the dates in the array, you need to submit a separate findMatchingResources request for each individual day in the Date field.If Date parameter is omitted the function includes a resource in the response in case the resource is matched for any date from the list. This way allows to run single request for date list instead of running many requests for a single date. In this case it is allowed to specify 14 items max.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='schedulesFields',
                type='array',
                description="The schedules fields to be returned in the response. The  value of this parameter is specified, then only the specified fields are returned in the 'schedules' items for each date. This parameter must be specified along with the 'schedulesToReturn' parameter because the schedules information is returned only if it is specified. It is ignored for request with segmentable activity types.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='criteria',
                type='object',
                description='The criteria used to filter the results.Results with fitness value greater than the specified cutoff point are removed from response. If a particular criteria is not present, then the API does use the criteria to filter the results. If the criteria parameter is not specified in request, then by default all the criteria is applied.',
                required=False,
            ),
            ModelProperty(
                name='activitySearchFields',
                type='object',
                description="If specified, the API looks for existing activity with matching Appointment Number, Customer Number or both. Then API returns resources to which this activity may be assigned. Only one of the following parameters can be specified in a same request: 'activity', 'activityId' or 'activitySearchFields'.",
                required=False,
            ),
            ModelProperty(
                name='activity',
                type='unknown',
                description='The data structure that is used to provide the activity information.',
                required=False,
            ),
            ModelProperty(
                name='forecastDuringBooking',
                type='object',
                description='The criteria used to sort and filter the results by means of forecasting the future activity flow to calculate the average additional travel per activity.Results with travel more then an average per bucket are filtered out before the end of forecasting period. If a particular parameter is not present or not specified in request, then the default values are applied.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findMatchingResources'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findMatchingResources'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activityFMRSchema'],
        parent_models=[],
    ),
    "findResourcesForUrgentAssignmentRequestSchema": ModelInfo(
        name='findResourcesForUrgentAssignmentRequestSchema',
        description='The schema of the request body object for this operation.',
        properties=[
            ModelProperty(
                name='activity',
                type='unknown',
                description='The properties of the activity. This is a required parameter.',
                required=True,
            ),
            ModelProperty(
                name='radius',
                type='integer',
                description='The radius of area (in meters) where the search is performed. If the value is not specified in the request, then it defaults to 100000 meters.',
                required=False,
                minimum=0,
                maximum=300000,
            ),
            ModelProperty(
                name='resourceFields',
                type='array',
                description="The resource fields to be returned in the response.If this parameter is not specified in the request, then the default resource fields,  'resourceId', 'resourceInternalId', 'name', 'resourceType' are returned.Using this parameter, it is possible to specify the list of fields that are needed for the integration flow to increase the performance and reduce the traffic.When the resource fields are specified, only the 'resourceId' field and the requested fields are returned.If incorrect resource fields are specified, then the 400 error code is returned.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='parentResources',
                type='array',
                description='The list of identifiers of the parent resources.If this parameter is specified, then the operation evaluates only the children of the specified resources and their descendants. If this parameter is not specified, then all resources are evaluated and returned in the response.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=['activity'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/findResourcesForUrgentAssignment'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['activityFMRSchema'],
        parent_models=[],
    ),
    "fmrFitnessRecord": ModelInfo(
        name='fmrFitnessRecord',
        description='The fitness values for the resource calculated for the particular schedule date. Note that these fitness values are calculated for all criteria, regardless if they are present in the request or not. Only the values that are specified in the request "criteria" parameter and only for the date specified in the "date" request parameter may cause resources exclusion from the response. The others fitness values are provided only as additional information.',
        properties=[
            ModelProperty(
                name='workZone',
                type='integer',
                description='The calculated fitness value for the resource work zone. If the request criteria "workSkill" was not sent, then this value is not calculated, the value "100" is returned here and used for the fitness instead. As the result, resources are not excluded by this criteria.',
                required=False,
                minimum=0,
                maximum=100,
            ),
            ModelProperty(
                name='resourcePreference',
                type='number',
                description='The calculated fitness value for the preference level of the resource. If the request criteria "resourcePreference" was not sent, then this value is not calculated, the value "0" is returned here and used for the fitness instead. As the result, resources are not excluded by this criteria.',
                required=False,
                minimum=0,
                maximum=1,
            ),
            ModelProperty(
                name='workTime',
                type='integer',
                description='The calculated time frame based on the resource calendar and activity time constraints. If the request criteria "workTime" was not sent, then this value is not calculated, the value "0" is returned here and used for the fitness instead. As the result, resources are not excluded by this criteria.',
                required=False,
            ),
            ModelProperty(
                name='workSkill',
                type='integer',
                description='The calculated fitness value for the resource work skills required to complete the activity. If the request criteria "workSkill" was not sent, then this value is not calculated, the value "100" is returned here and used for the fitness instead. As the result, resources are not excluded by this criteria.',
                required=False,
                minimum=0,
                maximum=100,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['findMatchingResourcesResponseSchema'],
    ),
    "setResourcesPositionsRequestSchema": ModelInfo(
        name='setResourcesPositionsRequestSchema',
        description='The collection of resource positions.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='An array of items containing the position information of one or more resources.',
                required=True,
                items={'type': 'unknown', '$ref': 'setResourcesPositionsRequestPositionSchema'},
            ),
        ],
        required_properties=['items'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/setPositions'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/setPositions'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['setResourcesPositionsRequestPositionSchema'],
        parent_models=[],
    ),
    "setResourcesPositionsRequestPositionSchema": ModelInfo(
        name='setResourcesPositionsRequestPositionSchema',
        description='The request body parameters of this operation.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The external identifier of the resource.',
                required=True,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The date in the Internet Date-Time format or integer UNIX timestamp. For example, 2016-09-20T11:37:29Z or 1476267764.',
                required=True,
                format='timestamp-date-time-iso8601',
            ),
            ModelProperty(
                name='lat',
                type='number',
                description='The latitude coordinate of the resource position. A maximum of five digits after the decimal point are considered.',
                required=True,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='lng',
                type='number',
                description='The longitude coordinate of the resource position. A maximum of five digits after the decimal point are considered.',
                required=True,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='alt',
                type='integer',
                description='The altitude of the position (in meters) above the World Geodetic System (WGS) 84 reference ellipsoid.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='dir',
                type='number',
                description='The direction (in degrees) in which the vehicle is headed. Only one digit after the decimal point is considered.',
                required=False,
                minimum=0,
                maximum=360,
            ),
            ModelProperty(
                name='spd',
                type='number',
                description='The vehicle speed in meters per second. Only one digit after the decimal point is considered.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='acc',
                type='integer',
                description='The accuracy of the position in meters.',
                required=False,
                minimum=0,
            ),
        ],
        required_properties=['resourceId', 'time', 'lat', 'lng'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['setResourcesPositionsRequestSchema'],
    ),
    "setResourcesPositionsResponseSchema": ModelInfo(
        name='setResourcesPositionsResponseSchema',
        description='The summary of the successfully processed items and the failed items.',
        properties=[
            ModelProperty(
                name='itemsProcessed',
                type='integer',
                description='The number of successfully processed items.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='itemsFailed',
                type='integer',
                description='The number of failed items.',
                required=False,
                minimum=0,
            ),
            ModelProperty(
                name='errors',
                type='array',
                description='The list of failed items with their corresponding error messages.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/setPositions'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCore/v1/resources/custom-actions/setPositions'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "lastKnownResourcesPositionsResponseSchema": ModelInfo(
        name='lastKnownResourcesPositionsResponseSchema',
        description='The collection of the last known positions of the specified resources. The collection also includes error information.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The array of resource IDs with their last known position information.',
                required=False,
                items={'type': 'unknown', '$ref': 'lastKnownResourcesPositionsResponsePositionSchema'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of items returned by the operation.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='hasMore',
                type='boolean',
                description='Contains one of the following values: true or false. If true, then there are more results that can be retrieved with successive paging requests. If false or if the value is not present, then there are no more results or this is the final page.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/custom-actions/lastKnownPositions'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/custom-actions/lastKnownPositions'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['lastKnownResourcesPositionsResponsePositionSchema'],
        parent_models=[],
    ),
    "lastKnownResourcesPositionsResponsePositionSchema": ModelInfo(
        name='lastKnownResourcesPositionsResponsePositionSchema',
        description='The last known position of the resource.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The external identifier of the resource.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The date in the Internet Date-Time format. For example, 2018-06-27T06:06:05+0000.',
                required=False,
                format='timestamp-date-time-iso8601',
            ),
            ModelProperty(
                name='lat',
                type='number',
                description='The latitude coordinate (in degrees) of the position.  A maximum of five digits after the decimal point are returned.',
                required=False,
                minimum=-90,
                maximum=90,
            ),
            ModelProperty(
                name='lng',
                type='number',
                description='The longitude coordinate (in degrees) of the position.  A maximum of five digits after the decimal point are returned.',
                required=False,
                minimum=-180,
                maximum=180,
            ),
            ModelProperty(
                name='errorMessage',
                type='string',
                description='The error message corresponding to the resource IDs.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['lastKnownResourcesPositionsResponseSchema'],
    ),
    "resourcesInAreaResponseSchema": ModelInfo(
        name='resourcesInAreaResponseSchema',
        description='The collection of resources found in the specified area. The items in the collection are sorted by distance from the center of the specified area. Pagination is supported on this operation and the response contains <b>next</b> and/or <b>previous</b> pagination links.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The array of resources in the specified area.',
                required=False,
                items={'type': 'unknown', '$ref': 'resourcesInAreaResponseResourceSchema'},
            ),
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of items retrieved by the operation.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/resources/custom-actions/resourcesInArea'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/resources/custom-actions/resourcesInArea'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['resourcesInAreaResponseResourceSchema'],
        parent_models=[],
    ),
    "resourcesInAreaResponseResourceSchema": ModelInfo(
        name='resourcesInAreaResponseResourceSchema',
        description='The resource present within the specified radius and/or time duration.',
        properties=[
            ModelProperty(
                name='resourceId',
                type='string',
                description='The external identifier of the resource.',
                required=False,
            ),
            ModelProperty(
                name='time',
                type='string',
                description='The date in the internet Date-Time format. For example, 2016-09-20T11:37:29Z.',
                required=False,
            ),
            ModelProperty(
                name='lat',
                type='number',
                description='The latitude coordinate of the resource position. A maximum of five digits after the decimal point are returned.',
                required=False,
            ),
            ModelProperty(
                name='lng',
                type='number',
                description='The longitude coordinate of the resource position. A maximum of five digits after the decimal point are returned.',
                required=False,
            ),
            ModelProperty(
                name='dis',
                type='number',
                description='The distance (in meters) of the resource from the center point of the area.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['resourcesInAreaResponseSchema'],
    ),
    "inventoryPropertiesUpdateMode": ModelInfo(
        name='inventoryPropertiesUpdateMode',
        description="<p>The processing mode for updating the properties of each inventory item in the 'inventories' array. The possible values of this parameter are:</p><ul><li><b>keepProperties:</b> The specified inventory properties are updated and the properties that are not specified are retained.</li><li><b>eraseProperties:</b> The specified inventory properties are replaced and the properties that are not specified are erased. This is the default value of the parameter.</li></ul>",
        properties=[
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='string',
        examples=[],
        nested_models=[],
        parent_models=['customActionActivityBulkUpdateSchema', 'bulkUpdateResourceInventoriesRequestResourceSchema'],
    ),
    "fmrWorkScheduleItem": ModelInfo(
        name='fmrWorkScheduleItem',
        description='The array of work schedule item of the resource.',
        properties=[
            ModelProperty(
                name='workTimeStart',
                type='string',
                description="The start time of the working day when this schedule is in effect. The format is 'HH:MM'. This property is not available if the value of the isWorking parameter is false.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='scheduleLabel',
                type='string',
                description='The label of the work schedule in Oracle Field Service. This property is only available if the record type is schedule.',
                required=False,
            ),
            ModelProperty(
                name='scheduleShifts',
                type='array',
                description='The list of work shifts present in this work schedule. The properties of the work shifts are for information purpose only and cannot be modified using this operation.',
                required=False,
                items={'type': 'unknown', '$ref': 'shiftItem'},
            ),
            ModelProperty(
                name='comments',
                type='string',
                description='The description of the schedule in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='startDate',
                type='string',
                description="The date when this schedule takes effect. The format is 'YYYY-MM-DD'.",
                required=True,
                format='date',
            ),
            ModelProperty(
                name='shiftLabel',
                type='string',
                description='The label of the work shift in Oracle Field Service. This property is only available if the value of recordType is either shift or extra_shift.',
                required=False,
            ),
            ModelProperty(
                name='points',
                type='integer',
                description='The units of labor per day when this schedule is in effect. This property may be empty because all the customers may not use it.',
                required=False,
            ),
            ModelProperty(
                name='isWorking',
                type='string',
                description='Contains one of the following values: "1" or "0". The value "1" means it is a working day, the value "0" is retutned for a non-working day.',
                required=False,
            ),
            ModelProperty(
                name='endDate',
                type='string',
                description="The date when this schedule ends. The date is in 'YYYY-MM-DD' format.",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='nonWorkingReason',
                type='string',
                description='The reason for the non-working day (for example, holiday, vacation). These reasons are preconfigured in the Oracle Field Service UI.',
                required=False,
            ),
            ModelProperty(
                name='workTimeEnd',
                type='string',
                description="The end time of the working day when this schedule is in effect. The format is 'HH:MM'. This property is not available if the value of the isWorking parameter is false.",
                required=False,
                format='time',
            ),
            ModelProperty(
                name='recurrence',
                type='object',
                description='An array containing recurring work schedule items. This object is optional when the recordType is schedule. And it is mandatory when the recordType is shift, extra_shift, working, extra_working or non-working',
                required=False,
            ),
            ModelProperty(
                name='scheduleItemId',
                type='integer',
                description='The identifier of the work schedule item in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='recordType',
                type='string',
                description='The type of work schedule record.',
                required=True,
                enum=['schedule', 'shift', 'extra_shift', 'working', 'extra_working', 'non-working'],
            ),
            ModelProperty(
                name='shiftType',
                type='string',
                description='The type of the work shift.',
                required=False,
                enum=['regular', 'on-call'],
            ),
        ],
        required_properties=['recordType', 'startDate'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['shiftItem'],
        parent_models=['findMatchingResourcesResponseSchema'],
    ),
    "createServiceRequest": ModelInfo(
        name='createServiceRequest',
        description='The service request fields required to create a service request. In addition to the built-in service request fields, the custom properties of the service request may be present.',
        properties=[
            ModelProperty(
                name='activityId',
                type='integer',
                description="The ID of the activity for which the service request is created. This parameter is mandatory for customer service requests. If the activity ID of a non-scheduled activity is specified, then the following error is displayed: 404 The activity doesn't exist. Parameter 'activityId':'{activityId}'",
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description="The ID of the resource for which the service request is created. This parameter is mandatory for resource service requests. If the resource does not have a resource ID and if the activity ID of a non-scheduled activity is specified, then the following error is displayed: 404 The resource doesn't exist. Parameter 'resourceId':'{resourceId}'",
                required=False,
            ),
            ModelProperty(
                name='inventoryId',
                type='integer',
                description="The ID of the inventory for which the service request is created. This parameter is mandatory for inventory service requests. If the inventory does not have a provider ID and if the activity ID of a non-scheduled activity is specified, then the following error is displayed:404 The inventory doesn't exist. Parameter 'inventoryId':'{inventoryId}'",
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description="The date (in YYYY-MM-DD format) and time (in resource time zone) for creating the service request in Oracle Field Service. This is an optional parameter. If the date parameter is not specified, then it is defaulted to the following dates: <ul><li> Date of the activity for activity service requests.</li><li> Current date of the provider (in provider's time zone) for resource service requests.</li><li> Current date of the provider (in provider's time zone) if inventory provider is known, else the date of appointment is used for inventory service requests.</li></ul>",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='requestType',
                type='string',
                description="The request type assigned to a service request. Allowed values are the labels of Service Request types configured in the 'srtype' field.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/serviceRequests'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/serviceRequests'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "serviceRequestsItem": ModelInfo(
        name='serviceRequestsItem',
        description='The service request fields.',
        properties=[
            ModelProperty(
                name='requestId',
                type='integer',
                description='The specified identifier of the service request.',
                required=False,
            ),
            ModelProperty(
                name='resourceId',
                type='string',
                description='The resource ID in external system.',
                required=False,
            ),
            ModelProperty(
                name='resourceInternalId',
                type='integer',
                description='The resource ID in Oracle Field Service. This field is read-only.',
                required=False,
            ),
            ModelProperty(
                name='activityId',
                type='integer',
                description='The activity ID specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='inventoryId',
                type='integer',
                description='The inventory ID specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='date',
                type='string',
                description='The date when the service request is created.',
                required=False,
            ),
            ModelProperty(
                name='created',
                type='string',
                description='The date and time (in "YYYY-MM-DD HH:MM:SS" format) when the service request is created in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='requestType',
                type='string',
                description='The service request type specified in the request.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/serviceRequests/{requestId}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/serviceRequests/{requestId}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "collaborationGroup": ModelInfo(
        name='collaborationGroup',
        description='The array of collaboration group objects assigned to the user. Each collaboration group object contains data, such as name, type, and description specific to a collaboration group.',
        properties=[
            ModelProperty(
                name='name',
                type='string',
                description='The name of the collaboration group.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['collaborationGroups'],
    ),
    "collaborationGroups": ModelInfo(
        name='collaborationGroups',
        description='The collaboration groups assigned to the user.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The collection of collaboration groups assigned to the specified user.',
                required=False,
                items={'type': 'unknown', '$ref': 'collaborationGroup'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCore/v1/users/{login}/collaborationGroups', 'GET /rest/ofscCore/v1/users/{login}/collaborationGroups'],
        used_in_request_endpoints=['POST /rest/ofscCore/v1/users/{login}/collaborationGroups'],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/users/{login}/collaborationGroups'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['collaborationGroup'],
        parent_models=[],
    ),
    "userGet": ModelInfo(
        name='userGet',
        description='The details of the user account.',
        properties=[
            ModelProperty(
                name='blockedUntilTime',
                type='string',
                description='The time until the account is blocked.',
                required=False,
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the user's time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that IANA names are specified.For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=True,
            ),
            ModelProperty(
                name='timeZoneIANA',
                type='string',
                description="The IANA name of the user's time zone (for example, America/New_York). For the list of IANA time zone names, see <a href=https://www.iana.org/time-zones>IANA Time Zones</a>This is a read-only field and is only returned in responses.",
                required=False,
            ),
            ModelProperty(
                name='lastUpdatedTime',
                type='string',
                description='The date and time when the user account was updated. This field is not updated if a custom property or the profile picture of the user is changed. This field is only updated when one of the built-in properties is changed.',
                required=False,
            ),
            ModelProperty(
                name='weekStart',
                type='string',
                description='The day on which the week starts for the user account.',
                required=False,
                enum=['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'default'],
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The full name of the user.',
                required=True,
            ),
            ModelProperty(
                name='lastLoginTime',
                type='string',
                description='The date and time when the user logged in to the account.',
                required=False,
            ),
            ModelProperty(
                name='passwordTemporary',
                type='boolean',
                description='The temporary password of the user account. If the temporary password is set, then the user is prompted to change password on the next login.',
                required=False,
            ),
            ModelProperty(
                name='loginAttempts',
                type='integer',
                description='The number of unsuccessful login attempts.',
                required=False,
            ),
            ModelProperty(
                name='login',
                type='string',
                description='The unique identifier of the user account in Oracle Field Service.',
                required=False,
            ),
            ModelProperty(
                name='lastPasswordChangeTime',
                type='string',
                description='The date and time when the password was changed.',
                required=False,
            ),
            ModelProperty(
                name='longDateFormat',
                type='string',
                description='The long date format of the user account.',
                required=False,
            ),
            ModelProperty(
                name='selfAssignment',
                type='boolean',
                description='Indicates whether the users can assign activities to themselves.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format of the user account. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='createdTime',
                type='string',
                description='The date and time when the user account is created.',
                required=False,
            ),
            ModelProperty(
                name='mainResourceId',
                type='string',
                description='The unique identifier of the main resource of the user account. This field is only set for resources that represent field service personnel. It is not set for groups and routing buckets.This field is not returned in the response if empty strings are passed in the request.',
                required=False,
            ),
            ModelProperty(
                name='organizationalUnit',
                type='string',
                description="The identifier of the organization unit where the user works. The value of this field can be the ID of a resource with the role as 'bucket' or 'organization unit'.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the user account.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the user. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=True,
            ),
            ModelProperty(
                name='avatar',
                type='object',
                description='The profile picture of the user.',
                required=False,
            ),
            ModelProperty(
                name='resources',
                type='array',
                description='The list of resources assigned to the user account. These resources along with their children are visible to the user. This list does not incIude the resources whose resource ID values are empty.',
                required=True,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the user account. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='userType',
                type='string',
                description='The type of the user account. The access controls of the user account are defined based on the user type.',
                required=True,
            ),
            ModelProperty(
                name='timeZoneDiff',
                type='integer',
                description="The difference between UTC and the user's local time, displayed in minutes. For example, -180 means that the user's time is 3 hours behind UTC.This is a read-only field.",
                required=False,
            ),
        ],
        required_properties=['resources', 'name', 'language', 'timeZone', 'userType'],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/users/{login}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/users/{login}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['users'],
    ),
    "userGenericFields": ModelInfo(
        name='userGenericFields',
        description='The details of the user account.',
        properties=[
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the user's time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that IANA names are specified.For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=True,
            ),
            ModelProperty(
                name='weekStart',
                type='string',
                description='The day on which the week starts for the user account.',
                required=False,
                enum=['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'default'],
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The full name of the user.',
                required=True,
                min_length=1,
            ),
            ModelProperty(
                name='passwordTemporary',
                type='boolean',
                description='The temporary password of the user account. If the temporary password is set, then the user is prompted to change password on the next login.',
                required=False,
            ),
            ModelProperty(
                name='longDateFormat',
                type='string',
                description='The long date format of the user account.',
                required=False,
            ),
            ModelProperty(
                name='selfAssignment',
                type='boolean',
                description='Indicates whether the users can assign activities to themselves.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format of the user account. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='mainResourceId',
                type='string',
                description='The unique identifier of the main resource of the user account. This field is only set for resources that represent field service personnel. It is not set for groups and routing buckets.Note that if the specified resource was already assigned as main resource for some other user, that association will be removed, so that the other user will lose the main resource association.This field is not returned in the response if it is empty.',
                required=False,
            ),
            ModelProperty(
                name='organizationalUnit',
                type='string',
                description="The identifier of the organization unit where the user works. The value of this field can be the ID of a resource with the role as 'bucket' or 'organization unit'.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the user account.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the user. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=True,
            ),
            ModelProperty(
                name='resources',
                type='array',
                description='The list of resources assigned to the user account. These resources along with their children are visible to the user. This list does not incIude the resources whose resourceId values are empty.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the user account. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='userType',
                type='string',
                description='The type of the user account. The access controls of the user account are defined based on the user type.',
                required=True,
                min_length=1,
            ),
        ],
        required_properties=['name', 'language', 'timeZone', 'userType'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['userRequest', 'userResponse'],
    ),
    "updateUser": ModelInfo(
        name='updateUser',
        description='The details of the user account.',
        properties=[
            ModelProperty(
                name='timeZone',
                type='string',
                description="The name of the user's time zone. This field accepts both Oracle Field Service time zone names (for example, Eastern) and IANA standard time zone names (for example, America/New_York). It is recommended that IANA names are specified.For a list of supported time zones, see <a href=http://docs.oracle.com/cloud/latest/fieldservicecs_gs/CXFSC/OFSC_Supported_Time_Zones.html>Supported Time Zones</a>.",
                required=False,
            ),
            ModelProperty(
                name='password',
                type='string',
                description="The password of the user account. It is only used when the login policy is set to 'local password storage'. For SAML, the password is ignored.",
                required=False,
            ),
            ModelProperty(
                name='weekStart',
                type='string',
                description='The day on which the week starts for the user account.',
                required=False,
                enum=['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'default'],
            ),
            ModelProperty(
                name='name',
                type='string',
                description='The full name of the user.',
                required=False,
                min_length=1,
            ),
            ModelProperty(
                name='passwordTemporary',
                type='boolean',
                description='The temporary password of the user account. If the temporary password is set, then the user is prompted to change password on the next login.',
                required=False,
            ),
            ModelProperty(
                name='longDateFormat',
                type='string',
                description='The long date format of the user account.',
                required=False,
            ),
            ModelProperty(
                name='selfAssignment',
                type='boolean',
                description='Indicates whether the users can assign activities to themselves.',
                required=False,
            ),
            ModelProperty(
                name='dateFormat',
                type='string',
                description='The date format of the user account. Allowed Values: ["dd/mm/yy", "mm/dd/yy","dd.mm.yy","yyyy/mm/dd"].',
                required=False,
            ),
            ModelProperty(
                name='mainResourceId',
                type='string',
                description='The unique identifier of the main resource of the user account. This field is only set for resources that represent field service personnel. It is not set for groups and routing buckets.Note that if the specified resource was already assigned as main resource for some other user, that association will be removed, so that the other user will lose the main resource association.This field is not returned in the response if it is empty.',
                required=False,
            ),
            ModelProperty(
                name='organizationalUnit',
                type='string',
                description="The identifier of the organization unit where the user works. The value of this field can be the ID of a resource with the role as 'bucket' or 'organization unit'.",
                required=False,
            ),
            ModelProperty(
                name='status',
                type='string',
                description='The status of the user account.',
                required=False,
                enum=['active', 'inactive'],
            ),
            ModelProperty(
                name='language',
                type='string',
                description='The preferred language of the user. This field accepts the language codes listed on: <a href="OFSC_Supported_Language_Codes.html">Supported Language Codes</a>.',
                required=False,
            ),
            ModelProperty(
                name='resources',
                type='array',
                description="The list of resources assigned to the user account. These resources along with their children are visible to the user. If you don't specify the value for this parameter, then the resources are not returned in the response.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='timeFormat',
                type='string',
                description='The time format of the user account. Allowed Values: [ "12-hour", "24-hour" ].',
                required=False,
            ),
            ModelProperty(
                name='userType',
                type='string',
                description='The type of the user account. The access controls of the user account are defined based on the user type.',
                required=False,
                min_length=1,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCore/v1/users/{login}'],
        used_in_request_endpoints=['PATCH /rest/ofscCore/v1/users/{login}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "userRequest": ModelInfo(
        name='userRequest',
        description='',
        properties=[
            ModelProperty(
                name='password',
                type='string',
                description="The password of the user account. It is only used when the login policy is set to 'local password storage'. For SAML, the password is ignored.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['userGenericFields'],
        used_in_endpoints=['PUT /rest/ofscCore/v1/users/{login}'],
        used_in_request_endpoints=['PUT /rest/ofscCore/v1/users/{login}'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['userGenericFields'],
        parent_models=[],
    ),
    "userResponse": ModelInfo(
        name='userResponse',
        description='',
        properties=[
            ModelProperty(
                name='createdTime',
                type='string',
                description='The date and time when the user account is created.',
                required=False,
            ),
            ModelProperty(
                name='blockedUntilTime',
                type='string',
                description='If set, then this account is blocked temporarily (e.g. too many failed login attempts). The value is the time when account becomes unblocked',
                required=False,
            ),
            ModelProperty(
                name='lastLoginTime',
                type='string',
                description='The date and time when the user logged in to the account.',
                required=False,
            ),
            ModelProperty(
                name='lastUpdatedTime',
                type='string',
                description='The date and time when the user account was updated. This field is not updated if a custom property or the profile picture of the user is changed. This field is only updated when one of the built-in properties is changed.',
                required=False,
            ),
            ModelProperty(
                name='lastPasswordChangeTime',
                type='string',
                description='The date and time when the password was changed.',
                required=False,
            ),
            ModelProperty(
                name='timeZoneDiff',
                type='integer',
                description="The difference between UTC and the user's local time, displayed in minutes. For example, -180 means that the resource time is 3 hours behind UTC.This is a read-only field.",
                required=False,
            ),
            ModelProperty(
                name='timeZoneIANA',
                type='string',
                description="The IANA name of the user's time zone (for example, America/New_York). For the list of IANA time zone names, see <a href=https://www.iana.org/time-zones>IANA Time Zones</a>This is a read-only field and is only returned in responses.",
                required=False,
            ),
            ModelProperty(
                name='loginAttempts',
                type='integer',
                description='The number of unsuccessful login attempts.',
                required=False,
            ),
            ModelProperty(
                name='avatar',
                type='object',
                description='The profile picture of the user.',
                required=False,
            ),
            ModelProperty(
                name='login',
                type='string',
                description='The unique identifier of the user account in Oracle Field Service.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=['userGenericFields'],
        used_in_endpoints=['PUT /rest/ofscCore/v1/users/{login}', 'PATCH /rest/ofscCore/v1/users/{login}'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PUT /rest/ofscCore/v1/users/{login}', 'PATCH /rest/ofscCore/v1/users/{login}'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['userGenericFields'],
        parent_models=['userEvent'],
    ),
    "users": ModelInfo(
        name='users',
        description='The collection of users.',
        properties=[
            ModelProperty(
                name='totalResults',
                type='integer',
                description='The total number of users.',
                required=False,
            ),
            ModelProperty(
                name='limit',
                type='integer',
                description='The limit value specified in the request. If the value is not specified in the request or if the specified value is not accepted, then it defaults to 100.',
                required=False,
            ),
            ModelProperty(
                name='offset',
                type='integer',
                description='The offset value specified in the request.',
                required=False,
            ),
            ModelProperty(
                name='items',
                type='array',
                description='An array of objects containing the user account details.',
                required=False,
                items={'type': 'unknown', '$ref': 'userGet'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCore/v1/users'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCore/v1/users'],
        mapped_pydantic_class=None,
        module='core',
        schema_type='object',
        examples=[],
        nested_models=['userGet'],
        parent_models=[],
    ),
    "activityBookingOptions": ModelInfo(
        name='activityBookingOptions',
        description='',
        properties=[
            ModelProperty(
                name='duration',
                type='integer',
                description='The estimated duration of the activity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The average travel time (in minutes) to the activity.',
                required=False,
            ),
            ModelProperty(
                name='categories',
                type='array',
                description='The array of capacity categories returned for the activity. Each item in the array indicates the label of the capacity category.',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='timeSlotsDictionary',
                type='array',
                description='The dictionary of time slots on the top level, which includes all time slots defined for the capacity areas and filtered by defined capacity categories.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description='The label of the work zone determined for the activity.',
                required=False,
            ),
            ModelProperty(
                name='dates',
                type='array',
                description='The array of available booking options. Each item in the array contains the available booking options for a particular day.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCapacity/v1/activityBookingOptions'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v1/activityBookingOptions'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "bookingClosingScheduleList": ModelInfo(
        name='bookingClosingScheduleList',
        description='The collection of closing schedules for bookings.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'bookingClosingSchedule'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/bookingClosingSchedule', 'GET /rest/ofscCapacity/v1/bookingClosingSchedule'],
        used_in_request_endpoints=['PATCH /rest/ofscCapacity/v1/bookingClosingSchedule'],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v1/bookingClosingSchedule'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['bookingClosingSchedule'],
        parent_models=[],
    ),
    "bookingClosingSchedule": ModelInfo(
        name='bookingClosingSchedule',
        description='',
        properties=[
            ModelProperty(
                name='area',
                type='string',
                description='The label of the area from which the booking is closed.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='dayOffset',
                type='integer',
                description='The offset determines the day on which the booking is closed. For example, if "1" is returned, then the booking for tomorrow is closed today.',
                required=False,
                minimum=1,
                maximum=255,
            ),
            ModelProperty(
                name='category',
                type='string',
                description='The label of the capacity category for which the booking is closed. If this field is not returned, then the bookings for all categories are closed.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description='The label of the work zone from which the booking is closed. If this field is not returned, then the bookings are closed for all work zones (even if a particular work zone does not have its own close time).',
                required=False,
            ),
            ModelProperty(
                name='startTime',
                type='string',
                description='The start time of the booking closing schedule. If Start Time and End Time values are not returned, then it means that the bookings are closed for the entire day. This operation checks if a specified time interval is supported or configured for the area. The intervals that are not currently configured are not returned, even if the database contains such records.',
                required=False,
            ),
            ModelProperty(
                name='endTime',
                type='string',
                description='The end time of the booking closing schedule.\n<hours>[:<minutes>]\n Valid values for hours: [0 to 48]. The dash sign after 24, for example, 24 - represents overnight work. Minutes are optional. Valid values for minutes: [0 to 59].',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description='The time at which the booking is closed. This time corresponds to the timezone of the capacity area.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bookingClosingScheduleList'],
    ),
    "ResultObject": ModelInfo(
        name='ResultObject',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/bookingClosingSchedule'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscCapacity/v1/bookingClosingSchedule'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "bookingStatusList": ModelInfo(
        name='bookingStatusList',
        description='The collection of booking statuses.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='The list of booking statuses.',
                required=False,
                items={'type': 'unknown', '$ref': 'bookingStatus'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCapacity/v1/bookingStatuses'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v1/bookingStatuses'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['bookingStatus'],
        parent_models=[],
    ),
    "bookingStatus": ModelInfo(
        name='bookingStatus',
        description='An array of booking statuses.',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='The date specified in the request.',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='area',
                type='string',
                description='The label of the capacity area specified in the request.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='statuses',
                type='array',
                description='The list of statuses.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bookingStatusList'],
    ),
    "bookingStatusRequestList": ModelInfo(
        name='bookingStatusRequestList',
        description='The array of booking statuses.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'bookingStatusCollection'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/bookingStatuses'],
        used_in_request_endpoints=['PATCH /rest/ofscCapacity/v1/bookingStatuses'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['bookingStatusCollection'],
        parent_models=[],
    ),
    "bookingStatusCollection": ModelInfo(
        name='bookingStatusCollection',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='The date on which the booking status is updated.',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='area',
                type='string',
                description='The label of the capacity area.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='statuses',
                type='array',
                description='The array of booking statuses.',
                required=False,
                items={'type': 'unknown', '$ref': 'bookingStatusNode'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['bookingStatusNode'],
        parent_models=['bookingStatusRequestList'],
    ),
    "bookingStatusNode": ModelInfo(
        name='bookingStatusNode',
        description='',
        properties=[
            ModelProperty(
                name='category',
                type='string',
                description='The label of the capacity category for which the booking status must be closed.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description='The label of the work zone for which the booking status must be closed.',
                required=False,
            ),
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start of the time interval (in HH:MM format) from where the booking statuses must be closed.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end of the time interval (in HH:MM format) at which the booking statuses must be closed.',
                required=False,
            ),
            ModelProperty(
                name='state',
                type='string',
                description='The state of the booking status, that is, open or closed.',
                required=False,
                enum=['open', 'closed'],
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['bookingStatusCollection'],
    ),
    "ResultBookingStatusObject": ModelInfo(
        name='ResultBookingStatusObject',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='An array containing the results of the operation.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/bookingStatuses'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscCapacity/v1/bookingStatuses'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "capacityList": ModelInfo(
        name='capacityList',
        description='The collection of available capacity returned from the capacity areas and the working calendars.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'capacity'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCapacity/v1/capacity'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v1/capacity'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['capacity'],
        parent_models=[],
    ),
    "capacity": ModelInfo(
        name='capacity',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='The date for which the data (that is, the maximum available capacity and the estimated availability) is returned.',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='The array of objects containing data (that is, the maximum available capacity and the estimated availability) of a single capacity area or the aggregated result from multiple capacity areas.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['capacityList'],
    ),
    "v2-patch-quota": ModelInfo(
        name='v2-patch-quota',
        description='Array of objects with quota information for each date that should be updated',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-request'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v2/quota'],
        used_in_request_endpoints=['PATCH /rest/ofscCapacity/v2/quota'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-request'],
        parent_models=[],
    ),
    "v2-patch-quota-request": ModelInfo(
        name='v2-patch-quota-request',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description="The date in 'YYYY-MM-DD' format.",
                required=False,
                format='date',
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='Array of objects with quota information for each capacity area that should be updated',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-area'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-area'],
        parent_models=['v2-patch-quota'],
    ),
    "v2-patch-quota-area": ModelInfo(
        name='v2-patch-quota-area',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Area that should be updated.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='Quota value in minutes. This parameter is ignored if the area is not configured to enter quota in minutes. For the quota based on booking intervals <b>null</b> can be used to unset the value.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value in percent. This parameter is ignored If the area is not configured to enter quota in percent. For the quota based on intervals <b>null</b> can be used to unset the value.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
            ModelProperty(
                name='intervals',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-intervals'},
            ),
            ModelProperty(
                name='categories',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-categories'},
            ),
            ModelProperty(
                name='timeSlots',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-time-slots'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-categories', 'v2-patch-quota-intervals', 'v2-patch-quota-time-slots'],
        parent_models=['v2-patch-quota-request'],
    ),
    "v2-patch-quota-time-slots": ModelInfo(
        name='v2-patch-quota-time-slots',
        description='Array of objects containing the quota information for each time slot.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Label of the time slot',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. This parameter is ignored if the area is not configured to enter quota in minutes at this level.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value as a percent of the day level or as a percent of max available for time slot depending on the configuration. This parameter is ignored if the area is not configured to enter quota as percent.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at which the booking of activities stops.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
            ModelProperty(
                name='categories',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-time-slot-categories'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-time-slot-categories'],
        parent_models=['v2-patch-quota-area'],
    ),
    "v2-patch-quota-time-slot-categories": ModelInfo(
        name='v2-patch-quota-time-slot-categories',
        description='Array of objects containing the quota information for each Capacity Category.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Category.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. This parameter is ignored If the area is not configured to enter quota in minutes at this level.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='integer',
                description='The quota value as a percent of the day level or as a percent of max available for time slot depending on the configuration . This parameter is ignored If the area is not configured to enter quota as percent .',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at whitch the booking of activities stops.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-work-zones'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-work-zones'],
        parent_models=['v2-patch-quota-time-slots'],
    ),
    "v2-patch-quota-category-intervals": ModelInfo(
        name='v2-patch-quota-category-intervals',
        description='Array of objects containing the quota information for intervals within the Capacity Category',
        properties=[
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. This parameter is ignored if the area is not configured to enter quota in minutes at this level. <b>null</b> can be used to unset the value.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-work-zones'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-work-zones'],
        parent_models=['v2-patch-quota-categories'],
    ),
    "v2-patch-quota-intervals": ModelInfo(
        name='v2-patch-quota-intervals',
        description='Array of objects containing the daily statuses of intervals. At this level an interval may be closed for all Capacity Categories of the area. Quota cannot be specified at this level.',
        properties=[
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['v2-patch-quota-area'],
    ),
    "v2-patch-quota-categories": ModelInfo(
        name='v2-patch-quota-categories',
        description='Array of objects with quota information for each capacity category that should be updated. This list only accepted for Capacity Areas with quota by intervals configuration.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Category.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. This parameter is ignored if the area is not configured to enter quota in minutes at this level. <b>null</b> can be used to unset the value.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value as a percent of the daily quota value of the capacity category. This parameter is ignored if the area is not configured to enter quota as percent of quota defined on parent level.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercentDay',
                type='number',
                description='The quota value as a percent of the daily quota value of the capacity category. This parameter is ignored if the area is not configured to enter quota as percent of quota defined on parent level.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercentCategory',
                type='number',
                description='The quota value defined as a percent of the Max Available value of the Capacity Category. This parameter is ignored if the area is not configured to enter quota as percent of maximum capacity available in the category.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at which the booking of activities stops.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Allows to open or close booking status at this level.',
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-work-zones'},
            ),
            ModelProperty(
                name='intervals',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-patch-quota-category-intervals'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-patch-quota-category-intervals', 'v2-patch-quota-work-zones'],
        parent_models=['v2-patch-quota-area'],
    ),
    "v2-patch-quota-work-zones": ModelInfo(
        name='v2-patch-quota-work-zones',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['v2-patch-quota-time-slot-categories', 'v2-patch-quota-category-intervals', 'v2-patch-quota-categories'],
    ),
    "v2-patch-quota-result": ModelInfo(
        name='v2-patch-quota-result',
        description='',
        properties=[
            ModelProperty(
                name='errorsCount',
                type='integer',
                description='',
                required=False,
            ),
            ModelProperty(
                name='errors',
                type='array',
                description='List of error messages related to current request',
                required=False,
                items={'type': 'string', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v2/quota'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscCapacity/v2/quota'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "v2-quota-result": ModelInfo(
        name='v2-quota-result',
        description='',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='Array of objects with quota information for each requested date.',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCapacity/v2/quota'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v2/quota'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota'],
        parent_models=[],
    ),
    "v2-quota": ModelInfo(
        name='v2-quota',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='Date in the YYYY-MM-DD format',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='Array of objects containing the quota information for each requested capacity area or the aggregated result.',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-area'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-area'],
        parent_models=['v2-quota-result'],
    ),
    "v2-quota-area": ModelInfo(
        name='v2-quota-area',
        description='',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Area. This field is not returned for the aggregated result.',
                required=False,
                min_length=1,
                max_length=40,
            ),
            ModelProperty(
                name='maxAvailable',
                type='integer',
                description='The total working time of the resources.',
                required=False,
            ),
            ModelProperty(
                name='maxAvailableByPlans',
                type='integer',
                description='The total working time of based on plans.',
                required=False,
            ),
            ModelProperty(
                name='otherActivities',
                type='integer',
                description='The total travel time and duration of activities that are not part of capacity management.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. For the quota based on intervals it contains <b>null</b> if the value is not defined.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value in percent. For the quota based on intervals it contains <b>null</b> if the value is not defined. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='used',
                type='integer',
                description='The amount of consumed capacity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='usedQuotaPercent',
                type='number',
                description='The percent of the daily quota that is used by booked activities. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='bookedActivities',
                type='integer',
                description='The number of booked activities.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level. This parameter is returned if the request parameter returnStatuses is <b>true</b>',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule. This parameter is returned if the request parameter <b>returnStatuses</b> is <b>true</b>',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure. This parameter is returned if the request parameter <b>returnStatuses</b> is <b>true</b>',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format. This parameter is returned if the request parameter <b>returnStatuses</b> is <b>true</b>",
                required=False,
            ),
            ModelProperty(
                name='intervals',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-area-intervals'},
            ),
            ModelProperty(
                name='categories',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-area-categories'},
            ),
            ModelProperty(
                name='timeSlots',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-area-time-slots'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-area-categories', 'v2-quota-area-intervals', 'v2-quota-area-time-slots'],
        parent_models=['v2-quota'],
    ),
    "v2-quota-area-intervals": ModelInfo(
        name='v2-quota-area-intervals',
        description='Array of objects containing the daily statuses of intervals. At this level an interval may be closed for all Capacity Categories of the area. Quota cannot be specified at this level. This array is returned if the request parameters <b>returnStatuses</b> and <b>intervalLevel</b> are true and cannot be returned in aggregated mode.',
        properties=[
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure.',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['v2-quota-area'],
    ),
    "v2-quota-area-time-slots": ModelInfo(
        name='v2-quota-area-time-slots',
        description='Array of objects containing the quota information for each time slot. This list is returned for Capacity Areas with time slot based configuration if the request parameter <b>timeSlotLevel</b> is true.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='Label of the time slot',
                required=False,
            ),
            ModelProperty(
                name='maxAvailable',
                type='integer',
                description='The total working time of the resources.',
                required=False,
            ),
            ModelProperty(
                name='otherActivities',
                type='integer',
                description='The total travel time and duration of activities that are not part of capacity management.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. It is returned as zero if it has zero value; if the value is not defined then this field is not returned.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value in percent. It is returned as zero if it has zero value; if the value is not defined then this field is not returned. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes. It is returned as zero If it has zero value; if the value is not defined then this field is not returned. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='used',
                type='integer',
                description='The amount of consumed capacity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='usedQuotaPercent',
                type='number',
                description='The percent of the time slot quota that is used by booked activities. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at which the booking of activities stops. It is returned as zero if it has zero value; if the value is not defined then this field is not returned.',
                required=False,
            ),
            ModelProperty(
                name='bookedActivities',
                type='integer',
                description='The number of booked activities.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format. This parameter is returned if the request parameter <b>returnStatuses</b> is true",
                required=False,
            ),
            ModelProperty(
                name='categories',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-time-slot-categories'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-time-slot-categories'],
        parent_models=['v2-quota-area'],
    ),
    "v2-quota-time-slot-categories": ModelInfo(
        name='v2-quota-time-slot-categories',
        description='Array of objects containing the quota information for each Capacity Category. This list is returned if the request parameter <b>categoryLevel</b> is true.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Category.',
                required=False,
            ),
            ModelProperty(
                name='maxAvailable',
                type='integer',
                description='The total working time of the resources for the category.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. It is returned as zero if it has zero value; if the value is not defined then this field is not returned.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercent',
                type='number',
                description='The quota value in percent. It is returned as zero if it has zero value; if the value is not defined then this field is not returned. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='used',
                type='integer',
                description='The amount of consumed capacity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='usedQuotaPercent',
                type='number',
                description='The quota percentage of the capacity category currently used for booked activities.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at which the booking of activities stops. It is returned as zero if it has zero value; if the value is not defined then this field is not returned.',
                required=False,
            ),
            ModelProperty(
                name='bookedActivities',
                type='integer',
                description='The number of booked activities.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format. This parameter is returned if the request parameter <b>returnStatuses</b> is true",
                required=False,
            ),
            ModelProperty(
                name='weight',
                type='number',
                description='Weight of the Capacity Category calculated based on historical data',
                required=False,
            ),
            ModelProperty(
                name='estimatedQuotaPercent',
                type='number',
                description="Estimated quota value (as percent) calculated on the basis of the 'weight' coefficient and the configuration of available resources for the day.",
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-work-zones'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-work-zones'],
        parent_models=['v2-quota-area-time-slots'],
    ),
    "v2-quota-area-categories": ModelInfo(
        name='v2-quota-area-categories',
        description='Array of objects containing the quota information for each Capacity Category. This list is returned for Capacity Areas with quota by intervals configuration if the request parameter <b>categoryLevel</b> is true.',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of the Capacity Category.',
                required=False,
            ),
            ModelProperty(
                name='maxAvailable',
                type='integer',
                description='The total working time of the resources for the category.',
                required=False,
            ),
            ModelProperty(
                name='maxAvailableByPlans',
                type='integer',
                description='The total working time for the category based on plans.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. It contains <b>null</b> if the value is not defined.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercentDay',
                type='number',
                description='The quota value defined as a percent of the daily quota value of the capacity category. It contains <b>null</b> if the value is not defined.',
                required=False,
            ),
            ModelProperty(
                name='quotaPercentCategory',
                type='number',
                description='The quota value defined as a percent of the Max Available value of the Capacity Category. It contains <b>null</b> if the value is not defined.',
                required=False,
            ),
            ModelProperty(
                name='minQuota',
                type='integer',
                description='The minimal quota value in minutes. This field is not returned for the aggregated result.',
                required=False,
            ),
            ModelProperty(
                name='used',
                type='integer',
                description='The amount of consumed capacity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='usedQuotaPercent',
                type='number',
                description='The quota percentage of the capacity category currently used for booked activities.',
                required=False,
            ),
            ModelProperty(
                name='stopBookingAt',
                type='integer',
                description='The percent of the used quota at which the booking of activities stops. It is returned as zero if it has zero value; if the value is not defined then this field is not returned.',
                required=False,
            ),
            ModelProperty(
                name='bookedActivities',
                type='integer',
                description='The number of booked activities.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format. This parameter is returned if the request parameter <b>returnStatuses</b> is true",
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-work-zones'},
            ),
            ModelProperty(
                name='intervals',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-category-intervals'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-category-intervals', 'v2-quota-work-zones'],
        parent_models=['v2-quota-area'],
    ),
    "v2-quota-category-intervals": ModelInfo(
        name='v2-quota-category-intervals',
        description='Array of objects containing the quota information for intervals within the Capacity Category. This list is returned if the request parameter <b>intervalLevel</b> is true.',
        properties=[
            ModelProperty(
                name='timeFrom',
                type='string',
                description='The start time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='timeTo',
                type='string',
                description='The end time of the time interval in HH:MM format.',
                required=False,
            ),
            ModelProperty(
                name='quota',
                type='integer',
                description='The quota value in minutes. It contains <b>null</b> if the value is not defined.',
                required=False,
            ),
            ModelProperty(
                name='used',
                type='integer',
                description='The amount of consumed capacity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure. This parameter is returned if the request parameter <b>returnStatuses</b> is true',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='string',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format. This parameter is returned if the request parameter <b>returnStatuses</b> is true",
                required=False,
            ),
            ModelProperty(
                name='workZones',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v2-quota-work-zones'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=['v2-quota-work-zones'],
        parent_models=['v2-quota-area-categories'],
    ),
    "v2-quota-work-zones": ModelInfo(
        name='v2-quota-work-zones',
        description='Quota status defined for workzones. Only workzones with closed statuses are returned in this list. This list is returned if the request parameter <b>returnStatuses</b> is true',
        properties=[
            ModelProperty(
                name='label',
                type='string',
                description='The label of a work zone',
                required=False,
            ),
            ModelProperty(
                name='quotaIsClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level',
                required=False,
            ),
            ModelProperty(
                name='quotaIsAutoClosed',
                type='boolean',
                description='Indicates if the booking has been closed at this level automatically by schedule',
                required=False,
            ),
            ModelProperty(
                name='quotaIsReopened',
                type='boolean',
                description='Indicates if the booking has been manually reopened after closure.',
                required=False,
            ),
            ModelProperty(
                name='closeTime',
                type='boolean',
                description="Time when quota is to be closed automatically in the time zone of the selected capacity bucket in the 'YYYY-MM-DD HH:MM:SS' format.",
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['v2-quota-time-slot-categories', 'v2-quota-area-categories', 'v2-quota-category-intervals'],
    ),
    "v1-quota-result": ModelInfo(
        name='v1-quota-result',
        description='The collection of quota groups.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'v1-quota'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['GET /rest/ofscCapacity/v1/quota'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['GET /rest/ofscCapacity/v1/quota'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['v1-quota'],
        parent_models=[],
    ),
    "v1-quota": ModelInfo(
        name='v1-quota',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='The date specified in the request.',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='The array of objects containing the data (that is, quota groups) of a single capacity area or the aggregated result from multiple capacity areas.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['v1-quota-result'],
    ),
    "quotaPatchList": ModelInfo(
        name='quotaPatchList',
        description='The collection of quota values.',
        properties=[
            ModelProperty(
                name='items',
                type='array',
                description='',
                required=False,
                items={'type': 'unknown', '$ref': 'quotaPatchRequest'},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/quota'],
        used_in_request_endpoints=['PATCH /rest/ofscCapacity/v1/quota'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['quotaPatchRequest'],
        parent_models=[],
    ),
    "quotaPatchRequest": ModelInfo(
        name='quotaPatchRequest',
        description='',
        properties=[
            ModelProperty(
                name='date',
                type='string',
                description='The date the quota is created or updated.  Specify the date in YYYY-MM-DD format.',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['quotaPatchList'],
    ),
    "ResultQuotaObject": ModelInfo(
        name='ResultQuotaObject',
        description='',
        properties=[
            ModelProperty(
                name='results',
                type='object',
                description='',
                required=False,
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['PATCH /rest/ofscCapacity/v1/quota'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['PATCH /rest/ofscCapacity/v1/quota'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "showBookingGridSchema": ModelInfo(
        name='showBookingGridSchema',
        description='',
        properties=[
            ModelProperty(
                name='activity',
                type='ref:showBookingGridActivityProperty',
                description='',
                required=True,
                ref='showBookingGridActivityProperty',
            ),
            ModelProperty(
                name='identifyActivityBy',
                type='string',
                description="If this parameter is absent, then the 'activity' parameter should contain all activity fields necessary for booking.If this parameter is present then the 'activity' parameter should contain the activity key fields, that identify an already existing activity.",
                required=False,
                enum=['activityId', 'apptNumber', 'apptNumberPlusCustomerNumber'],
            ),
            ModelProperty(
                name='dateFrom',
                type='string',
                description='The date from which the booking options will be searched.',
                required=True,
                format='date',
            ),
            ModelProperty(
                name='dateTo',
                type='string',
                description='The date to which the booking options will be searched. <ul><li>Minimum value: (dateFrom).</li><li>Maximum: (dateFrom + 14 days).</li><li>Default value: (dateFrom + 7 days).</li></ul>',
                required=False,
                format='date',
            ),
            ModelProperty(
                name='includeResourcesDictionary',
                type='boolean',
                description='The parameter which indicates whether to return the dictionary of all resources in the response.',
                required=False,
                default=False,
            ),
            ModelProperty(
                name='returnReasons',
                type='boolean',
                description="If this parameter is 'true' then the function returns all options including unavailable for booking and provide the reason message indicating why an option is not available.</br>If this parameter is 'false' or absent, only options that allow booking will be returned.",
                required=False,
                default=False,
            ),
            ModelProperty(
                name='includeTimeSlotsDictionary',
                type='boolean',
                description='The parameter which indicates whether to return the dictionary of time slots in the response.',
                required=False,
                default=False,
            ),
            ModelProperty(
                name='resourceFields',
                type='array',
                description="The list of names of the resource fields and properties to be added to the each resource in the dictionary. Available fields are 'resourceId', 'parentResourceId', 'resourceType', 'name', 'email', 'phone', 'timeZone', 'status'. Custom properties are allowed.",
                required=False,
                items={'type': 'string', '$ref': None},
            ),
            ModelProperty(
                name='lateStartMitigation',
                type='integer',
                description='Do not suggest booking options if the activity is likely to begin close to the end of the time slot within last [ NN ] percent. This functionality is only applicable for quota by intervals. Default: 20',
                required=False,
                default=20,
            ),
        ],
        required_properties=['activity', 'dateFrom'],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCapacity/v1/showBookingGrid'],
        used_in_request_endpoints=['POST /rest/ofscCapacity/v1/showBookingGrid'],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=['showBookingGridActivityProperty'],
        parent_models=[],
    ),
    "showBookingGrid": ModelInfo(
        name='showBookingGrid',
        description='',
        properties=[
            ModelProperty(
                name='duration',
                type='integer',
                description='The estimated duration of the activity in minutes.',
                required=False,
            ),
            ModelProperty(
                name='travelTime',
                type='integer',
                description='The average travel time (in minutes) to the activity.',
                required=False,
            ),
            ModelProperty(
                name='workZone',
                type='string',
                description='The label of the work zone determined for the activity.',
                required=False,
            ),
            ModelProperty(
                name='timeSlotsDictionary',
                type='array',
                description='The dictionary of time slots on the top level, which includes all time slots defined for the capacity areas and filtered by defined capacity categories.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='resourcesDictionary',
                type='array',
                description="An array of resource items. Depend on 'resourceFields' parameter the field set of resource object may vary.",
                required=False,
                items={'type': 'object', '$ref': None},
            ),
            ModelProperty(
                name='areas',
                type='array',
                description='The array of available booking options. Each item in the array contains the available booking options for a capacity area.',
                required=False,
                items={'type': 'object', '$ref': None},
            ),
        ],
        required_properties=[],
        inheritance=[],
        used_in_endpoints=['POST /rest/ofscCapacity/v1/showBookingGrid'],
        used_in_request_endpoints=[],
        used_in_response_endpoints=['POST /rest/ofscCapacity/v1/showBookingGrid'],
        mapped_pydantic_class=None,
        module='capacity',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=[],
    ),
    "showBookingGridActivityProperty": ModelInfo(
        name='showBookingGridActivityProperty',
        description="<p>The activity object for which booking grid should be shown.</br>It should contain either:</p><ul><li>Keys of an already existing activity in the system</li><li>Activity fields values</li></ul><p>To specify an already existing activity key values should be provided depending on 'identifyActivityBy' parameter. The following fields in activity object are mandatory:</p><ul><li>when identifyActivityBy is 'activityId' - activityId</li><li>when identifyActivityBy is 'apptNumber' - apptNumber</li><li>when identifyActivityBy is 'apptNumberPlusCustomerNumber' - apptNumber and customerNumber</li></ul><p>To specify a not yet created activity all fields necessary for booking must be provided. Mandatory elements are:</p><ul><li>All fields that are needed to identify activity work skills and work zones (if used)</li><li>activityType - Type of the activity</li><li>timeZone - Customer time zone</li></ul><p>Optionally, in order to obtain the booking recommendations, you will need to include enough information that the application uses to calculate the distances / travel to other activities. This is the latitude and longitude fields for booking by Capacity / Quota, or the fields configured as the activity travel key in case of direct assignment booking.</p>",
        properties=[
            ModelProperty(
                name='activityId',
                type='integer',
                description='The unique identifier of the activity.',
                required=False,
            ),
            ModelProperty(
                name='apptNumber',
                type='string',
                description='This field may be used by integrations to store the identifier of the activity in the origin system. This field has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40.',
                required=False,
            ),
            ModelProperty(
                name='customerNumber',
                type='string',
                description='The account number of the customer. This field is used by integrations as a placeholder for the external identifier of the Account ID in the application. This parameter has no business significance in Oracle Field Service and can be left empty. Maximum field length is 40. If a longer value is sent it will be truncated.',
                required=False,
            ),
            ModelProperty(
                name='activityType',
                type='string',
                description='The label of the activity type.',
                required=True,
            ),
            ModelProperty(
                name='timeZone',
                type='string',
                description='The name of the customer\'s time zone. For example, Eastern. By default, the time zone of the resource to which the activity is assigned is used.For a list of supported time zones, see <a href="OFSC_Supported_Time_Zones.html">Supported Time Zones</a>.',
                required=True,
            ),
        ],
        required_properties=['activityType', 'timeZone'],
        inheritance=[],
        used_in_endpoints=[],
        used_in_request_endpoints=[],
        used_in_response_endpoints=[],
        mapped_pydantic_class=None,
        module='unknown',
        schema_type='object',
        examples=[],
        nested_models=[],
        parent_models=['showBookingGridSchema'],
    ),
}


# Utility functions for model lookup and analysis

def get_model_by_name(name: str) -> Optional[ModelInfo]:
    """Get model by name."""
    return MODELS.get(name)


def get_models_by_module(module: str) -> List[ModelInfo]:
    """Get all models for a specific module."""
    return [model for model in MODELS.values() if model.module == module]


def get_models_for_endpoint(method: str, path: str) -> List[ModelInfo]:
    """Get all models used by a specific endpoint."""
    endpoint_key = f"{method.upper()} {path}"
    return [model for model in MODELS.values() if endpoint_key in model.used_in_endpoints]


def get_endpoints_using_model(model_name: str) -> List[str]:
    """Get all endpoints that use a specific model."""
    model = MODELS.get(model_name)
    return model.used_in_endpoints if model else []


def get_models_with_pydantic_mapping() -> List[ModelInfo]:
    """Get all models that have corresponding Pydantic classes."""
    return [model for model in MODELS.values() if model.mapped_pydantic_class is not None]


def get_models_without_pydantic_mapping() -> List[ModelInfo]:
    """Get all models that don't have corresponding Pydantic classes."""
    return [model for model in MODELS.values() if model.mapped_pydantic_class is None]


def get_model_inheritance_chain(model_name: str) -> List[str]:
    """Get the complete inheritance chain for a model."""
    model = MODELS.get(model_name)
    if not model:
        return []
    
    chain = []
    to_process = [model_name]
    processed = set()
    
    while to_process:
        current_name = to_process.pop(0)
        if current_name in processed:
            continue
        processed.add(current_name)
        
        current_model = MODELS.get(current_name)
        if current_model:
            chain.append(current_name)
            to_process.extend(current_model.inheritance)
    
    return chain


def get_models_by_property_type(property_type: str) -> List[ModelInfo]:
    """Get all models that have properties of a specific type."""
    result = []
    for model in MODELS.values():
        for prop in model.properties:
            if prop.type == property_type or (prop.ref and prop.ref == property_type):
                result.append(model)
                break
    return result


def generate_mapping_coverage_report() -> Dict[str, Any]:
    """Generate a comprehensive report on Pydantic mapping coverage."""
    total_models = len(MODELS)
    mapped_models = len(get_models_with_pydantic_mapping())
    unmapped_models = len(get_models_without_pydantic_mapping())
    
    # Group by module
    by_module = {}
    for module in set(model.module for model in MODELS.values()):
        module_models = get_models_by_module(module)
        module_mapped = [m for m in module_models if m.mapped_pydantic_class]
        by_module[module] = {
            "total": len(module_models),
            "mapped": len(module_mapped),
            "unmapped": len(module_models) - len(module_mapped),
            "coverage_percentage": (len(module_mapped) / len(module_models) * 100) if module_models else 0
        }
    
    return {
        "total_models": total_models,
        "mapped_models": mapped_models,
        "unmapped_models": unmapped_models,
        "overall_coverage_percentage": (mapped_models / total_models * 100) if total_models > 0 else 0,
        "by_module": by_module,
        "unmapped_model_names": [m.name for m in get_models_without_pydantic_mapping()]
    }


# Indexes for efficient lookup
MODELS_BY_MODULE: Dict[str, List[ModelInfo]] = {}
for model in MODELS.values():
    if model.module not in MODELS_BY_MODULE:
        MODELS_BY_MODULE[model.module] = []
    MODELS_BY_MODULE[model.module].append(model)

MODELS_BY_ENDPOINT: Dict[str, List[ModelInfo]] = {}
for model in MODELS.values():
    for endpoint in model.used_in_endpoints:
        if endpoint not in MODELS_BY_ENDPOINT:
            MODELS_BY_ENDPOINT[endpoint] = []
        MODELS_BY_ENDPOINT[endpoint].append(model)

MODELS_WITH_PYDANTIC_MAPPING = {
    model.name: model for model in MODELS.values() 
    if model.mapped_pydantic_class is not None
}

MODELS_WITHOUT_PYDANTIC_MAPPING = {
    model.name: model for model in MODELS.values() 
    if model.mapped_pydantic_class is None
}

# Build inheritance graph
INHERITANCE_GRAPH: Dict[str, List[str]] = {}
for model in MODELS.values():
    INHERITANCE_GRAPH[model.name] = model.inheritance

# Summary statistics
TOTAL_MODELS = len(MODELS)
MODELS_COUNT_BY_MODULE = {module: len(models) for module, models in MODELS_BY_MODULE.items()}
MAPPED_MODELS_COUNT = len(MODELS_WITH_PYDANTIC_MAPPING)
UNMAPPED_MODELS_COUNT = len(MODELS_WITHOUT_PYDANTIC_MAPPING)
OVERALL_MAPPING_COVERAGE = (MAPPED_MODELS_COUNT / TOTAL_MODELS * 100) if TOTAL_MODELS > 0 else 0
